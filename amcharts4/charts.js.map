{"version":3,"sources":["webpack:///../../../../../src/.internal/charts/axes/DateAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/DateAxis.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","webpack:///../../../../../src/.internal/charts/axes/CategoryAxis.ts","webpack:///../../../../../src/.internal/charts/series/XYSeries.ts","webpack:///../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","webpack:///../../../../../src/.internal/charts/types/XYChart.ts","webpack:///../../../../../src/.internal/charts/series/LineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/LineSeries.ts","webpack:///../../../../../src/.internal/charts/series/RadarSeries.ts","webpack:///../../../../../src/.internal/charts/axes/AxisFillCircular.ts","webpack:///../../../../../src/.internal/charts/axes/GridCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","webpack:///../../../../../src/.internal/charts/types/RadarChart.ts","webpack:///../../../../../src/.internal/charts/elements/ClockHand.ts","webpack:///../../../../../src/.internal/charts/types/GaugeChart.ts","webpack:///../../../../../src/.internal/charts/series/PieSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/PieChart3D.ts","webpack:///../../../../../src/.internal/charts/types/SlicedChart.ts","webpack:///../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","webpack:///../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","webpack:///../../../../../src/.internal/charts/types/FlowDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/LabelBullet.ts","webpack:///../../../../../src/.internal/charts/elements/SankeyNode.ts","webpack:///../../../../../src/.internal/charts/elements/SankeyLink.ts","webpack:///../../../../../src/.internal/charts/types/SankeyDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/ChordNode.ts","webpack:///../../../../../src/.internal/core/elements/QuadraticCurve.ts","webpack:///../../../../../src/.internal/charts/elements/ChordLink.ts","webpack:///../../../../../src/.internal/charts/types/ChordDiagram.ts","webpack:///../../../../../src/.internal/charts/elements/Column.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries.ts","webpack:///../../../../../src/.internal/charts/series/TreeMapSeries.ts","webpack:///../../../../../src/.internal/charts/types/TreeMap.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","webpack:///../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","webpack:///../../../../../src/.internal/charts/elements/Column3D.ts","webpack:///../../../../../src/.internal/charts/series/ColumnSeries3D.ts","webpack:///../../../../../src/.internal/charts/types/XYChart3D.ts","webpack:///../../../../../src/.internal/charts/elements/Candlestick.ts","webpack:///../../../../../src/.internal/charts/series/CandlestickSeries.ts","webpack:///../../../../../src/.internal/charts/elements/OHLC.ts","webpack:///../../../../../src/.internal/charts/series/OHLCSeries.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","webpack:///../../../../../src/.internal/charts/series/StepLineSeries.ts","webpack:///../../../../../src/.internal/charts/elements/RadarColumn.ts","webpack:///../../../../../src/.internal/charts/series/RadarColumnSeries.ts","webpack:///../../../../../src/.internal/charts/elements/FunnelSlice.ts","webpack:///../../../../../src/.internal/charts/elements/FunnelTick.ts","webpack:///../../../../../src/.internal/charts/series/FunnelSeries.ts","webpack:///../../../../../src/.internal/charts/series/PyramidSeries.ts","webpack:///../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","webpack:///../../../../../src/.internal/charts/elements/ConeColumn.ts","webpack:///../../../../../src/.internal/charts/series/ConeSeries.ts","webpack:///../../../../../src/.internal/charts/elements/CurvedColumn.ts","webpack:///../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","webpack:///../../../../../src/.internal/charts/axes/DurationAxis.ts","webpack:///../../../../../src/.internal/charts/elements/CircleBullet.ts","webpack:///../../../../../src/.internal/charts/elements/ErrorBullet.ts","webpack:///../../../../../src/.internal/charts/elements/NavigationBar.ts","webpack:///../../../../../src/.internal/charts/cursors/Cursor.ts","webpack:///../../../../../src/.internal/charts/cursors/XYCursor.ts","webpack:///../../../../../src/.internal/charts/cursors/RadarCursor.ts","webpack:///./charts.js"],"names":["DateAxisBreak_DateAxisBreak","_super","DateAxisBreak","_this","call","this","className","applyTheme","tslib_es6","Object","defineProperty","prototype","getPropertyValue","value","setPropertyValue","startValue","getTime","axis","invalidate","invalidateSeries","endValue","ValueAxisBreak","Registry","registeredClasses","DateAxis_DateAxisDataItem","DateAxisDataItem","values","date","endDate","dates","setDate","ValueAxis","DateAxis_DateAxis","DateAxis","gridIntervals","List","dateFormats","Dictionary","periodChangeDateFormats","_baseIntervalReal","timeUnit","count","_minDifference","snapTooltip","tooltipPosition","pushAll","axisFieldName","fillRule","dataItem","component","gridInterval","_gridInterval","gridDuration","Time","Math","round","min","axisFill","__disabled","applyInternalDefaults","hasKey","setKey","language","translate","createDataItem","createAxisBreak","validateDataItems","start","end","periodCount","max","baseDuration","maxZoomFactor","_deltaMinMax","zoom","handleSelectionExtremesChange","calculateZoom","chooseInterval","adjustDifference","_minZoomed","_maxZoomed","_gridCount","baseInterval","_gridDate","Date","getFirstWeekDay","dateFormatter","utc","_nextGridUnit","_intervalDuration","ceil","_difference","floor","Iterator","series","iterator","baseAxis","field_1","getAxisField","minZoomed","minZoomedStr","toString","startDataItem","dataItemsByAxis","getKey","uid","startIndex","findFirst","index","dataItems","findClosestIndex","x","maxZoomed","maxZoomedStr","endDataItem","endIndex","length","dataRangeInvalid","validateDataRange","time","key","previousDataItem","getIndex","previousDate","validateData","Type","minDifference","Number","MAX_VALUE","each","seriesDataChangeUpdate","postProcessSeriesDataItems","JSON","stringify","_baseInterval","postProcessSeriesDataItem","addEmptyUnitsBreaks","utils_Object","getDate","startTime","setCalculatedValue","skipEmptyPeriods","axisBreaks","clear","axisBreak","this_1","startTimeStr","undefined","create","startDate","fixAxisBreaks","breakGridCount","endPosition","startPosition","adjustedEndValue","adjustedStartValue","gridDate","firstDayOfWeek","getGridDate","intervalCount","realIntervalCount","prevTimestamp","newDate","timestamp","isInBreak","durationBreaksRemoved","getBreaklessDate","validateAxisElements","prevGridDate","dataItemsIterator_1","_dataItemsIterator","resetIterators","this_2","format","markUnitChange","text","find","appendDataItem","validateDataElement","renderer_1","renderer","breakSize","timeUnit_1","intervalCount_1","utils_Math","startPoint","endPoint","minGridDistance","prevGridDate_1","timestamp_1","text_1","moveValue","adjustedMax","endTimestamp","position","valueToPosition","fillEndPosition","isRange","tick","disabled","updateTickElement","grid","updateGridElement","fill","updateFillElement","mask","bullet","updateBullet","label","location_1","location","updateLabelElement","adjustMinMax","step","fixMin","startLocation","fixMax","endLocation","duration","gridCount","intervalDuration","lastIndex","formatLabel","dateToPosition","anyToPosition","dateToPoint","point","positionToPoint","angle","positionToAngle","y","anyToPoint","valueToPoint","positionToDate","positionToValue","getPositionX","stackKey","range","getTimeByLocation","baseValue","getPositionY","stack","getValue","getAngle","workingLocations","endTime","workingValue","difference","processSeriesDataItem","axisLetter","openTime","openDate","prevSeriesTime","_prevSeriesTime","abs","differece","updateAxisBySeries","timeInterval","invalidateData","breakTemplate","template","startLine","endLine","fillShape","getTooltipText","tooltipDateFormat","dateFormat","getPositionLabel","adapter","apply","roundPosition","getCellStartPosition","getCellEndPosition","getSeriesDataItem","findNearest","key_1","Infinity","getCurrentLabelFormat","initRenderer","ticks","labels","baseGrid","zoomToDates","skipRangeEvent","instantly","parse","zoomToValues","asIs","field","copyFrom","source","showTooltipAtPosition","local","toAxisPosition","closestDate_1","actualTime_1","xAxis","dateX","yAxis","dateY","closestTime_1","tooltipLocation","showTooltipAtDataItem","chart","_seriesPoints","push","tooltipText","tooltipHTML","hideTooltip","makeGap","previous","connect","autoGapCount","CategoryAxisBreak_CategoryAxisBreak","CategoryAxisBreak","indexToPosition","invalidateDataItems","category","categoryToIndex","AxisBreak","CategoryAxis_CategoryAxisDataItem","CategoryAxisDataItem","Adapter","seriesDataItems","locations","endCategory","isEnabled","properties","setProperty","Axis","CategoryAxis_CategoryAxis","CategoryAxis","dataItemsByCategory","_lastDataItem","_disposers","categoryAxisDataItem","seriesId","_series","invalidateDataRange","positionToIndex","minIndex","maxIndex","i","axisDataItem","i_1","seriesDataItem","validate","dataCount","invalid","maxCount","axisLength","frequency","_startIndex","_endIndex","_frequency","itemIndex","len","frequency_1","itemIndex_1","b","validateBreaks","validateAxisRanges","ghostLabel","invalidateLayout","fillEndIndex","fillPosition","AxisRendererY","measuredWidth","AxisRendererX","measuredHeight","html","currentText","disposeData","processDataItem","dataContext","getDataItem","dataFields","breakStartIndex","breakEndIndex","categoryToPosition","categoryToPoint","zoomToCategories","startCategory","zoomToIndexes","getAnyRangePath","startPos","endPos","getPositionRangePath","getFirstSeriesDataItem","categoryX","categoryY","getLastSeriesDataItem","index_1","sdi_1","category_1","getX","basePoint","categories","getY","breakStartPosition","breakEndPosition","breakPosition","positionToCategory","XYSeries_XYSeriesDataItem","XYSeriesDataItem","valueX","valueY","openValueX","openValueY","openDateX","openDateY","setLocation","setValue","setCategory","openCategoryX","openCategoryY","getMin","fields","working","stackValue","utils_Array","getWorkingValue","getMax","Series","XYSeries_XYSeries","XYSeries","_xAxis","Disposer","_yAxis","_xValueFields","_yValueFields","isMeasured","cursorTooltipEnabled","cursorHoverEnabled","excludeFromTotal","mainContainer","Sprite","setElement","paper","add","stacked","tooltip","pointerOrientation","events","on","returnBulletDefaultState","readerTitle","dataChangeUpdate","_tmin","_tmax","_smin","_smax","defineFields","data","updateItemReaderText","_xField","_yField","Error","name","disable","enable","setInitialWorkingValues","e","_chart","raiseCriticalError","updateDataItem","dataItemsX","clearCatAxis","dataItemsY","xAxisFieldName","xField","xOpenField","Utils","yAxisFieldName","yField","yOpenField","_xOpenField","_yOpenField","addValueField","indexOf","setCategoryAxisField","setDateAxisField","afterDraw","createMask","path_1","getMaskPath","axisRanges","fillPath","path","Path","width","height","pixelY","pixelX","_showBullets","minBulletDistance","get","xAxes","oldAxis","removeKey","dispose","removeValue","set","registerSeries","yAxes","_baseAxis","processValues","minX","maxX","minY","maxY","getStackValue","stackX","stackY","processSeriesDataItems","xAxisId","yAxisId","stackedSeries","isDisposed","dispatchImmediately","appeared","_prevTooltipDataItem","xPosition","yPosition","visible","isHiding","isShowing","getAdjustedXLocation","getAdjustedYLocation","updateLegendValue","tooltipDataItem","tooltipXField","tooltipYField","tooltipPoint","getPoint","tooltipX","tooltipY","type","target","_a","sprites","_b","next","done","sprite","parent","isHidden","isHover","showTooltip","shouldCreateBullet","bulletTemplate","hasValue","disabledField","propertyFields","positionBullet","bulletLocationX","getBulletLocationX","bulletLocationY","getBulletLocationY","locationX","locationY","moveTo","bulletLocation","show","anim","delay","interpolationDuration","defaultState","transitionDuration","a","sequencedInterpolation","sequencedInterpolationDelay","animation","isFinished","hide","hiddenState","validateDataElements","handleDataItemWorkingValueChange","axisSeries","invalidateProcessedData","backwards","prevSeries","prevDataItem","prevValue","prevRealValue","_tooltipXField","_tooltipYField","selectionMin","selectionMax","processConfig","config","map","processingErrors","xKey","yKey","stackKeyX","stackKeyY","val","itemReaderText","XYChartScrollbar_XYChartScrollbar","XYChartScrollbar","interfaceColors","InterfaceColorSet","padding","scrollbarChart","createChild","XYChart_XYChart","shouldClone","margin","interactionsEnabled","_scrollbarChart","minHeight","minWidth","unselectedOverlay","getFor","fillOpacity","toBack","_unselectedOverlay","background","cornerRadius","thumbBackground","thumb","hoverState","states","downState","handleSeriesAdded","handleSeriesRemoved","event","sourceSeries","newValue","zoomOutButton","addXAxis","addYAxis","clone","title","rangeChangeDuration","id","inside","line","strokeOpacity","minLabelPosition","maxLabelPosition","axisFills","vAxis_1","clonedFrom","vAxis_2","stroke","vAxis_3","vAxis_4","showOnInit","zoomOutAxes","filters","DesaturateFilter","updateByOrientation","orientation","oldValue","off","handleDataChanged","dataProvider","updateThumb","w","pixelWidth","h","pixelHeight","Scrollbar","XYChart_XYChartDataItem","XYChartDataItem","SerialChart","XYChart","_axisRendererX","_axisRendererY","maskBullets","arrangeTooltips","chartContainer","layout","topAxesCont","Container","Percent","zIndex","topAxesContainer","yAxesAndPlotCont","yAxesAndPlotContainer","bottomAxesCont","bottomAxesContainer","leftAxesCont","contentAlign","updateXAxesMargins","leftAxesContainer","plotCont","plotContainer","mouseWheelBehavior","_cursorContainer","rightAxesCont","rightAxesContainer","seriesContainer","bulletsContainer","ZoomOutButton","align","valign","MAX_SAFE_INTEGER","marginTop","marginRight","axisBulletsContainer","_bulletMask","exportable","draw","toFront","updateSeriesLegend","updatePlotElements","_parseDataFrom","leftAxesWidth","rightAxesWidth","paddingLeft","paddingRight","reinit","handleXAxisChange","updateXAxis","handleYAxisChange","updateYAxis","processXAxis","observe","handleXAxisRangeChange","processAxis","processYAxis","handleYAxisRangeChange","getCommonAxisRange","scrollbarX","zoomAxes","toggleZoomOutButton","updateScrollbar","show_1","seriesAppeared","scrollbarY","scrollbar","skipRangeEvents","axes","axisStart","axisEnd","inversed","opposite","processRenderer","_dataUsers","gridContainer","breakContainer","addDisposer","dataUsers","inited","updateSeriesMasks","_xAxes","handleAxisRemoval","autoDispose","_yAxes","removeFromInvalidComponents","dataInvalid","colors","_cursor","cursor","removeDispose","handleCursorPositionChange","handleCursorZoomStart","handleCursorZoomEnd","handleCursorPanStart","handleCursorPanning","handleCursorPanEnd","handleCursorCanceled","handleHideCursor","tapToActivate","setTapToActivate","showSeriesTooltip","exceptAxis","snapToSeries","showAxisTooltip","sortSeriesTooltips","hideObjectTooltip","seriesPoints","setBounds","topLeft","bottomRight","sum","filteredSeriesPoints","seriesPoint","sort","averageY","svgContainer","SVGContainer","top_1","bottom","dropped","nextHeight","pointY","pixelMarginTop","nextY","pixelMarginBottom","except","getUpdatedRange","behavior","xRange","priority","yRange","_panStartXRange","_panStartYRange","_panEndXRange","delta","panEndRange","_panEndYRange","maxPanOut","panStartRange","axisRange","newStart","newEnd","newRange","_scrollbarX","startGrip","endGrip","handleXScrollbarChange","arg","_scrollbarY","handleYScrollbarChange","fixRange","declination","realRange","diff","handleWheel","svgPoint","htmlContainer","cssScale","plotPoint","shift","rangeX","rangeY","differenceX","newStartX","newEndX","differenceY","newStartY","newEndY","maxWidth","maxHeight","_mouseWheelDisposer","wheelable","hoverable","dataSourceDateFields","populateDataSourceFields","dataSourceNumberFields","configOrder","createSeries","_zoomOutButton","button","addData","rawDataItem","removeCount","addScrollbarData","removeScrollbarData","remove","dataUser","removeData","interactions","isTouchProtected","handleTapToActivate","handleTapToActivateDeactivation","Responsive","relevant","maybeXS","state","stateId","LineSeriesSegment_LineSeriesSegment","LineSeriesSegment","fillSprite","strokeSprite","Color","drawSegment","points","closePoints","smoothnessX","smoothnessY","Smoothing","smooth","lineElement","fillElement","LineSeries_LineSeriesDataItem","LineSeriesDataItem","LineSeries_LineSeries","LineSeries","minDistance","segments","createSegment","applyOnClones","_segmentsIterator","createNewItems","tensionX","tensionY","segmentsContainer","initialY","setWorkingValue","setWorkingLocation","initialX","notRange","segment","tooltipColorSource","reset","openSegmentWrapper","_adjustedStartIndex","sliceData","findAdjustedIndex","_workingStartIndex","_workingEndIndex","adjustedIndex","property","openIndex","params","openSegment","addToClose","closeIndex","propertiesChanged","getFirst","contents","valuesFound","hasProperties","updateSegmentProperties","addPoints","closeSegment","itemProperties","checkOnly","changed","propertyName","currentValue","currentValueStr","valueStr","createLegendMarker","marker","disposeChildren","Line","x2","Rectangle","legendDataItem","color","colorOrig","bullets","Bullet","copyToLegendMarker","hasLabels","children","child","Label","RadarSeries_RadarSeriesDataItem","RadarSeriesDataItem","RadarSeries_RadarSeries","RadarSeries","connectEnds","radius","startAngle","endAngle","pixelRadius","pixelInnerRadius","unshift","AxisFillCircular_AxisFillCircular","AxisFillCircular","element","innerRadius","setPercentProperty","AxisFill","GridCircular_GridCircular","GridCircular","pixelPerfect","Grid","AxisRendererCircular_AxisRendererCircular","AxisRendererCircular","pixelRadiusReal","useChartAngles","setAxis","cos","atan2","sin","PI","coordinate","positionToCoordinate","arc","updateAxisLine","gridInnerRadius","toggleVisibility","tickLength","AxisBullet","positionItem","fixPosition","fitsToBounds","invalidateAxisItems","createGrid","createFill","createLabel","AxisLabelCircular","pointToPosition","coordinateToPosition","AxisRenderer","AxisRendererRadial_AxisRendererRadial","AxisRendererRadial","gridType","axisAngle","horizontalCenter","verticalCenter","rotation","gridLocation","count_1","cellEndLocation","updateBaseGridElement","count_2","updateBreakElement","createBreakSprites","WavedCircle","updateTooltip","tooltipOrientation","bigNum","axisFullLength","RadarChart_RadarChartDataItem","RadarChartDataItem","RadarChart_RadarChart","RadarChart","innerRadiusModifyer","radarContainer","Circle","opacity","beforeDraw","rect","innerRect","wr","innerWidth","hr","innerHeight","mr","maxRadius","diameter","_pixelInnerRadius","definedBBox","validatePosition","ClockHand_ClockHand","ClockHand","_axis","pin","startWidth","endWidth","hand","Trapezoid","leftSide","rightSide","x0","x1","_pin","_hand","showValue","easing","_value","newAngle","currentAngle","rotationDirection","animate","to","updateValue","GaugeChart_GaugeChartDataItem","GaugeChartDataItem","GaugeChart_GaugeChart","GaugeChart","hands","processHand","PieSeries3D_PieSeries3DDataItem","PieSeries3DDataItem","depthValue","PieSeries","PieSeries3D_PieSeries3D","PieSeries3D","createSlice","Slice3D","slice","depth","depthPercent","percent","PieChart3D_PieChart3DDataItem","PieChart3DDataItem","PieChart","PieChart3D_PieChart3D","PieChart3D","invalidateDataUsers","SlicedChart_SlicedChartDataItem","SlicedChartDataItem","PercentChart","SlicedChart_SlicedChart","SlicedChart","FlowDiagramNode_FlowDiagramNode","FlowDiagramNode","legendSettings","Legend","draggable","inert","setStateOnChildren","invalidateLinks","handleHit","outgoingDataItems","toNode","incomingDataItems","fromNode","link","colorMode","gradient","stop_1","stops","stop_2","_incomingDataItems","sortBy","_incomingSorted","utils_String","fromName","Order","utils_Number","_outgoingDataItems","_outgoingSorted","setColorProperty","_background","removeChildren","column","RoundedRectangle","_legendDataItem","itemContainer","deepInvalidate","FlowDiagramLink_FlowDiagramLink","FlowDiagramLink","positionBullets","_bulletsContainer","_bulletsMask","bulletsMask","middleLine","rotationField","addColor","setFill","_gradient","measureElement","_bullets","Polyline","getTooltipX","getTooltipY","LinearGradient","FlowDiagram_FlowDiagramDataItem","FlowDiagramDataItem","toName","_link","link_1","links","addSprite","Chart","FlowDiagram_FlowDiagram","FlowDiagram","ColorSet","nodePadding","minNodeSize","linksContainer","nodesContainer","nodes","sortNodes","low","high","node","strokeModifier","LinearGradientModifier","opacities","fillModifier","strNode","getNodeValue","feedLegend","_sorted","sortedIterator","total","incomingTotal","outgoingTotal","totalIncoming","totalOutgoing","changeSorting","_nodes","createNode","_links","createLink","legend","legendData_1","LabelBullet_LabelBullet","LabelBullet","truncate","hideOversized","handleMaxSize","SankeyNode_SankeyNode","SankeyNode","nextInCoord","nextOutCoord","nameLabel","valueLabel","orientation_1","dx","dy","endX","endY","linkWidth","valueHeight","startX","startY","SankeyLink_SankeyLink","SankeyLink","tension","controlPointDistance","Polyspline","isTemplate","y0","y1","xt0","yt0","xt1","yt1","xb0","xb1","yb0","yb1","xm0","xm1","ym0","ym1","_bbox","cpd","kxt0","kyt0","kxt1","kyt1","kxm0","kym0","kxm1","kym1","kxb0","kyb0","kxb1","kyb1","SankeyDiagram_SankeyDiagramDataItem","SankeyDiagramDataItem","SankeyDiagram_SankeyDiagram","SankeyDiagram","nodeAlign","_levelCount","level","getNodeLevel","levels","calculateValueHeight","_levelSum","_levelNodesCount","maxSum","availableHeight","maxSumLevel","realValue","_maxSumLevel","maxSumLevelNodeCount","finalHeight","_heightAnimation","animationOptions","err","Animation","from","interpolationEasing","container","nextCoordinate","levelCoordinate","nodeCount","showReal","container_1","nodeHeight","_valueHeight","ChordNode_ChordNode","ChordNode","updateRotation","Slice","ix","iy","arc_1","sliceStartAngle_1","childAngle","childRadius","labelAngle","adjustedTotal","nextAngle","nonRibbon","percentWidth","valueAngle","mAngle","trueStartAngle","tx","ty","QuadraticCurve_QuadraticCurve","QuadraticCurve","y2","cpx","cpy","p1","p2","cp","d","point1","point2","ChordLink_ChordLink","ChordLink","fromX","fromY","toX","toY","mAngle1","mAngle2","ChordDiagram_ChordDiagramDataItem","ChordDiagramDataItem","ChordDiagram_ChordDiagram","ChordDiagram","chordContainer","newTotal","Column_Column","Column","createAssets","handleKidAdded","ColumnSeries_ColumnSeriesDataItem","ColumnSeriesDataItem","_column","setColumn","columns","_rangesColumns","ColumnSeries_ColumnSeries","ColumnSeries","_startLocation","_endLocation","clustered","columnsContainer","_columnsContainer","baseAxisSeries","clusterCount","cellStartLocation","disableUnusedColumns","validateDataElementReal","getStartLocation","simplifiedProcessing","getEndLocation","l","r","t","percentHeight","pixelPaddingLeft","pixelPaddingRight","paddingTop","pixelPaddingTop","paddingBottom","pixelPaddingBottom","outOfBounds","offset","fixHorizontalCoordinate","fixVerticalCoordinate","bottomLocation","topLocation","axisLenght","rightLocation","leftLocation","column_1","itemsFocusable","role","focusable","ev","populateString","realX","realY","realWidth","realHeight","virtualParent","setColumnStates","rangeColumn","rangesColumns","itemWidth","itemHeight","open_1","change","droppedFromOpen","_dropFromOpenState","setState","_riseFromOpenState","droppedFromPrevious","_dropFromPreviousState","_riseFromPreviousState","_columns","createColumnTemplate","fromOpenState_1","fromPreviousState_1","TreeMapSeries_TreeMapSeriesDataItem","TreeMapSeriesDataItem","treeMapDataItem","_dataContext","toValue","TreeMapSeries_TreeMapSeries","TreeMapSeries","configField","hideReal","TreeMap_TreeMapDataItem","TreeMapDataItem","rows","hasChildren","getDuration","childValue","TreeMap_TreeMap","TreeMap","layoutAlgorithm","squarify","zoomable","maxLevels","currentLevel","sorting","strictMinMax","xRenderer","yRenderer","seriesTemplates","zoomToChartDataItem","_homeDataItem","_navigationBar","navigationBar","createTreeSeries","_tempSeries","homeDataItem","_homeText","getMinMax","layoutItems","_updateDataItemIndexes","navigationData","parentDataItem","initSeries","reverse","createTreeSeriesReal","setData","currentlyZoomed","cursorOverStyle","Mouse","pointer","zoomToSeriesDataItem","toggleBullets","rangeChangeAnimation","_dataDisposers","once","binaryTree","dice","sliceDice","validateLayout","validateRawData","n","sums","Array","partition","j","valueOffset","valueTarget","k","hi","mid","valueLeft","valueRight","xk","yk","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","ratio","sqrt","i0","i1","row","handleDataItemValueChange","getLegendLevel","legendParent","getExporting","exporting","info","AxisRendererX3D_AxisRendererX3D","AxisRendererX3D","dx3D","dy3D","getHeight","handle3DChanged","AxisRendererY3D_AxisRendererY3D","AxisRendererY3D","getWidth","Column3D_Column3D","Column3D","column3D","Rectangle3D","ColumnSeries3D_ColumnSeries3DDataItem","ColumnSeries3DDataItem","ColumnSeries3D_ColumnSeries3D","ColumnSeries3D","XYChart3D_XYChart3DDataItem","XYChart3DDataItem","XYChart3D_XYChart3D","XYChart3D","fixLayout","fixColumns","depthIndex","s","inversed_1","maskColumns","Candlestick_Candlestick","Candlestick","lowLine","highLine","CandlestickSeries_CandlestickSeriesDataItem","CandlestickSeriesDataItem","lowValueX","lowValueY","highValueX","highValueY","CandlestickSeries_CandlestickSeries","CandlestickSeries","positiveColor","negativeColor","dropFromOpenState","riseFromOpenState","validateCandlestick","lowLine_1","highLine_1","close_1","yOpen","yClose","yLow","yLowField","yHigh","yHighField","open_2","close_2","xOpen","xClose","xLow","xLowField","xHigh","xHighField","rangeLowLine","rangehighLine","_xLowField","_yLowField","_xHighField","_yHighField","cw","ch","OHLC_OHLC","OHLC","openLine","highLowLine","closeLine","OHLCSeries_OHLCSeriesDataItem","OHLCSeriesDataItem","OHLCSeries_OHLCSeries","OHLCSeries","openLine_1","highLowLine_1","closeLine_1","rangeOpenLine","rangeCloseLine","rangeHighLowLine","StepLineSeriesSegment_StepLineSeriesSegment","StepLineSeriesSegment","noRisers","vertical","StepLineSeries_StepLineSeriesDataItem","StepLineSeriesDataItem","StepLineSeries_StepLineSeries","StepLineSeries","prevPoint","point0","RadarColumn_RadarColumn","RadarColumn","radarColumn","RadarColumnSeries_RadarColumnSeriesDataItem","RadarColumnSeriesDataItem","RadarColumnSeries_RadarColumnSeries","RadarColumnSeries","lAngle","rAngle","tRadius","bRadius","cellAngle","temp","FunnelSlice_FunnelSlice","FunnelSlice","bottomWidth","topWidth","expandDistance","pt","pb","pr","pl","ed","tl","tw","tr","br","bw","bl","cpr","cpl","qp1","qp2","tickPoint","tt","tb","bt","bb","mlx","mty","FunnelTick_FunnelTick","FunnelTick","_label","_slice","labelsOpposite","maxRight","p0","maxBottom","Tick","FunnelSeries_FunnelSeriesDataItem","FunnelSeriesDataItem","_sliceLink","sliceLink_1","sliceLinks","slicesContainer","PercentSeries","FunnelSeries_FunnelSeries","FunnelSeries","_nextY","labelsContainer","bottomRatio","createTick","initSlice","scale","handleSliceScale","handleSliceMove","initLabel","labelTemplate","alignLabels","dItem","_total","_count","arrangeLabels","getNextValue","nextValue","nextItem","formDataElement","sliceLink","decorateSlice","linkHeight","lastLabel","lastY","lastX","_sliceLinks","setAlignLabels","labelAlign","labelValign","PyramidSeries_PyramidSeriesDataItem","PyramidSeriesDataItem","PyramidSeries_PyramidSeries","PyramidSeries","pyramidHeight","valueIs","_nextWidth","relValue","_pyramidHeight","_pyramidWidth","ticksContainer","pyramidWidth","sliceTopWidth","c","tan","sliceHeight","sliceBottomWidth","square","sliceWidth","PictorialStackedSeries_PictorialStackedSeriesDataItem","PictorialStackedSeriesDataItem","PictorialStackedSeries_PictorialStackedSeries","PictorialStackedSeries","_maskSprite","maskSprite","pictureWidth","pictureHeight","newWidth","newHeight","slices","hs","ConeColumn_ConeColumn","ConeColumn","coneColumn","Cone","ConeSeries_ConeSeriesDataItem","ConeSeriesDataItem","ConeSeries_ConeSeries","ConeSeries","radiusY","CurvedColumn_CurvedColumn","CurvedColumn","curvedColumn","CurvedColumnSeries_CurvedColumnSeriesDataItem","CurvedColumnSeriesDataItem","CurvedColumnSeries_CurvedColumnSeries","CurvedColumnSeries","DurationAxis_DurationAxisDataItem","DurationAxisDataItem","DurationAxis_DurationAxis","DurationAxis","_baseUnit","durationFormatter","axisDurationFormat","strictMode","minMaxStep","baseUnit","initialMin","initialMax","divisors","realDivisor","divisors_1","divisors_1_1","divisor","exponent","log","LOG10E","power","pow","reducedCount","getValueUnit","getFormat","_tooltipDurationFormat","_stepDecimalPlaces","tooltipDurationFormat","CircleBullet_CircleBullet","CircleBullet","circle","ErrorBullet_ErrorBullet","ErrorBullet","errorLine","isDynamic","NavigationBar_NavigationBarDataItem","NavigationBarDataItem","DataItem","NavigationBar_NavigationBar","NavigationBar","textLink","TextLink","_linksIterator","triangle","Triangle","direction","marginLeft","separators","activeLink","fontWeight","getLast","separator","Component","Cursor_Cursor","Cursor","_stick","trackable","clickable","interaction","Interaction","body","handleCursorDown","handleCursorUp","handleCursorMove","touch","_generalBehavior","downPoint","isLocalElement","svg","_stickPoint","triggerMove","stick","triggerMoveReal","invalidatePosition","getPositions","dispatch","triggerDown","triggerDownReal","setGlobalStyle","grabbing","triggerUp","triggerUpReal","updatePoint","upPoint","_upPointOrig","_downPointOrig","getHitOption","default","updateSelection","cancelable","shouldPreventGestures","preventDefault","lockElement","XYCursor_XYCursor","XYCursor","_lineX","_lineY","selection","lineX","strokeDasharray","lineY","updateSize","_usesSelection","_positionPrecision","fixPoint","updateLinePositions","getPanningRanges","selectionX","selectionY","getRanges","deltaX","deltaY","handleXTooltipPosition","handleYTooltipPosition","fullWidthLineX","currentItemStartPoint","currentItemEndPoint","fullWidthLineY","_selection","_snapToDisposer","handleSnap","xx","yy","animationDuration","animationEasing","RadarCursor_RadarCursor","RadarCursor","truePixelRadius","updateLineX","updateLineY","fillStartAngle","downAngle","downRadius","currentRadius","_prevAngle","downSin","downCos","upAngle","upRadius","window","am4charts","charts_namespaceObject"],"mappings":"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","file":"charts.js","sourcesContent":["/**\r\n * DateAxisBreak includes functionality to add breaks on a [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { ValueAxisBreak, IValueAxisBreakProperties, IValueAxisBreakAdapters, IValueAxisBreakEvents } from \"./ValueAxisBreak\";\r\nimport { DateAxis } from \"./DateAxis\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[DateAxisBreak]].\r\n */\r\nexport interface IDateAxisBreakProperties extends IValueAxisBreakProperties {\r\n\r\n\t/**\r\n\t * A `Date` break starts on.\r\n\t */\r\n\tstartDate?: Date;\r\n\r\n\t/**\r\n\t * A `Date` break ends on.\r\n\t */\r\n\tendDate?: Date;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxisBreak]]\r\n */\r\nexport interface IDateAxisBreakEvents extends IValueAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisBreakAdapters extends IValueAxisBreakAdapters, IDateAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to define breaks for [[DateAxis]].\r\n *\r\n * A \"break\" can be used to \"cut out\" specific ranges of the axis scale, e.g.\r\n * weekends and holidays out of the Date-based axis.\r\n *\r\n * @see {@link IDateAxisBreakEvents} for a list of available events\r\n * @see {@link IDateAxisBreakAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxisBreak extends ValueAxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: DateAxis;\r\n\r\n\t/**\r\n\t * [gridInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [gridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic gridDate: Date;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting date for the break.\r\n\t *\r\n\t * @param value Start date\r\n\t */\r\n\tpublic set startDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"startDate\", value)) {\r\n\t\t\tthis.startValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start date\r\n\t */\r\n\tpublic get startDate(): Date {\r\n\t\treturn this.getPropertyValue(\"startDate\");\r\n\t}\r\n\r\n\t/**\r\n\t * Ending date for the break.\r\n\t *\r\n\t * @param value End date\r\n\t */\r\n\tpublic set endDate(value: Date) {\r\n\t\tif (this.setPropertyValue(\"endDate\", value)) {\r\n\t\t\tthis.endValue = value.getTime();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.getPropertyValue(\"endDate\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxisBreak\"] = DateAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxisBreak.ts","/**\r\n * DateAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisItemLocation } from \"./Axis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { LineSeriesDataItem } from \"../series/LineSeries\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { DateAxisBreak } from \"./DateAxisBreak\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $time from \"../../core/utils/Time\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DateAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DateAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DateAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.values.date = {};\r\n\t\tthis.values.endDate = {};\r\n\t}\r\n\r\n\t/**\r\n\t * Date position of the data item.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set date(date: Date) {\r\n\t\tthis.setDate(\"date\", date);\r\n\t\tthis.value = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get date(): Date {\r\n\t\treturn this.dates[\"date\"];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * End date for data item.\r\n\t *\r\n\t * @param date End date\r\n\t */\r\n\tpublic set endDate(date: Date) {\r\n\t\tthis.setDate(\"endDate\", date);\r\n\t\tthis.endValue = date.getTime();\r\n\t}\r\n\r\n\t/**\r\n\t * @return End date\r\n\t */\r\n\tpublic get endDate(): Date {\r\n\t\treturn this.dates[\"endDate\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DateAxis]].\r\n */\r\nexport interface IDateAxisDataFields extends IValueAxisDataFields {\r\n\r\n\t/**\r\n\t * Date.\r\n\t */\r\n\tdate?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[DateAxis]].\r\n */\r\nexport interface IDateAxisProperties extends IValueAxisProperties {\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tskipEmptyPeriods?: boolean;\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tmarkUnitChange?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\ttooltipDateFormat?: string;\r\n}\r\n\r\n/**\r\n * Defines events for [[DateAxis]].\r\n */\r\nexport interface IDateAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DateAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDateAxisAdapters extends IValueAxisAdapters, IDateAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a date/time-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DateAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link IDateAxisEvents} for a list of available Events\r\n * @see {@link IDateAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DateAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDateAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDateAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDateAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDateAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DateAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: DateAxisBreak;\r\n\r\n\t/**\r\n\t * A list of date/time intervals for Date axis.\r\n\t *\r\n\t * This define various granularities available for the axis. For example\r\n\t * if you have an axis spanning an hour, and space for 6 grid lines / labels\r\n\t * the axis will choose the granularity of 10 minutes, displaying a label\r\n\t * every 10 minutes.\r\n\t *\r\n\t * Default intervals:\r\n\t *\r\n\t * ```JSON\r\n\t * [\r\n\t *  { timeUnit: \"millisecond\", count: 1 },\r\n\t *  { timeUnit: \"millisecond\", count: 5 },\r\n\t *  { timeUnit: \"millisecond\", count: 10 },\r\n\t *  { timeUnit: \"millisecond\", count: 50 },\r\n\t *  { timeUnit: \"millisecond\", count: 100 },\r\n\t *  { timeUnit: \"millisecond\", count: 500 },\r\n\t *  { timeUnit: \"second\", count: 1 },\r\n\t *  { timeUnit: \"second\", count: 5 },\r\n\t *  { timeUnit: \"second\", count: 10 },\r\n\t *  { timeUnit: \"second\", count: 30 },\r\n\t *  { timeUnit: \"minute\", count: 1 },\r\n\t *  { timeUnit: \"minute\", count: 5 },\r\n\t *  { timeUnit: \"minute\", count: 10 },\r\n\t *  { timeUnit: \"minute\", count: 30 },\r\n\t *  { timeUnit: \"hour\", count: 1 },\r\n\t *  { timeUnit: \"hour\", count: 3 },\r\n\t *  { timeUnit: \"hour\", count: 6 },\r\n\t *  { timeUnit: \"hour\", count: 12 },\r\n\t *  { timeUnit: \"day\", count: 1 },\r\n\t *  { timeUnit: \"day\", count: 2 },\r\n\t *  { timeUnit: \"day\", count: 3 },\r\n\t *  { timeUnit: \"day\", count: 4 },\r\n\t *  { timeUnit: \"day\", count: 5 },\r\n\t *  { timeUnit: \"week\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 1 },\r\n\t *  { timeUnit: \"month\", count: 2 },\r\n\t *  { timeUnit: \"month\", count: 3 },\r\n\t *  { timeUnit: \"month\", count: 6 },\r\n\t *  { timeUnit: \"year\", count: 1 },\r\n\t *  { timeUnit: \"year\", count: 2 },\r\n\t *  { timeUnit: \"year\", count: 5 },\r\n\t *  { timeUnit: \"year\", count: 10 },\r\n\t *  { timeUnit: \"year\", count: 50 },\r\n\t *  { timeUnit: \"year\", count: 100 }\r\n\t * ]\r\n\t * ```\r\n\t */\r\n\tpublic gridIntervals: List<ITimeInterval> = new List<ITimeInterval>();\r\n\r\n\t/**\r\n\t * A collection of date formats to use when formatting different time units\r\n\t * on Date/time axis.\r\n\t *\r\n\t * Actual defaults will depend on the language locale set for the chart.\r\n\t *\r\n\t * To override format for a specific time unit, say days, you need to set\r\n\t * the appropriate key to a format string. E.g.:\r\n\t *\r\n\t * ```TypeScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * axis.dateFormats.setKey(\"day\", \"MMMM d, yyyy\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * \"xAxes\": [{\r\n\t *   \"type\": \"DateAxis\",\r\n\t *   \"dateFormats\": {\r\n\t *     \"day\": \"MMMM d, yyyy\"\r\n\t *   }\r\n\t * }]\r\n\t * ```\r\n\t *\r\n\t * @see {@link DateFormatter}\r\n\t */\r\n\tpublic dateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * These formats are applied to labels that are first in a larger unit.\r\n\t *\r\n\t * For example, if we have a DateAxis with days on it, the first day of month\r\n\t * indicates a break in month - a start of the bigger period.\r\n\t *\r\n\t * For those labels, `periodChangeDateFormats` are applied instead of\r\n\t * `dateFormats`.\r\n\t *\r\n\t * This allows us implement convenient structures, like instead of:\r\n\t *\r\n\t * `Jan 1 - Jan 2 - Jan 3 - ...`\r\n\t *\r\n\t * We can have:\r\n\t *\r\n\t * `Jan - 1 - 2 - 3 - ...`\r\n\t *\r\n\t * This can be disabled by setting `markUnitChange = false`.\r\n\t */\r\n\tpublic periodChangeDateFormats: Dictionary<TimeUnit, string> = new Dictionary<TimeUnit, string>();\r\n\r\n\t/**\r\n\t * At which intervals grid elements are displayed.\r\n\t */\r\n\tprotected _gridInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * [_intervalDuration description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _intervalDuration: number;\r\n\r\n\t/**\r\n\t * [_gridDate description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _gridDate: Date;\r\n\r\n\t/**\r\n\t * [_nextGridUnit description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextGridUnit: TimeUnit;\r\n\r\n\t/**\r\n\t * User-defined granularity of data.\r\n\t */\r\n\tprotected _baseInterval: ITimeInterval;\r\n\r\n\t/**\r\n\t * Actual interval (granularity) derived from the actual data.\r\n\t */\r\n\tprotected _baseIntervalReal: ITimeInterval = { timeUnit: \"day\", count: 1 };\r\n\r\n\t/**\r\n\t */\r\n\tprotected _prevSeriesTime: number;\r\n\r\n\t/**\r\n\t * [_minDifference description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _minDifference: { [index: string]: number } = {};\r\n\r\n\t/**\r\n\t * A function which applies fills to axis cells.\r\n\t *\r\n\t * Default function fills every second fill. You can set this to a function\r\n\t * that follows some other logic.\r\n\t *\r\n\t * Function should accept a [[DateAxisDataItem]] and modify its `axisFill`\r\n\t * property accordingly.\r\n\t */\r\n\tpublic fillRule(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet value = dataItem.value;\r\n\t\tlet axis = dataItem.component;\r\n\t\tlet gridInterval = axis._gridInterval;\r\n\t\tlet gridDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tif (Math.round((value - axis.min) / gridDuration) / 2 == Math.round(Math.round((value - axis.min) / gridDuration) / 2)) {\r\n\t\t\tdataItem.axisFill.__disabled = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdataItem.axisFill.__disabled = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DateAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"markUnitChange\", true);\r\n\t\tthis.snapTooltip = true;\r\n\t\tthis.tooltipPosition = \"pointer\";\r\n\r\n\t\t// Translatable defaults are applied in `applyInternalDefaults()`\r\n\t\t// ...\r\n\r\n\t\t// Define default intervals\r\n\t\tthis.gridIntervals.pushAll([\r\n\t\t\t{ timeUnit: \"millisecond\", count: 1 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 5 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 10 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 50 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 100 },\r\n\t\t\t{ timeUnit: \"millisecond\", count: 500 },\r\n\t\t\t{ timeUnit: \"second\", count: 1 },\r\n\t\t\t{ timeUnit: \"second\", count: 5 },\r\n\t\t\t{ timeUnit: \"second\", count: 10 },\r\n\t\t\t{ timeUnit: \"second\", count: 30 },\r\n\t\t\t{ timeUnit: \"minute\", count: 1 },\r\n\t\t\t{ timeUnit: \"minute\", count: 5 },\r\n\t\t\t{ timeUnit: \"minute\", count: 10 },\r\n\t\t\t{ timeUnit: \"minute\", count: 15 },\r\n\t\t\t{ timeUnit: \"minute\", count: 30 },\r\n\t\t\t{ timeUnit: \"hour\", count: 1 },\r\n\t\t\t{ timeUnit: \"hour\", count: 3 },\r\n\t\t\t{ timeUnit: \"hour\", count: 6 },\r\n\t\t\t{ timeUnit: \"hour\", count: 12 },\r\n\t\t\t{ timeUnit: \"day\", count: 1 },\r\n\t\t\t{ timeUnit: \"day\", count: 2 },\r\n\t\t\t{ timeUnit: \"day\", count: 3 },\r\n\t\t\t{ timeUnit: \"day\", count: 4 },\r\n\t\t\t{ timeUnit: \"day\", count: 5 },\r\n\t\t\t{ timeUnit: \"week\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 1 },\r\n\t\t\t{ timeUnit: \"month\", count: 2 },\r\n\t\t\t{ timeUnit: \"month\", count: 3 },\r\n\t\t\t{ timeUnit: \"month\", count: 6 },\r\n\t\t\t{ timeUnit: \"year\", count: 1 },\r\n\t\t\t{ timeUnit: \"year\", count: 2 },\r\n\t\t\t{ timeUnit: \"year\", count: 5 },\r\n\t\t\t{ timeUnit: \"year\", count: 10 },\r\n\t\t\t{ timeUnit: \"year\", count: 50 },\r\n\t\t\t{ timeUnit: \"year\", count: 100 },\r\n\t\t\t{ timeUnit: \"year\", count: 200 },\r\n\t\t\t{ timeUnit: \"year\", count: 500 },\r\n\t\t\t{ timeUnit: \"year\", count: 1000 },\r\n\t\t\t{ timeUnit: \"year\", count: 2000 },\r\n\t\t\t{ timeUnit: \"year\", count: 5000 },\r\n\t\t\t{ timeUnit: \"year\", count: 10000 },\r\n\t\t\t{ timeUnit: \"year\", count: 100000 }\r\n\t\t]);\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"date\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Set default date formats\r\n\t\tif (!this.dateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.dateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.dateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.dateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.dateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.dateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.dateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\t // not a mistake\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.dateFormats.setKey(\"month\", this.language.translate(\"_date_month\"));\r\n\t\t}\r\n\t\tif (!this.dateFormats.hasKey(\"year\")) {\r\n\t\t\tthis.dateFormats.setKey(\"year\", this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"millisecond\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"millisecond\", this.language.translate(\"_date_millisecond\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"second\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"second\", this.language.translate(\"_date_second\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"minute\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"minute\", this.language.translate(\"_date_minute\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"hour\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"hour\", this.language.translate(\"_date_hour\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"day\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"day\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"week\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"week\", this.language.translate(\"_date_day\"));\r\n\t\t}\r\n\t\tif (!this.periodChangeDateFormats.hasKey(\"month\")) {\r\n\t\t\tthis.periodChangeDateFormats.setKey(\"month\", this.language.translate(\"_date_month\") + \" \" + this.language.translate(\"_date_year\"));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new DateAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new DateAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis' data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems(): void {\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet start: number = this.start;\r\n\t\tlet end: number = this.end;\r\n\t\tlet periodCount: number = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.maxZoomFactor = (this.max - this.min) / this.baseDuration;\r\n\r\n\t\tthis._deltaMinMax = this.baseDuration / 2;\r\n\r\n\t\t// allows to keep selection of the same size\r\n\t\tlet newPeriodCount: number = (this.max - this.min) / this.baseDuration;\r\n\t\tstart = start + (end - start) * (1 - periodCount / newPeriodCount);\r\n\t\tthis.zoom({ start: start, end: end }, false, true); // added instantlyto solve zoomout problem when we have axes gaps. @todo: check how this affects maxZoomFactor\r\n\t}\r\n\r\n\t/**\r\n\t * Handles process after zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Does nothing?\r\n\t */\r\n\tpublic handleSelectionExtremesChange(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates all positions, related to axis as per current zoom.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic calculateZoom(): void {\r\n\t\tsuper.calculateZoom();\r\n\r\n\t\tlet gridInterval: ITimeInterval = this.chooseInterval(0, this.adjustDifference(this._minZoomed, this._maxZoomed), this._gridCount);\r\n\r\n\t\tif ($time.getDuration(gridInterval.timeUnit, gridInterval.count) < this.baseDuration) {\r\n\t\t\tgridInterval = { ...this.baseInterval };\r\n\t\t}\r\n\r\n\t\tthis._gridInterval = gridInterval;\r\n\r\n\t\tthis._gridDate = $time.round(new Date(this.min), gridInterval.timeUnit, gridInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\tthis._nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\r\n\r\n\t\t// the following is needed to avoid grid flickering while scrolling\r\n\t\tthis._intervalDuration = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\t\tlet count: number = Math.ceil(this._difference / this._intervalDuration);\r\n\t\tcount = Math.max(-5, Math.floor(this.start * count) - 3); // some extra is needed\r\n\r\n\t\t$time.add(this._gridDate, gridInterval.timeUnit, count * gridInterval.count, this.dateFormatter.utc);\r\n\r\n\t\t// tell series start/end\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\tlet field = <keyof XYSeriesDataItem>series.getAxisField(this);\r\n\r\n\t\t\t\tlet minZoomed = $time.round(new Date(this._minZoomed), this.baseInterval.timeUnit, this.baseInterval.count).getTime();\r\n\t\t\t\tlet minZoomedStr = minZoomed.toString();\r\n\t\t\t\tlet startDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(minZoomedStr);\r\n\t\t\t\tlet startIndex: number = 0;\r\n\t\t\t\tif (this.start != 0) {\r\n\t\t\t\t\tif (startDataItem) {\r\n\t\t\t\t\t\tstartDataItem = this.findFirst(startDataItem, minZoomed, field);\r\n\t\t\t\t\t\tstartIndex = startDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstartIndex = series.dataItems.findClosestIndex(this._minZoomed, (x) => <number>x[field], \"left\");\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// 1 millisecond is removed so that if only first item is selected, it would not count in the second.\r\n\t\t\t\tlet baseInterval = this.baseInterval;\r\n\t\t\t\tlet maxZoomed = $time.add($time.round(new Date(this._maxZoomed), baseInterval.timeUnit, baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc), baseInterval.timeUnit, baseInterval.count, this.dateFormatter.utc).getTime();\r\n\r\n\t\t\t\tlet maxZoomedStr = maxZoomed.toString();\r\n\t\t\t\tlet endDataItem = series.dataItemsByAxis.getKey(this.uid).getKey(maxZoomedStr);\r\n\t\t\t\tlet endIndex: number = series.dataItems.length;\r\n\t\t\t\tif (this.end != 1) {\r\n\t\t\t\t\tif (endDataItem) {\r\n\t\t\t\t\t\tendIndex = endDataItem.index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tmaxZoomed -= 1;\r\n\t\t\t\t\t\tendIndex = series.dataItems.findClosestIndex(maxZoomed, (x) => <number>x[field], \"right\");\r\n\r\n\t\t\t\t\t\tif (endIndex > 0) {\r\n\t\t\t\t\t\t\tendIndex++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.startIndex = startIndex;\r\n\t\t\t\tseries.endIndex = endIndex;\r\n\r\n\t\t\t\tif (series.dataRangeInvalid) {\r\n\t\t\t\t\tseries.validateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprotected findFirst(dataItem: XYSeriesDataItem, time: number, key: string): XYSeriesDataItem {\r\n\t\tlet index = dataItem.index;\r\n\t\tif (index > 0) {\r\n\t\t\tlet series = dataItem.component;\r\n\t\t\tlet previousDataItem = series.dataItems.getIndex(index - 1);\r\n\t\t\tlet previousDate = (<any>previousDataItem)[key];\r\n\t\t\tif (!previousDate || previousDate.getTime() < time) {\r\n\t\t\t\treturn dataItem;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn this.findFirst(previousDataItem, time, key);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\t\tif (!$type.isNumber(this.baseInterval.count)) {\r\n\t\t\tthis.baseInterval.count = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get minDifference(): number {\r\n\t\tlet minDifference = Number.MAX_VALUE;\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (minDifference > this._minDifference[series.uid]) {\r\n\t\t\t\tminDifference = this._minDifference[series.uid];\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tif (minDifference == Number.MAX_VALUE || minDifference == 0) {\r\n\t\t\tminDifference = $time.getDuration(\"day\");\r\n\t\t}\r\n\r\n\t\treturn minDifference;\r\n\t}\r\n\r\n\t/**\r\n\t * [dataChangeUpdate description]\r\n\t *\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic seriesDataChangeUpdate(series: XYSeries): void {\r\n\t\tthis._minDifference[series.uid] = Number.MAX_VALUE;\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItems description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic postProcessSeriesDataItems(): void {\r\n\t\tthis.series.each((series) => {\r\n\t\t\tif (JSON.stringify(series._baseInterval[this.uid]) != JSON.stringify(this.baseInterval)) {\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t\t});\r\n\t\t\t\tseries._baseInterval[this.uid] = this.baseInterval;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.addEmptyUnitsBreaks();\r\n\t}\r\n\r\n\t/**\r\n\t * [postProcessSeriesDataItem description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic postProcessSeriesDataItem(dataItem: XYSeriesDataItem): void {\r\n\t\t// we need to do this for all series data items not only added recently, as baseInterval might change\r\n\t\tlet baseInterval: ITimeInterval = this.baseInterval;\r\n\r\n\t\tlet series: XYSeries = dataItem.component;\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\t$object.each(dataItem.dates, (key) => {\r\n\t\t\tlet date: Date = dataItem.getDate(key);\r\n\t\t\tlet time = date.getTime();\r\n\r\n\t\t\tlet startDate: Date = $time.round(new Date(time), baseInterval.timeUnit, baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tlet startTime = startDate.getTime();\r\n\t\t\tlet endDate: Date = $time.add(new Date(startTime), baseInterval.timeUnit, baseInterval.count, this.dateFormatter.utc);\r\n\r\n\t\t\tdataItem.setCalculatedValue(key, startTime, \"open\");\r\n\t\t\tdataItem.setCalculatedValue(key, endDate.getTime(), \"close\");\r\n\r\n\t\t\tdataItemsByAxis.setKey(startTime.toString(), dataItem);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Collapses empty stretches of date/time scale by creating [[AxisBreak]]\r\n\t * elements for them.\r\n\t *\r\n\t * Can be used to automatically remove strethes without data, like weekends.\r\n\t *\r\n\t * No, need to call this manually. It will automatically be done if\r\n\t * `skipEmptyPeriods = true`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected addEmptyUnitsBreaks(): void {\r\n\r\n\t\tif (this.skipEmptyPeriods && $type.isNumber(this.min) && $type.isNumber(this.max)) {\r\n\t\t\tlet timeUnit: TimeUnit = this.baseInterval.timeUnit;\r\n\t\t\tlet count: number = this.baseInterval.count;\r\n\r\n\t\t\tthis.axisBreaks.clear(); // TODO: what about breaks added by user?\r\n\r\n\t\t\tlet date: Date = $time.round(new Date(this.min), timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tlet axisBreak: DateAxisBreak;\r\n\r\n\t\t\twhile (date.getTime() < this.max - this.baseDuration) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\r\n\t\t\t\tlet startTime: number = date.getTime();\r\n\t\t\t\tlet startTimeStr: string = startTime.toString();\r\n\r\n\t\t\t\tlet hasData = $iter.contains(this.series.iterator(), (series) => {\r\n\t\t\t\t\treturn !!series.dataItemsByAxis.getKey(this.uid).getKey(startTimeStr);\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// open break if not yet opened\r\n\t\t\t\tif (!hasData) {\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\taxisBreak = <DateAxisBreak>this.axisBreaks.create();\r\n\t\t\t\t\t\taxisBreak.startDate = new Date(startTime);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// close if already opened\r\n\t\t\t\t\tif (axisBreak) {\r\n\t\t\t\t\t\t// close at end time minus one millisecond\r\n\t\t\t\t\t\taxisBreak.endDate = new Date(startTime - 1);\r\n\t\t\t\t\t\taxisBreak = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates positioning of Axis breaks after something changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fixAxisBreaks(): void {\r\n\t\tsuper.fixAxisBreaks();\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\t\tif (axisBreaks.length > 0) {\r\n\t\t\t// process breaks\r\n\t\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\t\tlet breakGridCount: number = Math.ceil(this._gridCount * (Math.min(this.end, axisBreak.endPosition) - Math.max(this.start, axisBreak.startPosition)) / (this.end - this.start));\r\n\t\t\t\taxisBreak.gridInterval = this.chooseInterval(0, axisBreak.adjustedEndValue - axisBreak.adjustedStartValue, breakGridCount);\r\n\t\t\t\tlet gridDate = $time.round(new Date(axisBreak.adjustedStartValue), axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\t\tif (gridDate.getTime() > axisBreak.startDate.getTime()) {\r\n\t\t\t\t\t$time.add(gridDate, axisBreak.gridInterval.timeUnit, axisBreak.gridInterval.count, this.dateFormatter.utc);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxisBreak.gridDate = gridDate;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected getFirstWeekDay(): number {\r\n\t\tif (this.dateFormatter) {\r\n\t\t\treturn this.dateFormatter.firstDayOfWeek;\r\n\t\t}\r\n\r\n\t\treturn 1;\r\n\t}\r\n\r\n\t/**\r\n\t * [getGridDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param date           [description]\r\n\t * @param intervalCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getGridDate(date: Date, intervalCount: number): Date {\r\n\t\tlet timeUnit: TimeUnit = this._gridInterval.timeUnit;\r\n\t\tlet realIntervalCount: number = this._gridInterval.count;\r\n\t\t// round date\r\n\t\t$time.round(date, timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tlet prevTimestamp: number = date.getTime();\r\n\r\n\t\tlet newDate: Date = $time.copy(date);\r\n\t\t// modify date by adding intervalcount\r\n\t\tlet timestamp: number = $time.add(newDate, timeUnit, intervalCount, this.dateFormatter.utc).getTime();\r\n\r\n\t\t// if it's axis break, get first rounded date which is not in a break\r\n\t\tlet axisBreak: DateAxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak && axisBreak.endDate) {\r\n\t\t\tnewDate = new Date(axisBreak.endDate.getTime());\r\n\t\t\t$time.round(newDate, timeUnit, realIntervalCount, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\tif (newDate.getTime() < axisBreak.endDate.getTime()) {\r\n\t\t\t\t$time.add(newDate, timeUnit, realIntervalCount, this.dateFormatter.utc);\r\n\t\t\t}\r\n\t\t\ttimestamp = newDate.getTime();\r\n\t\t}\r\n\r\n\t\t// get duration between grid lines with break duration removed\r\n\t\tlet durationBreaksRemoved: number = this.adjustDifference(prevTimestamp, timestamp);\r\n\t\t// calculate how many time units fit to this duration\r\n\t\tlet countBreaksRemoved: number = Math.round(durationBreaksRemoved / $time.getDuration(timeUnit));\r\n\r\n\t\t// if less units fit, add one and repeat\r\n\t\tif (countBreaksRemoved < realIntervalCount) {\r\n\t\t\treturn this.getGridDate(date, intervalCount + realIntervalCount);\r\n\t\t}\r\n\r\n\t\treturn newDate;\r\n\t}\r\n\r\n\t/**\r\n\t * [getBreaklessDate description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param axisBreak  [description]\r\n\t * @param timeUnit   [description]\r\n\t * @param count      [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getBreaklessDate(axisBreak: DateAxisBreak, timeUnit: TimeUnit, count: number): Date {\r\n\t\tlet date = new Date(axisBreak.endValue);\r\n\t\t$time.round(date, timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\r\n\t\tlet timestamp = date.getTime();\r\n\r\n\t\taxisBreak = <DateAxisBreak>this.isInBreak(timestamp);\r\n\t\tif (axisBreak) {\r\n\t\t\treturn this.getBreaklessDate(axisBreak, timeUnit, count);\r\n\t\t}\r\n\t\treturn date;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates all Axis elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateAxisElements(): void {\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\r\n\t\t\tthis.calculateZoom();\r\n\r\n\t\t\t// first regular items\r\n\t\t\tlet timestamp = this._gridDate.getTime();\r\n\t\t\tlet timeUnit = this._gridInterval.timeUnit;\r\n\t\t\tlet intervalCount = this._gridInterval.count;\r\n\t\t\tlet prevGridDate = $time.copy(this._gridDate);\r\n\r\n\t\t\tlet dataItemsIterator = this._dataItemsIterator;\r\n\t\t\tthis.resetIterators();\r\n\r\n\t\t\twhile (timestamp <= this._maxZoomed) {\r\n\t\t\t\tlet date = this.getGridDate($time.copy(prevGridDate), intervalCount);\r\n\r\n\t\t\t\ttimestamp = date.getTime();\r\n\r\n\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this.dateFormatter.utc);\r\n\r\n\t\t\t\tlet format = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this.dateFormatter.utc)) {\r\n\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet text = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\tlet dataItem = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t}\r\n\t\t\t\tthis.appendDataItem(dataItem);\r\n\r\n\t\t\t\tdataItem.axisBreak = undefined;\r\n\t\t\t\tdataItem.date = date;\r\n\t\t\t\tdataItem.endDate = endDate;\r\n\r\n\t\t\t\tdataItem.text = text;\r\n\r\n\t\t\t\tprevGridDate = date;\r\n\r\n\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\t// breaks later\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\t$iter.each(this.axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\t\tif (axisBreak.breakSize > 0) {\r\n\t\t\t\t\tlet timeUnit: TimeUnit = axisBreak.gridInterval.timeUnit;\r\n\t\t\t\t\tlet intervalCount: number = axisBreak.gridInterval.count;\r\n\r\n\t\t\t\t\t// only add grid if gap is bigger then minGridDistance\r\n\t\t\t\t\tif ($math.getDistance(axisBreak.startPoint, axisBreak.endPoint) > renderer.minGridDistance * 4) {\r\n\t\t\t\t\t\tlet timestamp: number = axisBreak.gridDate.getTime();\r\n\r\n\t\t\t\t\t\tlet prevGridDate;\r\n\t\t\t\t\t\tlet count: number = 0;\r\n\t\t\t\t\t\twhile (timestamp <= axisBreak.adjustedMax) {\r\n\t\t\t\t\t\t\tlet date: Date = $time.copy(axisBreak.gridDate);\r\n\t\t\t\t\t\t\ttimestamp = $time.add(date, timeUnit, intervalCount * count, this.dateFormatter.utc).getTime();\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (timestamp > axisBreak.adjustedStartValue && timestamp < axisBreak.adjustedEndValue) {\r\n\t\t\t\t\t\t\t\tlet endDate = $time.copy(date); // you might think it's easier to add intervalduration to timestamp, however it won't work for months or years which are not of the same length\r\n\t\t\t\t\t\t\t\tendDate = $time.add(endDate, timeUnit, intervalCount, this.dateFormatter.utc);\r\n\r\n\t\t\t\t\t\t\t\tlet format: string = this.dateFormats.getKey(timeUnit);\r\n\r\n\t\t\t\t\t\t\t\tif (this.markUnitChange && prevGridDate) {\r\n\t\t\t\t\t\t\t\t\tif ($time.checkChange(date, prevGridDate, this._nextGridUnit, this.dateFormatter.utc)) {\r\n\t\t\t\t\t\t\t\t\t\tif (timeUnit !== \"year\") {\r\n\t\t\t\t\t\t\t\t\t\t\tformat = this.periodChangeDateFormats.getKey(timeUnit);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tlet text: string = this.dateFormatter.format(date, format);\r\n\r\n\t\t\t\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = dataItemsIterator.find((x) => x.text === text);\r\n\t\t\t\t\t\t\t\tif (dataItem.__disabled) {\r\n\t\t\t\t\t\t\t\t\tdataItem.__disabled = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//this.processDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\t\t\tdataItem.axisBreak = axisBreak;\r\n\t\t\t\t\t\t\t\taxisBreak.dataItems.moveValue(dataItem);\r\n\r\n\t\t\t\t\t\t\t\tdataItem.date = date;\r\n\t\t\t\t\t\t\t\tdataItem.endDate = endDate;\r\n\t\t\t\t\t\t\t\tdataItem.text = text;\r\n\t\t\t\t\t\t\t\tprevGridDate = date;\r\n\t\t\t\t\t\t\t\tthis.validateDataElement(dataItem);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//super.validateDataElement(dataItem);\r\n\t\tif ($type.isNumber(this.max) && $type.isNumber(this.min)) {\r\n\t\t\tlet renderer: AxisRenderer = this.renderer;\r\n\r\n\t\t\tlet timestamp = dataItem.value;\r\n\t\t\tlet endTimestamp = dataItem.endValue;\r\n\r\n\t\t\tif (!$type.isNumber(endTimestamp)) {\r\n\t\t\t\tendTimestamp = timestamp;\r\n\t\t\t}\r\n\r\n\t\t\tlet position: number = this.valueToPosition(timestamp);\r\n\t\t\tlet endPosition: number = this.valueToPosition(endTimestamp);\r\n\t\t\tlet fillEndPosition = endPosition;\r\n\r\n\t\t\tif (!dataItem.isRange && this._gridInterval.count > this.baseInterval.count) {\r\n\t\t\t\tendPosition = position + (endPosition - position) / (this._gridInterval.count / this.baseInterval.count);\r\n\t\t\t}\r\n\r\n\t\t\tdataItem.position = position;\r\n\r\n\t\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\t\tif (tick && !tick.disabled) {\r\n\t\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet grid: Grid = dataItem.grid;\r\n\t\t\tif (grid && !grid.disabled) {\r\n\t\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\t\tif (fill && !fill.disabled) {\r\n\t\t\t\trenderer.updateFillElement(fill, position, fillEndPosition);\r\n\t\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\t\tthis.fillRule(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\t\tif (mask) {\r\n\t\t\t\trenderer.updateFillElement(mask, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.bullet) {\r\n\t\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet label: AxisLabel = dataItem.label;\r\n\t\t\tif (label && !label.disabled) {\r\n\t\t\t\tlet location = label.location;\r\n\r\n\r\n\r\n\t\t\t\tif (location == 0) {\r\n\t\t\t\t\tif (this._gridInterval.count == 1 && this._gridInterval.timeUnit != \"week\" && !dataItem.isRange) {\r\n\t\t\t\t\t\tlocation = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlocation = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\trenderer.updateLabelElement(label, position, endPosition, location);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A duration in milliseconds of the `baseInterval`.\r\n\t *\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic get baseDuration(): number {\r\n\t\treturn $time.getDuration(this.baseInterval.timeUnit, this.baseInterval.count);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts min/max values.\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description (review)\r\n\t * @param min  Min timestamp\r\n\t * @param max  Max timestamp\r\n\t * @return Adjusted min/max step\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number): IMinMaxStep {\r\n\t\treturn { min: min, max: max, step: this.baseDuration };\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the minimum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMin(value: number) {\r\n\r\n\t\t// like this because months are not equal\r\n\t\tlet startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count, this.dateFormatter.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the maximum timestamp as per cell start location.\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Adjusted value\r\n\t */\r\n\tprotected fixMax(value: number) {\r\n\t\t// like this because months are not equal\r\n\t\tlet startTime = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc).getTime();\r\n\t\tlet endTime = $time.add(new Date(startTime), this.baseInterval.timeUnit, this.baseInterval.count, this.dateFormatter.utc).getTime();\r\n\r\n\t\treturn startTime + (endTime - startTime) * this.endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [chooseInterval description]\r\n\t *\r\n\t * @ignore Exclude from docs.\r\n\t * @todo Description\r\n\t * @param index      [description]\r\n\t * @param duration   [description]\r\n\t * @param gridCount  [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic chooseInterval(index: number, duration: number, gridCount: number): ITimeInterval {\r\n\t\tlet gridIntervals: List<ITimeInterval> = this.gridIntervals;\r\n\r\n\t\tlet gridInterval: ITimeInterval = gridIntervals.getIndex(index);\r\n\r\n\t\tlet intervalDuration: number = $time.getDuration(gridInterval.timeUnit, gridInterval.count);\r\n\r\n\t\tlet lastIndex: number = gridIntervals.length - 1;\r\n\t\tif (index >= lastIndex) {\r\n\t\t\treturn { ...gridIntervals.getIndex(lastIndex) };\r\n\t\t}\r\n\r\n\t\tlet count: number = Math.ceil(duration / intervalDuration);\r\n\r\n\t\tif (duration < intervalDuration && index > 0) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index - 1) };\r\n\t\t}\r\n\t\tif (count <= gridCount) {\r\n\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t} else {\r\n\t\t\tif (index + 1 < gridIntervals.length) {\r\n\t\t\t\treturn this.chooseInterval(index + 1, duration, gridCount);\r\n\t\t\t} else {\r\n\t\t\t\treturn { ...gridIntervals.getIndex(index) };\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DateFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number): string {\r\n\t\treturn this.dateFormatter.format(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a Date to an asbolute pixel position within Axis.\r\n\t *\r\n\t * @param date  Date\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic dateToPosition(date: Date): number {\r\n\t\treturn this.valueToPosition(date.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a numeric timestamp or a `Date` to a relative position on axis.\r\n\t *\r\n\t * @param date  Date or a timestamp\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(date: Date | number): number {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPosition(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPosition(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts date to orientation point (x, y, angle) on axis\r\n\t *\r\n\t * @param date Date\r\n\t * @return IOrientationPoint\r\n\t */\r\n\tpublic dateToPoint(date: Date): IOrientationPoint {\r\n\t\tlet position = this.dateToPosition(date);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a numeric value to orientation (x, y, angle) point on axis\r\n\t *\r\n\t * @param value  Value\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic anyToPoint(date: Date | number): IOrientationPoint {\r\n\t\tif (date instanceof Date) {\r\n\t\t\treturn this.dateToPoint(date);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.valueToPoint(date);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts pixel position within Axis to a corresponding Date.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Date\r\n\t */\r\n\tpublic positionToDate(position: number): Date {\r\n\t\treturn new Date(this.positionToValue(position));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\t//let stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\r\n\t\tlet position = this.valueToPosition(value);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item's value.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Data field to get value from\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(\"valueX\", \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Data field to get value from\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack ID\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet value: number = this.getTimeByLocation(dataItem, key, location);\r\n\t\tlet stack: number = dataItem.getValue(stackKey, \"stack\");\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.baseValue;\r\n\t\t}\r\n\r\n\t\tlet position = this.valueToPosition(value + stack);\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * [getTimeByLocation description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @param key       [description]\r\n\t * @param location  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getTimeByLocation(dataItem: XYSeriesDataItem, key: string, location: number): number {\r\n\r\n\t\tif (!$type.hasValue(key)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = dataItem.workingLocations[key];\r\n\r\n\t\t\tif (!$type.isNumber(location)) {\r\n\t\t\t\tlocation = 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet startTime: number = dataItem.values[key][\"open\"];\r\n\t\tlet endTime: number = dataItem.values[key][\"close\"];\r\n\r\n\t\tlet workingValue = dataItem.values[key].workingValue;\r\n\t\tlet value = dataItem.values[key].value;\r\n\r\n\t\tlet difference = value - workingValue;\r\n\t\tstartTime -= difference;\r\n\t\tendTime -= difference;\r\n\r\n\t\tif ($type.isNumber(startTime) && $type.isNumber(endTime)) {\r\n\t\t\treturn startTime + (endTime - startTime) * location;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\r\n\t\tlet series = dataItem.component;\r\n\t\tlet time: number;\r\n\r\n\t\tlet date: Date = (<any>dataItem)[\"date\" + axisLetter];\r\n\t\tif (date) {\r\n\t\t\ttime = date.getTime();\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet openDate: Date = (<any>dataItem)[\"openDate\" + axisLetter];\r\n\t\tlet prevSeriesTime: number = this._prevSeriesTime;\r\n\r\n\r\n\t\tlet openTime: number;\r\n\t\tif (openDate) {\r\n\t\t\topenTime = openDate.getTime();\r\n\t\t}\r\n\r\n\t\tif ($type.isNumber(openTime)) {\r\n\t\t\tlet difference = Math.abs(time - openTime);\r\n\r\n\t\t\tif (this._minDifference[series.uid] > difference) {\r\n\t\t\t\tthis._minDifference[series.uid] = difference;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet differece: number = time - prevSeriesTime;\r\n\r\n\t\tif (differece > 0) {\r\n\t\t\tif (this._minDifference[series.uid] > differece) {\r\n\t\t\t\tthis._minDifference[series.uid] = differece;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._prevSeriesTime = time;\r\n\r\n\t\tif (series._baseInterval[this.uid]) {\r\n\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._baseInterval) {\r\n\t\t\t\tseries._baseInterval[this.uid] = this._baseInterval;\r\n\t\t\t\tthis.postProcessSeriesDataItem(dataItem);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [updateAxisBySeries description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic updateAxisBySeries() {\r\n\t\tsuper.updateAxisBySeries();\r\n\t\tlet baseInterval: ITimeInterval = this.chooseInterval(0, this.minDifference, 1);\r\n\r\n\t\t// handle short months\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"day\", 27) && baseInterval.timeUnit == \"week\") {\r\n\t\t\tbaseInterval.timeUnit = \"month\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\t\tif (baseInterval.timeUnit == \"month\") {\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 2) && baseInterval.count == 1) {\r\n\t\t\t\tbaseInterval.count = 2;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 3) && baseInterval.count == 2) {\r\n\t\t\t\tbaseInterval.count = 3;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.minDifference >= $time.getDuration(\"day\", 29 * 6) && baseInterval.count == 5) {\r\n\t\t\t\tbaseInterval.count = 6;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// handle daylight saving\r\n\t\tif (this.minDifference >= $time.getDuration(\"hour\", 23) && baseInterval.timeUnit == \"hour\") {\r\n\t\t\tbaseInterval.timeUnit = \"day\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"week\", 1) - $time.getDuration(\"hour\", 1) && baseInterval.timeUnit == \"day\") {\r\n\t\t\tbaseInterval.timeUnit = \"week\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tif (this.minDifference >= $time.getDuration(\"year\", 1) - $time.getDuration(\"day\", 1.01) && baseInterval.timeUnit == \"month\") {\r\n\t\t\tbaseInterval.timeUnit = \"year\";\r\n\t\t\tbaseInterval.count = 1;\r\n\t\t}\r\n\r\n\t\tthis._baseIntervalReal = baseInterval;\r\n\t\t// no need to invalidate\r\n\t}\r\n\r\n\t/**\r\n\t * A base interval (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * For example, if you have a data set that has a data point every 5 minutes,\r\n\t * you may want to set this to `{ timeUnit: \"minute\", count: 5 }`.\r\n\t *\r\n\t * If not set, the Axis will try to determine the setting by its own, looking\r\n\t * at actual data.\r\n\t *\r\n\t * For best results, try to follow these values for `count`:\r\n\t *\r\n\t * When unit is \"month\", use 12 / count = round number\r\n\t * When unit is \"hour\", use 24 / count = round number\r\n\t * When unit is \"second\" and \"minute\", use 60 / count = round number\r\n\t *\r\n\t * @param timeInterval base interval\r\n\t */\r\n\tpublic set baseInterval(timeInterval: ITimeInterval) {\r\n\t\tif (JSON.stringify(this._baseInterval) != JSON.stringify(timeInterval)) {\r\n\t\t\tthis._baseInterval = timeInterval;\r\n\t\t\tif (!$type.isNumber(timeInterval.count)) {\r\n\t\t\t\ttimeInterval.count = 1;\r\n\t\t\t}\r\n\t\t\tthis.invalidate();\r\n\t\t\tthis.postProcessSeriesDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base interval\r\n\t */\r\n\tpublic get baseInterval(): ITimeInterval {\r\n\t\tif (this._baseInterval) {\r\n\t\t\treturn this._baseInterval;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._baseIntervalReal;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * If enabled, axis will automatically collapse empty (without data points)\r\n\t * periods of time, i.e. weekends.\r\n\t *\r\n\t * An \"empty\" period is considered a stretch of time in the length of current\r\n\t * `baseInterval` without a single data point in it.\r\n\t *\r\n\t * For each such empty period, axis will automatically create an\r\n\t * [[AxisBreak]]. By default they will be invisible. You can still configure\r\n\t * them by accessing `axis.breaks.template`.\r\n\t *\r\n\t * [More info about breaks](https://www.amcharts.com/docs/v4/concepts/axes/#Breaks).\r\n\t *\r\n\t * Important notes:\r\n\t * * If you set this property to `true`, you can not add your custom axis breaks to this axis anymore.\r\n\t * * Using this feature affects performance. Use only if you need it.\r\n\t * * Setting this to `true` will reset appearance of breaks. If you want to modify appearance, do it *after* you set `skipEmptyPeriods`.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Remove empty stretches of time?\r\n\t */\r\n\tpublic set skipEmptyPeriods(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"skipEmptyPeriods\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\r\n\t\tif (value) {\r\n\t\t\tlet breakTemplate = this.axisBreaks.template;\r\n\t\t\tbreakTemplate.startLine.disabled = true;\r\n\t\t\tbreakTemplate.endLine.disabled = true;\r\n\t\t\tbreakTemplate.fillShape.disabled = true;\r\n\t\t\tbreakTemplate.breakSize = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Remove empty stretches of time?\r\n\t */\r\n\tpublic get skipEmptyPeriods(): boolean {\r\n\t\treturn this.getPropertyValue(\"skipEmptyPeriods\");\r\n\t}\r\n\r\n\t/**\r\n\t * A special date format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @param value  Date format\r\n\t */\r\n\tpublic set tooltipDateFormat(value: string) {\r\n\t\tthis.setPropertyValue(\"tooltipDateFormat\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date format\r\n\t */\r\n\tpublic get tooltipDateFormat(): string {\r\n\t\treturn this.getPropertyValue(\"tooltipDateFormat\");\r\n\t}\r\n\r\n\t/**\r\n\t * Use `periodChangeDateFormats` to apply different formats to the first\r\n\t * label in bigger time unit.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Use different format for period beginning?\r\n\t */\r\n\tpublic set markUnitChange(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"markUnitChange\", value)) {\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use different format for period beginning?\r\n\t */\r\n\tpublic get markUnitChange(): boolean {\r\n\t\treturn this.getPropertyValue(\"markUnitChange\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a tooltip, based on specific relative position\r\n\t * within axis.\r\n\t *\r\n\t * The label will be formatted as per [[DateFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position\r\n\t * @return Label (formatted date)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet text: string;\r\n\t\tlet date = this.positionToDate(position);\r\n\t\tdate = $time.round(date, this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc, new Date(this.min));\r\n\r\n\t\tif ($type.hasValue(this.tooltipDateFormat)) {\r\n\t\t\ttext = this.dateFormatter.format(date, this.tooltipDateFormat);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet dateFormat = this.dateFormats.getKey(this.baseInterval.timeUnit);\r\n\t\t\tif (dateFormat) {\r\n\t\t\t\ttext = this.dateFormatter.format(date, dateFormat);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttext = this.getPositionLabel(position);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.adapter.apply(\"getTooltipText\", text);\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position within axis and adjust it to a specific position within base interval. (cell)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position Source position\r\n\t * @param location  Location in the cell\r\n\t * @return Adjusted position\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet baseInterval = this.baseInterval;\r\n\t\tlet timeUnit = baseInterval.timeUnit;\r\n\t\tlet count = baseInterval.count;\r\n\r\n\t\tlet date: Date = this.positionToDate(position);\r\n\r\n\t\t$time.round(date, timeUnit, count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tif (location > 0) {\r\n\t\t\t$time.add(date, timeUnit, location * count, this.dateFormatter.utc);\r\n\t\t}\r\n\r\n\t\tif (this.isInBreak(date.getTime())) {\r\n\t\t\twhile (date.getTime() < this.max) {\r\n\t\t\t\t$time.add(date, timeUnit, count, this.dateFormatter.utc);\r\n\t\t\t\tif (!this.isInBreak(date.getTime())) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn this.dateToPosition(date);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the start of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell start relative position\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an relative position of the end of the cell (period), that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Relative position\r\n\t * @return Cell end relative position\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t\t//return this.dateToPosition($time.add(this.positionToDate(this.roundPosition(position, 1)), this.baseInterval.timeUnit, this.baseInterval.count));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Series data item that corresponds to the specific pixel position\r\n\t * of the Axis.\r\n\t *\r\n\t * If `findNearest` (third parameter) is set to `true`, the method will try\r\n\t * to locate nearest available data item if none is found directly under\r\n\t * `position`.\r\n\t *\r\n\t * @param series       Series\r\n\t * @param position     Position (px)\r\n\t * @param findNearest  Should axis try to find nearest tooltip if there is no data item at exact position\r\n\t * @return Data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tlet value: number = this.positionToValue(position);\r\n\t\tlet date: Date = $time.round(new Date(value), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\tlet dataItemsByAxis = series.dataItemsByAxis.getKey(this.uid);\r\n\r\n\t\tlet dataItem = dataItemsByAxis.getKey(date.getTime().toString());\r\n\r\n\t\t// todo:  alternatively we can find closiest here\r\n\t\tif (!dataItem && findNearest) {\r\n\r\n\t\t\tlet key: \"dateX\" | \"dateY\";\r\n\r\n\t\t\tif (this.axisLetter == \"Y\") {\r\n\t\t\t\tkey = \"dateY\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tkey = \"dateX\";\r\n\t\t\t}\r\n\r\n\t\t\tdataItem = series.dataItems.getIndex(series.dataItems.findClosestIndex(date.getTime(), (x) => {\r\n\t\t\t\tif (x[key]) {\r\n\t\t\t\t\treturn <number>x[key].getTime();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn -Infinity;\r\n\t\t\t\t}\r\n\t\t\t}, \"any\"));\r\n\t\t}\r\n\r\n\t\treturn dataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a formatted date based on position in axis scale.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\t// @todo Better format recognition\r\n\t\tlet date = this.positionToDate(position);\r\n\t\treturn this.dateFormatter.format(date, this.getCurrentLabelFormat());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns label date format based on currently used time units\r\n\t *\r\n\t * @return Format\r\n\t */\r\n\tprotected getCurrentLabelFormat(): string {\r\n\t\treturn this.dateFormats.getKey(this._gridInterval ? this._gridInterval.timeUnit : \"day\");\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes an Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\t\tlet renderer = this.renderer;\r\n\t\tif (renderer) {\r\n\t\t\t// Set defaults\r\n\t\t\trenderer.ticks.template.location = 0;\r\n\t\t\trenderer.grid.template.location = 0;\r\n\t\t\trenderer.labels.template.location = 0;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\treturn { x: 0, y: 0 };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Zooms axis to specific Dates.\r\n\t *\r\n\t * @param startDate       Start date\r\n\t * @param endValue        End date\r\n\t * @param skipRangeEvent  Do not invoke events\r\n\t * @param instantly       Do not play zoom animations\r\n\t */\r\n\tpublic zoomToDates(startDate: Date, endDate: Date, skipRangeEvent?: boolean, instantly?: boolean): void {\r\n\t\tstartDate = this.dateFormatter.parse(startDate);\r\n\t\tendDate = this.dateFormatter.parse(endDate);\r\n\t\tthis.zoomToValues(startDate.getTime(), endDate.getTime(), skipRangeEvent, instantly);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds `baseInterval` to \"as is\" fields.\r\n\t *\r\n\t * @param field  Field name\r\n\t * @return Assign as is?\r\n\t */\r\n\tprotected asIs(field: string): boolean {\r\n\t\treturn field == \"baseInterval\" || super.asIs(field);\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.dateFormats = source.dateFormats;\r\n\t\tthis.periodChangeDateFormats = source.periodChangeDateFormats;\r\n\t\tif (source[\"_baseInterval\"]) {\r\n\t\t\tthis.baseInterval = source.baseInterval;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows Axis tooltip at specific relative position within Axis. (0-1)\r\n\t *\r\n\t * @param position Position (0-1)\r\n\t * @param local or global position\r\n\t */\r\n\tpublic showTooltipAtPosition(position: number, local?: boolean) {\r\n\r\n\t\tif (!local) {\r\n\t\t\tposition = this.toAxisPosition(position);\r\n\t\t}\r\n\r\n\t\tif (this.snapTooltip) {\r\n\t\t\t// rounding is not good, pen/aac4e7f66f019d36b2447f050c600c13 (no last tootltip shown)\r\n\t\t\tlet actualDate = this.positionToDate(position) //$time.round(this.positionToDate(position), this.baseInterval.timeUnit, 1, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\r\n\t\t\tlet actualTime = actualDate.getTime();\r\n\t\t\tlet closestDate: Date;\r\n\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet dataItem = this.getSeriesDataItem(series, position, true);\r\n\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tlet date: Date;\r\n\t\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\t\tdate = dataItem.dateY;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!closestDate) {\r\n\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (Math.abs(closestDate.getTime() - actualTime) > Math.abs(date.getTime() - actualTime)) {\r\n\t\t\t\t\t\t\t\tclosestDate = date;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\tif (closestDate) {\r\n\t\t\t\tlet closestTime = closestDate.getTime();\r\n\t\t\t\tclosestDate = $time.round(new Date(closestTime), this.baseInterval.timeUnit, this.baseInterval.count, this.getFirstWeekDay(), this.dateFormatter.utc);\r\n\t\t\t\tclosestTime = closestDate.getTime();\r\n\r\n\t\t\t\tlet tooltipLocation = this.renderer.tooltipLocation;\r\n\t\t\t\tif (tooltipLocation == 0) {\r\n\t\t\t\t\ttooltipLocation = 0.0001;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tclosestDate = new Date(closestDate.getTime() + this.baseDuration * tooltipLocation);\r\n\t\t\t\tposition = this.dateToPosition(closestDate);\r\n\r\n\t\t\t\tthis.series.each((series) => {\r\n\r\n\t\t\t\t\tlet dataItem = series.dataItemsByAxis.getKey(this.uid).getKey(closestTime.toString());\r\n\t\t\t\t\tlet point = series.showTooltipAtDataItem(dataItem);\r\n\t\t\t\t\tif (point) {\r\n\t\t\t\t\t\tthis.chart._seriesPoints.push({ series: series, point: point });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// check, otherwise column tooltip will be hidden\r\n\t\t\t\t\t\tif (series.tooltipText || series.tooltipHTML) {\r\n\t\t\t\t\t\t\tseries.hideTooltip();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//this.chart.sortSeriesTooltips(seriesPoints);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.showTooltipAtPosition(position, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Current grid interval.\r\n\t *\r\n\t * @return Grid interval\r\n\t */\r\n\tpublic get gridInterval(): ITimeInterval {\r\n\t\treturn this._gridInterval;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic makeGap(dataItem: LineSeriesDataItem, previous: LineSeriesDataItem): boolean {\r\n\t\tlet series = dataItem.component;\r\n\t\tif (dataItem && previous) {\r\n\t\t\tif (!series.connect && $type.isNumber(series.autoGapCount)) {\r\n\t\t\t\tif (series.baseAxis == this) {\r\n\t\t\t\t\tlet time = dataItem.dates[\"date\" + this.axisLetter].getTime();\r\n\t\t\t\t\tlet prevTime = previous.dates[\"date\" + this.axisLetter].getTime();\r\n\r\n\t\t\t\t\tif (time - prevTime > series.autoGapCount * this.baseDuration) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * @return base value\r\n\t */\r\n\tpublic get baseValue(): number {\r\n\t\treturn this.min;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DateAxis\"] = DateAxis;\r\nregistry.registeredClasses[\"DateAxisDataItem\"] = DateAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DateAxis.ts","/**\r\n * A module which defines functionality related to Category Axis Break.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { AxisBreak, IAxisBreakProperties, IAxisBreakAdapters, IAxisBreakEvents } from \"./AxisBreak\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakProperties extends IAxisBreakProperties {\r\n\r\n\t/**\r\n\t * Category break starts on.\r\n\t */\r\n\tstartCategory?: string;\r\n\r\n\t/**\r\n\t * Category break ends on.\r\n\t */\r\n\tendCategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CategoryAxisBreak]].\r\n */\r\nexport interface ICategoryAxisBreakEvents extends IAxisBreakEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CategoryAxisBreak]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisBreakAdapters extends IAxisBreakAdapters, ICategoryAxisBreakProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Base class to define \"breaks\" in axes\r\n * @see {@link ICategoryAxisBreakEvents} for a list of available events\r\n * @see {@link ICategoryAxisBreakAdapters} for a list of available Adapters\r\n */\r\nexport class CategoryAxisBreak extends AxisBreak {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisBreakProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisBreakAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisBreakEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Axis this break is used for.\r\n\t */\r\n\tpublic _axisType: CategoryAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisBreak\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's start.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get startPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedStartValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Pixel position of the break's end.\r\n\t *\r\n\t * @return Position (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get endPosition(): number {\r\n\t\tif (this.axis) {\r\n\t\t\treturn this.axis.indexToPosition(this.adjustedEndValue);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A category break starts on.\r\n\t *\r\n\t * @param value Start category\r\n\t */\r\n\tpublic set startCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"startCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start category\r\n\t */\r\n\tpublic get startCategory(): string {\r\n\t\treturn this.getPropertyValue(\"startCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * A category break ends on.\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tif (this.setPropertyValue(\"endCategory\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.getPropertyValue(\"endCategory\");\r\n\t}\r\n\r\n\t/**\r\n\t * An index of start category.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set startValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"startValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get startValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"startCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"startValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An index of end category or a end value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set endValue(value: number) {\r\n\t\tif (this.setPropertyValue(\"endValue\", value)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateDataItems();\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get endValue(): number {\r\n\t\tlet category: string = this.getPropertyValue(\"endCategory\");\r\n\t\tif (category) {\r\n\t\t\treturn this.axis.categoryToIndex(category);\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.getPropertyValue(\"endValue\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxisBreak\"] = CategoryAxisBreak;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxisBreak.ts","/**\r\n * Category axis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Axis, AxisItemLocation, AxisDataItem, IAxisProperties, IAxisDataFields, IAxisAdapters, IAxisEvents, IAxisDataItemAdapters } from \"./Axis\";\r\nimport { IPoint, IOrientationPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisFill } from \"./AxisFill\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { AxisRendererX } from \"./AxisRendererX\";\r\nimport { AxisRendererY } from \"./AxisRendererY\";\r\nimport { SerialChart } from \"../types/SerialChart\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisLabel } from \"./AxisLabel\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { XYSeries, XYSeriesDataItem } from \"../series/XYSeries\";\r\nimport { CategoryAxisBreak } from \"./CategoryAxisBreak\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport { Adapter } from \"../../core/utils/Adapter\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CategoryAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CategoryAxisDataItem extends AxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CategoryAxis;\r\n\r\n\t/**\r\n\t * Holds Adapter.\r\n\t */\r\n\tpublic adapter = new Adapter<CategoryAxisDataItem, ICategoryAxisDataItemAdapters>(this);\r\n\r\n\tpublic seriesDataItems: { [index: string]: XYSeriesDataItem[] } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxisDataItem\";\r\n\t\tthis.text = \"{category}\";\r\n\r\n\t\tthis.locations.category = 0;\r\n\t\tthis.locations.endCategory = 1;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Category.\r\n\t *\r\n\t * @param value  Category\r\n\t */\r\n\tpublic set category(value: string) {\r\n\t\tthis.setProperty(\"category\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get category(): string {\r\n\t\tif (this.adapter.isEnabled(\"category\")) {\r\n\t\t\treturn this.adapter.apply(\"category\", this.properties.category);\r\n\t\t}\r\n\t\treturn this.properties.category;\r\n\t}\r\n\r\n\t/**\r\n\t * End category.\r\n\t *\r\n\t * Used for items that span several categories, like [[CategoryAxisBreak]].\r\n\t *\r\n\t * @param value  End category\r\n\t */\r\n\tpublic set endCategory(value: string) {\r\n\t\tthis.setProperty(\"endCategory\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End category\r\n\t */\r\n\tpublic get endCategory(): string {\r\n\t\treturn this.properties.endCategory;\r\n\t}\r\n}\r\n\r\n/**\r\n * Defines adapters for [[DataItem]]\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisDataItemAdapters extends IAxisDataItemAdapters {\r\n\tcategory: string;\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisDataFields extends IAxisDataFields {\r\n\r\n\t/**\r\n\t * A field that holds category information.\r\n\t */\r\n\tcategory?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisProperties extends IAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[CategoryAxis]].\r\n */\r\nexport interface ICategoryAxisEvents extends IAxisEvents { }\r\n\r\n/**\r\n * Defines adapter for [[CategoryAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICategoryAxisAdapters extends IAxisAdapters, ICategoryAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create a category-based axis for the chart.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Clients\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"CategoryAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Clients\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link ICategoryAxisEvents} for a list of available Events\r\n * @see {@link ICategoryAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CategoryAxis<T extends AxisRenderer = AxisRenderer> extends Axis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: ICategoryAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICategoryAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICategoryAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICategoryAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: CategoryAxisDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of the axis breaks.\r\n\t */\r\n\tpublic _axisBreak: CategoryAxisBreak;\r\n\r\n\t/**\r\n\t * A reference to chart the axis is for.\r\n\t */\r\n\tpublic chart: SerialChart;\r\n\r\n\t/**\r\n\t * Frequency of the labels on axis.\r\n\t */\r\n\tprotected _frequency: number;\r\n\r\n\t/**\r\n\t * A collection that holds Axis' data items sorted by each category.\r\n\t */\r\n\tpublic dataItemsByCategory: Dictionary<string, this[\"_dataItem\"]> = new Dictionary<string, this[\"_dataItem\"]>();\r\n\r\n\t/**\r\n\t * last data item is used for the closing grid\r\n\t */\r\n\tprotected _lastDataItem: CategoryAxisDataItem;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"CategoryAxis\";\r\n\r\n\t\t// Set field name\r\n\t\tthis.axisFieldName = \"category\";\r\n\r\n\t\tthis._lastDataItem = this.createDataItem();\r\n\t\tthis._lastDataItem.component = this;\r\n\t\tthis._disposers.push(this._lastDataItem);\r\n\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[DataItem]] of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CategoryAxisDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty [[AxisBreak]] of the appropriate type.\r\n\t *\r\n\t * @return Axis break\r\n\t */\r\n\tprotected createAxisBreak(): this[\"_axisBreak\"] {\r\n\t\treturn new CategoryAxisBreak();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes a related series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic processSeriesDataItem(dataItem: XYSeriesDataItem, axisLetter?: string): void {\r\n\t\tsuper.processSeriesDataItem(dataItem, axisLetter);\r\n\t\tlet category: string = (<any>dataItem)[\"category\" + this.axisLetter];\r\n\r\n\t\tlet categoryAxisDataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\tif (categoryAxisDataItem) {\r\n\t\t\tlet seriesId = dataItem.component.uid;\r\n\t\t\tlet seriesDataItems = categoryAxisDataItem.seriesDataItems[seriesId];\r\n\t\t\tif (!seriesDataItems) {\r\n\t\t\t\tseriesDataItems = [];\r\n\t\t\t\tcategoryAxisDataItem.seriesDataItems[seriesId] = seriesDataItems;\r\n\t\t\t}\r\n\t\t\tseriesDataItems.push(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validateDataRange(): void {\r\n\r\n\t\tsuper.validateDataRange();\r\n\r\n\t\t$iter.each(this._series.iterator(), (series) => {\r\n\t\t\tif ((series.xAxis instanceof CategoryAxis) && (series.yAxis instanceof CategoryAxis)) {\r\n\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet startIndex = this.positionToIndex(this.start);\r\n\t\t\t\tlet endIndex = this.positionToIndex(this.end);\r\n\r\n\t\t\t\tif (endIndex >= this.dataItems.length) {\r\n\t\t\t\t\tendIndex--;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet seriesId = series.uid;\r\n\t\t\t\tlet minIndex: number;\r\n\t\t\t\tlet maxIndex: number;\r\n\r\n\t\t\t\tfor (let i = startIndex; i <= endIndex; i++) {\r\n\t\t\t\t\tlet axisDataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif (axisDataItem) {\r\n\t\t\t\t\t\tlet seriesDataItems = axisDataItem.seriesDataItems[seriesId];\r\n\r\n\t\t\t\t\t\tif (seriesDataItems) {\r\n\t\t\t\t\t\t\tfor (let i = 0; i < seriesDataItems.length; i++) {\r\n\t\t\t\t\t\t\t\tlet seriesDataItem = seriesDataItems[i];\r\n\t\t\t\t\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\t\t\t\t\tlet index = seriesDataItem.index;\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(minIndex) || index < minIndex) {\r\n\t\t\t\t\t\t\t\t\t\tminIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif (!$type.isNumber(maxIndex) || index > maxIndex) {\r\n\t\t\t\t\t\t\t\t\t\tmaxIndex = index;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($type.isNumber(minIndex)) {\r\n\t\t\t\t\tseries.startIndex = minIndex;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.start = this.start;\r\n\t\t\t\t}\r\n\t\t\t\tif ($type.isNumber(maxIndex)) {\r\n\t\t\t\t\tseries.endIndex = maxIndex + 1;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tseries.end = this.end;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// range might not change, but axis breaks might.\r\n\t\t\t\tif (this.axisBreaks.length > 0) {\r\n\t\t\t\t\tseries.invalidateDataRange();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates the whole axis. Causes it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tlet dataCount: number = this.dataItems.length;\r\n\r\n\t\tlet startIndex = $math.fitToRange(Math.floor(this.start * dataCount - 1), 0, dataCount);\r\n\t\tlet endIndex = $math.fitToRange(Math.ceil(this.end * dataCount), 0, dataCount);\r\n\r\n\t\tif (this.renderer.invalid) {\r\n\t\t\tthis.renderer.validate();\r\n\t\t}\r\n\r\n\t\t// find frequency at which we'll show items\r\n\t\tlet maxCount: number = this.renderer.axisLength / this.renderer.minGridDistance;\r\n\t\tlet frequency: number = Math.min(this.dataItems.length, Math.ceil((endIndex - startIndex) / maxCount));\r\n\r\n\t\tthis._startIndex = Math.floor(startIndex / frequency) * frequency;\r\n\t\tthis._endIndex = Math.ceil(this.end * dataCount);\r\n\r\n\t\tthis.fixAxisBreaks();\r\n\r\n\t\tif (this._startIndex == this._endIndex) {\r\n\t\t\tthis._endIndex++;\r\n\t\t}\r\n\r\n\t\tthis._frequency = frequency;\r\n\r\n\t\tif (this.axisLength <= 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.maxZoomFactor = this.dataItems.length;\r\n\t\tif (this.dataItems.length <= 0) {\r\n\t\t\tthis.maxZoomFactor = 1;\r\n\t\t}\r\n\r\n\t\tthis.resetIterators();\r\n\r\n\t\t// it's important to use protected variables here, as getters will return 0 - length\r\n\t\t// TODO use iterator instead\r\n\t\t// @ todo: not solved cat axis item fading\r\n\t\tstartIndex = $math.max(0, this._startIndex - this._frequency);\r\n\t\tendIndex = $math.min(this.dataItems.length, this._endIndex + this._frequency);\r\n\r\n\t\tlet itemIndex = 0;\r\n\r\n\t\tfor (let i = 0; i < startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.__disabled = true;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tif (i < this.dataItems.length) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (i / this._frequency == Math.round(i / this._frequency)) {\r\n\t\t\t\t\tlet axisBreak: CategoryAxisBreak = this.isInBreak(i);\r\n\t\t\t\t\tif (!axisBreak) {\r\n\t\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//previously we disabled all before, but this is better for cpu\r\n\t\t\t\t\t//this.validateDataElement(dataItem, itemIndex); // helps to solve shrinking // not good - creates all items\r\n\t\t\t\t\tdataItem.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.appendDataItem(this._lastDataItem);\r\n\t\tthis.validateDataElement(this._lastDataItem, itemIndex + 1, this.dataItems.length);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\taxisBreaks.each((axisBreak) => {\r\n\t\t\tlet adjustedStartValue: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet adjustedEndValue: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif ($math.intersect({ start: adjustedStartValue, end: adjustedEndValue }, { start: this._startIndex, end: this._endIndex })) {\r\n\r\n\t\t\t\tlet frequency: number = $math.fitToRange(Math.ceil(this._frequency / axisBreak.breakSize), 1, adjustedEndValue - adjustedStartValue);\r\n\t\t\t\tlet itemIndex = 0;\r\n\t\t\t\t// TODO use iterator instead\r\n\t\t\t\tfor (let b = adjustedStartValue; b <= adjustedEndValue; b = b + frequency) {\r\n\t\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(b);\r\n\t\t\t\t\tthis.appendDataItem(dataItem);\r\n\t\t\t\t\tthis.validateDataElement(dataItem, itemIndex);\r\n\t\t\t\t\titemIndex++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.validateBreaks();\r\n\t\tthis.validateAxisRanges();\r\n\r\n\t\tthis.ghostLabel.invalidate(); // solves font issue\r\n\t\tthis.renderer.invalidateLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElement description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem   [description]\r\n\t * @param itemIndex  [description]\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"], itemIndex?: number, index?: number): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\t//dataItem.__disabled = false;\r\n\r\n\t\tlet renderer: AxisRenderer = this.renderer;\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = this.categoryToIndex(dataItem.category);\r\n\t\t}\r\n\r\n\t\tlet endIndex = this.categoryToIndex(dataItem.endCategory);\r\n\r\n\t\tif (!$type.isNumber(endIndex)) {\r\n\t\t\tendIndex = index;\r\n\t\t}\r\n\r\n\t\tlet position: number = this.indexToPosition(index, dataItem.locations.category);\r\n\t\tlet endPosition: number = this.indexToPosition(endIndex, dataItem.locations.endCategory);\r\n\r\n\t\tdataItem.position = position;\r\n\r\n\t\tlet fillEndIndex: number;\r\n\t\tlet fillPosition: number;\r\n\t\tlet fillEndPosition: number;\r\n\r\n\t\tif (dataItem.isRange) {\r\n\t\t\tfillEndIndex = endIndex;\r\n\t\t\tfillPosition = this.indexToPosition(index, dataItem.locations.category);\r\n\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, dataItem.locations.endCategory);\r\n\t\t}\r\n\r\n\t\tdataItem.point = renderer.positionToPoint(position);\r\n\r\n\t\tlet tick: AxisTick = dataItem.tick;\r\n\t\tif (tick && !tick.disabled) {\r\n\t\t\trenderer.updateTickElement(tick, position, endPosition);\r\n\t\t}\r\n\r\n\t\tlet grid: Grid = dataItem.grid;\r\n\t\tif (grid && !grid.disabled) {\r\n\t\t\trenderer.updateGridElement(grid, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet label: AxisLabel = dataItem.label;\r\n\t\tif (label && !label.disabled) {\r\n\t\t\t// theorethically this might result problems if category text changes, the range text won't change. But otherwise range.label.text = \"custom text\" wont' work, which is not intuitive.\r\n\t\t\tif (!dataItem.isRange || label.text == undefined) {\r\n\t\t\t\tdataItem.text = dataItem.text;\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateLabelElement(label, position, endPosition);\r\n\r\n\t\t\tif ((renderer instanceof AxisRendererY && dataItem.label.measuredWidth > this.ghostLabel.measuredWidth) || (renderer instanceof AxisRendererX && dataItem.label.measuredHeight > this.ghostLabel.measuredHeight)) {\r\n\t\t\t\tif (dataItem.label.html) {\r\n\t\t\t\t\tthis.ghostLabel.html = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ghostLabel.text = dataItem.label.currentText;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet fill: AxisFill = dataItem.axisFill;\r\n\t\tif (fill && !fill.disabled) {\r\n\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tfillEndIndex = index + this._frequency;\r\n\t\t\t\tfillPosition = this.indexToPosition(index, fill.location);\r\n\t\t\t\tfillEndPosition = this.indexToPosition(fillEndIndex, fill.location);\r\n\t\t\t}\r\n\r\n\t\t\trenderer.updateFillElement(fill, fillPosition, fillEndPosition);\r\n\t\t\tif (!dataItem.isRange) {\r\n\t\t\t\tthis.fillRule(dataItem, itemIndex);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem.bullet) {\r\n\t\t\trenderer.updateBullet(dataItem.bullet, position, endPosition);\r\n\t\t}\r\n\r\n\r\n\t\tlet mask: AxisFill = dataItem.mask;\r\n\t\tif (mask) {\r\n\t\t\trenderer.updateFillElement(mask, fillPosition, fillEndPosition);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tthis.dataItemsByCategory.clear();\r\n\t\tsuper.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes the axis data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  The raw data that corresponds to this data item\r\n\t */\r\n\tpublic processDataItem(dataItem: this[\"_dataItem\"], dataContext: Object): void {\r\n\t\t// creat a collection for fast access\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t\t// check if such category already exists\r\n\t\t//let existingDataItem: CategoryAxisDataItem = this.dataItemsByCategory.getKey(dataItem.category);\r\n\t\t//if (existingDataItem && existingDataItem != dataItem) {\r\n\t\t//\tthis.dataItems.remove(existingDataItem);\r\n\t\t//}\r\n\r\n\t\tthis.dataItemsByCategory.setKey(dataItem.category, dataItem);\r\n\t}\r\n\r\n\r\n\tprotected getDataItem(dataContext?: any): this[\"_dataItem\"] {\r\n\t\tlet category: string = <string>(dataContext[this.dataFields.category]);\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.dataItems.create();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a category index to an actual screen coordinate on the axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param index     Index\r\n\t * @param location  Location (0-1)\r\n\t * @return Position (px)\r\n\t */\r\n\tpublic indexToPosition(index: number, location?: AxisItemLocation | number): number {\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet difference: number = this.adjustDifference(startIndex, endIndex);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tdifference -= startLocation;\r\n\t\tdifference -= (1 - endLocation);\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tif (index < startIndex) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ($math.intersect({ start: breakStartIndex, end: breakEndIndex }, { start: startIndex, end: endIndex })) {\r\n\t\t\t\tbreakStartIndex = Math.max(startIndex, breakStartIndex);\r\n\t\t\t\tbreakEndIndex = Math.min(endIndex, breakEndIndex);\r\n\r\n\t\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\t\t// value to the right of break end\r\n\t\t\t\tif (index > breakEndIndex) {\r\n\t\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t\t}\r\n\t\t\t\t// value to the left of break start\r\n\t\t\t\telse if (index < breakStartIndex) {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// value within break\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = breakStartIndex + (index - breakStartIndex) * breakSize;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn $math.round((index + location - startLocation - startIndex) / difference, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Position\r\n\t */\r\n\tpublic categoryToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.categoryToIndex(category);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tpublic categoryToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\tlet position = this.categoryToPosition(category, location);\r\n\t\tlet point = this.renderer.positionToPoint(position);\r\n\t\tlet angle = this.renderer.positionToAngle(position);\r\n\t\treturn { x: point.x, y: point.y, angle: angle };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to a orientation point (x, y, angle) on axis\r\n\t *\r\n\t * `location` identifies relative location within category. 0 - beginning,\r\n\t * 0.5 - middle, 1 - end, and anything inbetween.\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Orientation point\r\n\t */\r\n\tanyToPoint(category: string, location?: AxisItemLocation): IOrientationPoint {\r\n\t\treturn this.categoryToPoint(category, location);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a string category name to relative position on axis.\r\n\t *\r\n\t * An alias to `categoryToPosition()`.\r\n\t *\r\n\t * @param category  Category name\r\n\t * @param location  Location (0-1)\r\n\t * @return Relative position\r\n\t */\r\n\tpublic anyToPosition(category: string, location?: AxisItemLocation): number {\r\n\t\treturn this.categoryToPosition(category, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts named category to an index of data item it corresponds to.\r\n\t *\r\n\t * @param category  Category\r\n\t * @return Data item index\r\n\t */\r\n\tpublic categoryToIndex(category: string): number {\r\n\t\tif ($type.hasValue(category)) {\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItemsByCategory.getKey(category);\r\n\t\t\tif (dataItem) {\r\n\t\t\t\treturn dataItem.index;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms the axis to specific named ctaegories.\r\n\t *\r\n\t * @param startCategory  Start category\r\n\t * @param endCategory    End category\r\n\t */\r\n\tpublic zoomToCategories(startCategory: string, endCategory: string): void {\r\n\t\tthis.zoomToIndexes(this.categoryToIndex(startCategory), this.categoryToIndex(endCategory) + 1);\r\n\t}\r\n\r\n\t/**\r\n\t * [getAnyRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param start         [description]\r\n\t * @param end           [description]\r\n\t * @param startLocation [description]\r\n\t * @param endLocation   [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic getAnyRangePath(start: string, end: string, startLocation?: AxisItemLocation, endLocation?: AxisItemLocation): string {\r\n\t\tlet startPos: number = this.categoryToPosition(start, startLocation);\r\n\t\tlet endPos: number = this.categoryToPosition(end, endLocation);\r\n\t\treturn this.getPositionRangePath(startPos, endPos); // Base class (Axis) gets range shape from AxisRenderer\r\n\t}\r\n\r\n\t/**\r\n\t * Takes an absolute position (px) within axis and adjust it to a specific\r\n\t * `location` within category it corresponds to.\r\n\t *\r\n\t * @param position  Source position (px)\r\n\t * @param location  Location within category (0-1)\r\n\t * @return Adjusted position (px)\r\n\t */\r\n\tpublic roundPosition(position: number, location?: AxisItemLocation): number {\r\n\t\tlet index: number = this.positionToIndex(position);\r\n\t\treturn this.indexToPosition(index, location);\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns first series data item with specific category\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getFirstSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = 0; i < series.dataItems.length; i++) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Finds and returns last series data item with specific category.\r\n\t * @param series    Target series\r\n\t * @param category  Category\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getLastSeriesDataItem(series: XYSeries, category: string): XYSeriesDataItem {\r\n\r\n\t\tfor (let i = series.dataItems.length - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = series.dataItems.getIndex(i);\r\n\t\t\tif (series.xAxis == this) {\r\n\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (series.yAxis == this) {\r\n\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\treturn dataItem;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns a data item from Series that corresponds to a specific absolute\r\n\t * position on the Axis.\r\n\t *\r\n\t * @param series    Target series\r\n\t * @param position  Position (px)\r\n\t * @return XYSeriesDataItem data item\r\n\t */\r\n\tpublic getSeriesDataItem(series: XYSeries, position: number, findNearest?: boolean): XYSeriesDataItem {\r\n\r\n\t\tif ($type.isNumber(position)) {\r\n\r\n\t\t\tlet index = this.positionToIndex(position);\r\n\r\n\t\t\tif (index >= this.dataItems.length) {\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\r\n\t\t\tlet dataItem = this.dataItems.getIndex(index);\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tlet category = dataItem.category;\r\n\t\t\t\tlet sdi: XYSeriesDataItem;\r\n\r\n\t\t\t\tlet seriesDataItem = series.dataItems.getIndex(index);\r\n\t\t\t\tif (seriesDataItem) {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryX == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (seriesDataItem.categoryY == category) {\r\n\t\t\t\t\t\t\treturn seriesDataItem;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tseries.dataItems.each((dataItem) => {\r\n\t\t\t\t\tif (series.xAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryX == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (series.yAxis == this) {\r\n\t\t\t\t\t\tif (dataItem.categoryY == category) {\r\n\t\t\t\t\t\t\tif (!sdi) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Math.abs(index - sdi.index) > Math.abs(index - dataItem.index)) {\r\n\t\t\t\t\t\t\t\tsdi = dataItem;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t//@todo\r\n\t\t\t\tif (findNearest) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn sdi;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns the X coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return X coordinate (px)\r\n\t */\r\n\tpublic getX(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\r\n\t\tlet position = this.getPositionX(dataItem, key, location, stackKey, range);\r\n\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Category\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionX(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Y coordinate for series' data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @return Y coordinate (px)\r\n\t */\r\n\tpublic getY(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\r\n\t\tlet position = this.getPositionY(dataItem, key, location, stackKey, range);\r\n\r\n\t\tif ($type.isNaN(position)) {\r\n\t\t\treturn this.basePoint.y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.renderer.positionToPoint(position).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative position on axis for series' data item.\r\n\t *\r\n\t * @since 4.5.14\r\n\t * @param  dataItem  Data item\r\n\t * @param  key       Category\r\n\t * @param  location  Location (0-1)\r\n\t * @return           Relative position\r\n\t */\r\n\tpublic getPositionY(dataItem: XYSeriesDataItem, key?: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position;\r\n\t\tif ($type.hasValue(key)) {\r\n\t\t\tposition = this.categoryToPosition(dataItem.categories[key], location);\r\n\t\t}\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn position;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an angle for series data item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param dataItem  Data item\r\n\t * @param key       Category\r\n\t * @param location  Location (0-1)\r\n\t * @param stackKey  Stack key (?)\r\n\t * @param range Range to fit in\r\n\t * @return Angle\r\n\t */\r\n\tpublic getAngle(dataItem: XYSeriesDataItem, key: string, location?: number, stackKey?: string, range?: IRange): number {\r\n\t\tlet position = this.categoryToPosition(dataItem.categories[key], location);\r\n\r\n\t\tif (range) {\r\n\t\t\tposition = $math.fitToRange(position, range.start, range.end);\r\n\t\t}\r\n\r\n\t\treturn this.positionToAngle(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the start of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell start position (px)\r\n\t */\r\n\tpublic getCellStartPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an absolute pixel coordinate of the end of the cell (category),\r\n\t * that specific position value falls into.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param position  Position (px)\r\n\t * @return Cell end position (px)\r\n\t */\r\n\tpublic getCellEndPosition(position: number): number {\r\n\t\treturn this.roundPosition(position, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a category tooltip, based on specific position\r\n\t * within axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (category)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\r\n\t\tif (dataItem) {\r\n\t\t\treturn this.adapter.apply(\"getTooltipText\", dataItem.category);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an index of the category that corresponds to specific pixel\r\n\t * position within axis.\r\n\t *\r\n\t * @param position  Position (px)\r\n\t * @return Category index\r\n\t */\r\n\tpublic positionToIndex(position: number): number {\r\n\t\tposition = $math.round(position, 10);\r\n\t\tif (position < 0) {\r\n\t\t\tposition = 0;\r\n\t\t}\r\n\r\n\t\tif (position > 1) {\r\n\t\t\tposition = 1;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet difference: number = endIndex - startIndex - this.startLocation - (1 - this.endLocation);\r\n\r\n\t\tposition += 1 / difference * this.startLocation;\r\n\r\n\t\tlet axisBreaks = this.axisBreaks;\r\n\r\n\t\tlet index: number = null;\r\n\r\n\t\t// in case we have some axis breaks\r\n\t\t$iter.eachContinue(axisBreaks.iterator(), (axisBreak) => {\r\n\t\t\tlet breakStartPosition: number = axisBreak.startPosition;\r\n\t\t\tlet breakEndPosition: number = axisBreak.endPosition;\r\n\r\n\t\t\tlet breakStartIndex: number = axisBreak.adjustedStartValue;\r\n\t\t\tlet breakEndIndex: number = axisBreak.adjustedEndValue;\r\n\r\n\t\t\tbreakStartIndex = $math.max(breakStartIndex, startIndex);\r\n\t\t\tbreakEndIndex = $math.min(breakEndIndex, endIndex);\r\n\r\n\t\t\tlet breakSize: number = axisBreak.breakSize;\r\n\r\n\t\t\tdifference -= (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\r\n\t\t\t// position to the right of break end\r\n\t\t\tif (position > breakEndPosition) {\r\n\t\t\t\tstartIndex += (breakEndIndex - breakStartIndex) * (1 - breakSize);\r\n\t\t\t}\r\n\t\t\t// position to the left of break start\r\n\t\t\telse if (position < breakStartPosition) {\r\n\r\n\t\t\t}\r\n\t\t\t// value within break\r\n\t\t\telse {\r\n\t\t\t\tlet breakPosition = (position - breakStartPosition) / (breakEndPosition - breakStartPosition);\r\n\t\t\t\tindex = breakStartIndex + Math.round(breakPosition * (breakEndIndex - breakStartIndex));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tif (!$type.isNumber(index)) {\r\n\t\t\tindex = Math.floor(position * difference + startIndex);\r\n\t\t}\r\n\t\tif (index >= this.dataItems.length) {\r\n\t\t\tindex = this.dataItems.length - 1;\r\n\t\t}\r\n\t\t// not good, when panning out of bounds, each time one less item gets selected\r\n\t\t//if (index >= endIndex) {\r\n\t\t//\tindex--;\r\n\t\t//}\r\n\r\n\t\treturn index;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * This is a synonim of `getPositionLabel()` implemented here for consistentcy.\r\n\t *\r\n\t * @since 4.3.8\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic positionToCategory(position: number): string {\r\n\t\treturn this.getPositionLabel(position);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns category based on position.\r\n\t *\r\n\t * Please note that `position` represents position within axis which may be\r\n\t * zoomed and not correspond to Cursor's `position`.\r\n\t *\r\n\t * To convert Cursor's `position` to Axis' `position` use `toAxisPosition()` method.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/tutorials/tracking-cursors-position-via-api/#Tracking_Cursor_s_position} For more information about cursor tracking.\r\n\t * @param position  Relative position on axis (0-1)\r\n\t * @return Position label\r\n\t */\r\n\tpublic getPositionLabel(position: number): string {\r\n\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(this.positionToIndex(position));\r\n\t\tif (dataItem) {\r\n\t\t\treturn dataItem.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Coordinates of the actual axis start.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Base point\r\n\t */\r\n\tpublic get basePoint(): IPoint {\r\n\t\t// This makes base grid to be drawn at the end of the axis and adds extra\r\n\t\t// grid which we need to nicely close the chart.\r\n\t\treturn this.renderer.positionToPoint(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes Axis' renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic initRenderer(): void {\r\n\t\tsuper.initRenderer();\r\n\r\n\t\tlet renderer = this.renderer;\r\n\t\trenderer.baseGrid.disabled = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Current frequency of labels of the axis.\r\n\t *\r\n\t * Normally it would be 1, but when labels start to be hidden due\r\n\t * to `minGridDistance` this read-only property will increase.\r\n\t *\r\n\t * @readonly\r\n\t * @since 4.2.0\r\n\t * @return Label frequency\r\n\t */\r\n\tpublic get frequency(): number {\r\n\t\treturn this._frequency;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CategoryAxis\"] = CategoryAxis;\r\nregistry.registeredClasses[\"CategoryAxisDataItem\"] = CategoryAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/CategoryAxis.ts","/**\r\n * XY series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Series, SeriesDataItem, ISeriesProperties, ISeriesDataFields, ISeriesAdapters, ISeriesEvents } from \"./Series\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport { ITimeInterval } from \"../../core/defs/ITimeInterval\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYSeriesDataItem extends SeriesDataItem {\r\n\r\n\t/**\r\n\t * [_minX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minX: number;\r\n\r\n\t/**\r\n\t * [_maxX description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxX: number;\r\n\r\n\t/**\r\n\t * [_minY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _minY: number;\r\n\r\n\t/**\r\n\t * [_maxY description]\r\n\t *\r\n\t * @todo Descripion\r\n\t */\r\n\tprotected _maxY: number;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYSeriesDataItem\";\r\n\r\n\t\tthis.values.valueX = { stack: 0 };\r\n\t\tthis.values.valueY = { stack: 0 };\r\n\t\tthis.values.openValueX = {};\r\n\t\tthis.values.openValueY = {};\r\n\r\n\t\tthis.values.dateX = {};\r\n\t\tthis.values.dateY = {};\r\n\t\tthis.values.openDateX = {};\r\n\t\tthis.values.openDateY = {};\r\n\r\n\t\tthis.setLocation(\"dateX\", 0.5, 0);\r\n\t\tthis.setLocation(\"dateY\", 0.5, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0.5, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0.5, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set valueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get valueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateX(date: Date) {\r\n\t\tthis.setDate(\"dateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateX(): Date {\r\n\t\treturn this.getDate(\"dateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set dateY(date: Date) {\r\n\t\tthis.setDate(\"dateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get dateY(): Date {\r\n\t\treturn this.getDate(\"dateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryX(category: string) {\r\n\t\tthis.setCategory(\"categoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryX(): string {\r\n\t\treturn this.categories.categoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set categoryY(category: string) {\r\n\t\tthis.setCategory(\"categoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get categoryY(): string {\r\n\t\treturn this.categories.categoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on X value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueX(value: number) {\r\n\t\tthis.setValue(\"openValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueX(): number {\r\n\t\treturn this.values.openValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open numeric value on Y value axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set openValueY(value: number) {\r\n\t\tthis.setValue(\"openValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get openValueY(): number {\r\n\t\treturn this.values.openValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on X date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateX(date: Date) {\r\n\t\tthis.setDate(\"openDateX\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateX(): Date {\r\n\t\treturn this.getDate(\"openDateX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open date value on Y date-based axis.\r\n\t *\r\n\t * @param date  Date\r\n\t */\r\n\tpublic set openDateY(date: Date) {\r\n\t\tthis.setDate(\"openDateY\", date);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Date\r\n\t */\r\n\tpublic get openDateY(): Date {\r\n\t\treturn this.getDate(\"openDateY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on X category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryX(category: string) {\r\n\t\tthis.setCategory(\"openCategoryX\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryX(): string {\r\n\t\treturn this.categories.openCategoryX;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's open category on Y category axis.\r\n\t *\r\n\t * @param category  Category\r\n\t */\r\n\tpublic set openCategoryY(category: string) {\r\n\t\tthis.setCategory(\"openCategoryY\", category);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Category\r\n\t */\r\n\tpublic get openCategoryY(): string {\r\n\t\treturn this.categories.openCategoryY;\r\n\t}\r\n\r\n\t/**\r\n\t * Return smallest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMin(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) {  // dumped because of non smooth zooming\r\n\t\tlet min: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value < min || !$type.isNumber(min)) {\r\n\t\t\t\tmin = value;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn min;\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t * Return biggest value out of all item's value fields.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param fields      Fields to check in\r\n\t * @param working     Include working (temporary) values\r\n\t * @param stackValue  If item is in a stack, the value item starts as\r\n\t * @return Value\r\n\t */\r\n\tpublic getMax(fields: string[], working?: boolean, stackValue?: number): number {\r\n\t\t//if (this.visible) { // dumped because of non smooth zooming\r\n\t\tlet max: number;\r\n\r\n\t\tif (!$type.isNumber(stackValue)) {\r\n\t\t\tstackValue = 0;\r\n\t\t}\r\n\r\n\t\t$array.each(fields, (field) => {\r\n\t\t\tlet value: number;\r\n\r\n\t\t\tif (working) {\r\n\t\t\t\tvalue = this.getWorkingValue(field);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = this.getValue(field);\r\n\t\t\t}\r\n\r\n\t\t\tvalue += stackValue;\r\n\r\n\t\t\tif (value > max || !$type.isNumber(max)) {\r\n\t\t\t\tmax = value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn max;\r\n\t\t//}\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Defines property set for a [[XYSeries]] tooltip event that contains information about dataItem\r\n */\r\nexport type XYSeriesTooltipEvent = {\r\n\r\n\t/**\r\n\t * Shift in coordinates after dragging.\r\n\t */\r\n\tdataItem: XYSeriesDataItem;\r\n};\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesDataFields extends ISeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for horizontal axis.\r\n\t */\r\n\tvalueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value for vertical axis.\r\n\t */\r\n\tvalueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for horizontal axis.\r\n\t */\r\n\tcategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds category for vertical axis.\r\n\t */\r\n\tcategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for horizontal axis.\r\n\t */\r\n\tdateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds date for vertical axis.\r\n\t */\r\n\tdateY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for horizontal\r\n\t * axis.\r\n\t */\r\n\topenValueX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open numeric value for vertical\r\n\t * axis.\r\n\t */\r\n\topenValueY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for horizontal axis.\r\n\t */\r\n\topenCategoryX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open category for vertical axis.\r\n\t */\r\n\topenCategoryY?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for horizontal axis.\r\n\t */\r\n\topenDateX?: string;\r\n\r\n\t/**\r\n\t * Name of the field in data that holds open date for vertical axis.\r\n\t */\r\n\topenDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis value for the\r\n\t * item.\r\n\t */\r\n\tvalueYShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis open value for\r\n\t * the item.\r\n\t */\r\n\topenValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesProperties extends ISeriesProperties {\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tstacked?: boolean;\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tsnapTooltip?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tcursorTooltipEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t * \r\n\t * @default true\r\n\t */\r\n\tcursorHoverEnabled?: boolean;\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t */\r\n\texcludeFromTotal?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYSeries]].\r\n */\r\nexport interface IXYSeriesEvents extends ISeriesEvents {\r\n\t/**\r\n\t * Invoked when series tooltip was shown on some particular data item\r\n\t */\r\n\ttooltipshownat: XYSeriesTooltipEvent;\r\n}\r\n\r\n/**\r\n * Defines adapters for [[XYSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYSeriesAdapters extends ISeriesAdapters, IXYSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for [[XYChart]].\r\n *\r\n * @see {@link IXYSeriesEvents} for a list of available Events\r\n * @see {@link IXYSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class XYSeries extends Series {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IXYSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t */\r\n\tprotected _baseAxis: Axis;\r\n\r\n\t/**\r\n\t * Total data item count.\r\n\t */\r\n\tprotected _count: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * Data item count in current selection.\r\n\t */\r\n\tprotected _scount: Dictionary<string, number>;\r\n\r\n\t/**\r\n\t * [_xField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xField: string;\r\n\r\n\t/**\r\n\t * [_yField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yField: string;\r\n\r\n\t/**\r\n\t * [_xOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xOpenField: string;\r\n\r\n\t/**\r\n\t * [_yOpenField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yOpenField: string;\r\n\r\n\t/**\r\n\t * [_tooltipXField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipXField: string;\r\n\r\n\t/**\r\n\t * [_tooltipYField description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tooltipYField: string;\r\n\r\n\t/**\r\n\t * [_xValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _xValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * [_yValueFields description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _yValueFields: Array<string> = [];\r\n\r\n\t/**\r\n\t * Series which is stacked on top of this series, if any.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic stackedSeries: XYSeries;\r\n\r\n\t/**\r\n\t * Dataitem of previously shown tooltip, used to avoid multiple\r\n\t * tooltipshownat dispatches.\r\n\t */\r\n\tprotected _prevTooltipDataItem: XYSeriesDataItem;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _baseInterval: { [index: string]: ITimeInterval } = {};\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYSeries\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.cursorTooltipEnabled = true;\r\n\r\n\t\tthis.cursorHoverEnabled = true;\r\n\t\tthis.excludeFromTotal = false;\r\n\r\n\t\tthis.mainContainer.mask = new Sprite();\r\n\t\tthis.mainContainer.mask.setElement(this.paper.add(\"path\"));\r\n\r\n\t\tthis.stacked = false;\r\n\t\tthis.snapTooltip = false;\r\n\r\n\t\tthis.tooltip.pointerOrientation = \"horizontal\";\r\n\r\n\t\tthis.tooltip.events.on(\"hidden\", () => {\r\n\t\t\tthis.returnBulletDefaultState();\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new XYSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\t\tthis._tmin.clear();\r\n\t\tthis._tmax.clear();\r\n\r\n\t\tthis._smin.clear();\r\n\t\tthis._smax.clear();\r\n\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tthis.xAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tthis.yAxis.seriesDataChangeUpdate(this);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the series' data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tthis.defineFields();\r\n\r\n\t\tif (this.data.length > 0) {\r\n\t\t\tthis.dataChangeUpdate();\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis.updateItemReaderText();\r\n\r\n\t\tif (!$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._xField]) || !$type.hasValue(this.dataFields[<keyof this[\"_dataFields\"]>this._yField])) {\r\n\t\t\tthrow Error(\"Data fields for series \\\"\" + (this.name ? this.name : this.uid) + \"\\\" are not properly defined.\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\ttry {\r\n\t\t\tsuper.processDataItem(dataItem, dataContext);\r\n\r\n\t\t\tdataItem.events.disable();\r\n\t\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\t\t\tdataItem.events.enable();\r\n\r\n\t\t\tthis.setInitialWorkingValues(dataItem);\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis._chart.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * When validating raw data, instead of processing data item, we update it\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param item\r\n\t */\r\n\tprotected updateDataItem(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.updateDataItem(dataItem);\r\n\r\n\t\t//dataItem.events.disable();\r\n\t\tthis.xAxis.processSeriesDataItem(dataItem, \"X\");\r\n\t\tthis.yAxis.processSeriesDataItem(dataItem, \"Y\");\r\n\t\t//dataItem.events.enable();\t\t\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tif (this.xAxis) {\r\n\t\t\tlet dataItemsX = this.dataItemsByAxis.getKey(this.xAxis.uid);\r\n\t\t\tif (dataItemsX) {\r\n\t\t\t\tdataItemsX.clear();\r\n\t\t\t}\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(this.xAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (this.yAxis) {\r\n\t\t\tlet dataItemsY = this.dataItemsByAxis.getKey(this.yAxis.uid);\r\n\t\t\tif (dataItemsY) {\r\n\t\t\t\tdataItemsY.clear();\r\n\t\t\t}\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis.clearCatAxis(this.yAxis);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected clearCatAxis(axis: CategoryAxis) {\r\n\t\tlet uid = this.uid;\r\n\t\taxis.dataItems.each((dataItem) => {\r\n\t\t\tif (dataItem.seriesDataItems[uid]) {\r\n\t\t\t\tdataItem.seriesDataItems[uid] = [];\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\r\n\t\tlet xAxisFieldName: string = xAxis.axisFieldName;\r\n\t\tlet xField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(xAxisFieldName + \"X\");\r\n\t\tlet xOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(xAxisFieldName) + \"X\");\r\n\r\n\t\tlet yAxisFieldName: string = yAxis.axisFieldName;\r\n\t\tlet yField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(yAxisFieldName + \"Y\");\r\n\t\tlet yOpenField: $type.Keyof<this[\"_dataFields\"]> = <$type.Keyof<this[\"_dataFields\"]>>(\"open\" + $utils.capitalize(yAxisFieldName) + \"Y\");\r\n\r\n\t\tthis._xField = xField;\r\n\t\tthis._yField = yField;\r\n\r\n\t\tif (this.dataFields[xOpenField]) {\r\n\t\t\tthis._xOpenField = xOpenField;\r\n\t\t}\r\n\r\n\t\tif (this.dataFields[yOpenField]) {\r\n\t\t\tthis._yOpenField = yOpenField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[yOpenField] && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif (!this.dataFields[xOpenField] && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.xAxis) {\r\n\t\t\tthis._xOpenField = xField;\r\n\t\t}\r\n\r\n\t\tif (this.stacked && this.baseAxis == this.yAxis) {\r\n\t\t\tthis._yOpenField = yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\t\t\tif (!this._yOpenField) {\r\n\t\t\t\tthis._yOpenField = yField;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._xValueFields = [];\r\n\t\tthis._yValueFields = [];\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xOpenField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yOpenField);\r\n\t}\r\n\r\n\t/**\r\n\t * [axis description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param axis    Axis\r\n\t * @param fields  Fields (?)\r\n\t * @param field   Field\r\n\t */\r\n\tprotected addValueField<Key extends keyof this[\"_dataFields\"]>(axis: Axis, fields: Array<Key>, field: Key): void {\r\n\t\tif (axis instanceof ValueAxis) {\r\n\t\t\tif ($type.hasValue(this.dataFields[field]) && fields.indexOf(field) == -1) {\r\n\t\t\t\tfields.push(field);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets category field from the category axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setCategoryAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: CategoryAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.category;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets date field from the date axis.\r\n\t *\r\n\t * User might set field for category axis only, but not for series. In such\r\n\t * case, we take field value from axis and set it for series.\r\n\t *\r\n\t * @param field  Field\r\n\t * @param axis   Axis\r\n\t */\r\n\tprotected setDateAxisField<Key extends keyof this[\"_dataFields\"]>(field: Key, axis: DateAxis): void {\r\n\t\tif (!$type.hasValue(this.dataFields[field])) {\r\n\t\t\tthis.dataFields[field] = <any>axis.dataFields.date;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs after-draw tasks, e.g. creates masks.\r\n\t */\r\n\tprotected afterDraw(): void {\r\n\t\tsuper.afterDraw();\r\n\t\tthis.createMask();\r\n\t}\r\n\r\n\t/**\r\n\t * Create a mask for the series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic createMask(): void {\r\n\t\t// this mask from which we cut out ranges. does not work well if ranges overlap.\r\n\t\tif (this.mainContainer.mask) {\r\n\t\t\tlet path: string = this.getMaskPath();\r\n\r\n\t\t\t// @todo: this approach won't work well on circluar or other non x/y axes\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\t\tif (range.axisFill.fillPath) {\r\n\t\t\t\t\trange.axisFill.validate();\r\n\t\t\t\t\tpath += range.axisFill.fillPath;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.mainContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\treturn $path.rectToPath({\r\n\t\t\tx: 0,\r\n\t\t\ty: 0,\r\n\t\t\twidth: this.xAxis.axisLength,\r\n\t\t\theight: this.yAxis.axisLength\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns axis data field to use.\r\n\t *\r\n\t * @param axis  Axis\r\n\t * @return Field name\r\n\t */\r\n\tpublic getAxisField(axis: Axis): string {\r\n\t\tif (axis == this.xAxis) {\r\n\t\t\treturn this.xField;\r\n\t\t}\r\n\t\tif (axis == this.yAxis) {\r\n\t\t\treturn this.yField;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\r\n\t\t// this helps date axis to check which baseInterval we should use\r\n\t\tthis.xAxis.updateAxisBySeries();\r\n\t\tthis.yAxis.updateAxisBySeries();\r\n\r\n\t\tsuper.validateDataItems();\r\n\r\n\t\tthis.xAxis.postProcessSeriesDataItems();\r\n\t\tthis.yAxis.postProcessSeriesDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data range.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataRange() {\r\n\t\tif (this.xAxis.dataRangeInvalid) {\r\n\t\t\tthis.xAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.dataRangeInvalid) {\r\n\t\t\tthis.yAxis.validateDataRange();\r\n\t\t}\r\n\r\n\t\tsuper.validateDataRange();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif (this.xAxis.invalid) {\r\n\t\t\tthis.xAxis.validate();\r\n\t\t}\r\n\r\n\t\tif (this.yAxis.invalid) {\r\n\t\t\tthis.yAxis.validate();\r\n\t\t}\r\n\r\n\t\tthis.y = this.yAxis.pixelY;\r\n\t\tthis.x = this.xAxis.pixelX;\r\n\r\n\r\n\t\tthis._showBullets = true;\r\n\t\tlet minBulletDistance: number = this.minBulletDistance;\r\n\t\tif ($type.isNumber(minBulletDistance)) {\r\n\t\t\tif (this.baseAxis.axisLength / (this.endIndex - this.startIndex) < minBulletDistance) {\r\n\t\t\t\tthis._showBullets = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * X axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._xAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._xAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._xAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._xAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.xAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no X axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xAxis = axis;\r\n\t\t\t}\r\n\t\t\treturn this._xAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Y axis the series is attached to.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tlet oldAxis = this._yAxis.get();\r\n\t\tif (oldAxis != axis) {\r\n\t\t\tif (oldAxis) {\r\n\t\t\t\tthis.dataItemsByAxis.removeKey(oldAxis.uid);\r\n\t\t\t\t// TODO why is this here ?\r\n\t\t\t\tthis._yAxis.dispose();\r\n\t\t\t\t// temp @todo: why it is not disposed?\r\n\t\t\t\toldAxis.series.removeValue(this);\r\n\t\t\t}\r\n\r\n\t\t\tthis._yAxis.set(axis, axis.registerSeries(this));\r\n\r\n\t\t\tthis.dataItemsByAxis.setKey(axis.uid, new Dictionary<string, this[\"_dataItem\"]>());\r\n\t\t\tthis.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\tif (this.chart) {\r\n\t\t\tif (!this._yAxis.get()) {\r\n\t\t\t\tconst axis = this.chart.yAxes.getIndex(0);\r\n\r\n\t\t\t\tif (!axis) {\r\n\t\t\t\t\tthrow Error(\"There are no Y axes on chart.\");\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.yAxis = axis;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._yAxis.get();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * The main (base) axis.\r\n\t *\r\n\t * This is the axis that series fills will go to, or grow animations will\r\n\t * happen from.\r\n\t *\r\n\t * @param value  Axis\r\n\t */\r\n\tpublic set baseAxis(value: Axis) {\r\n\t\tif (this._baseAxis != value) {\r\n\t\t\tthis._baseAxis = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get baseAxis(): Axis {\r\n\t\tif (!this._baseAxis) {\r\n\t\t\tif (this.yAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof DateAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.yAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.yAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.xAxis instanceof CategoryAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\r\n\t\t\tif (!this._baseAxis) {\r\n\t\t\t\tthis._baseAxis = this.xAxis;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this._baseAxis;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes values after data items' were added.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItems  Data items\r\n\t */\r\n\tpublic processValues(working: boolean): void {\r\n\r\n\t\tsuper.processValues(working);\r\n\r\n\t\tlet dataItems = this.dataItems;\r\n\r\n\t\tlet minX = Infinity;\r\n\t\tlet maxX = - Infinity;\r\n\r\n\t\tlet minY = Infinity;\r\n\t\tlet maxY = - Infinity;\r\n\r\n\t\tlet startIndex = this.startIndex;\r\n\t\tlet endIndex = this.endIndex;\r\n\r\n\t\tif (!working) {\r\n\t\t\tstartIndex = 0;\r\n\t\t\tendIndex = this.dataItems.length;\r\n\t\t}\r\n\r\n\t\tfor (let i = startIndex; i < endIndex; i++) {\r\n\t\t\tlet dataItem = dataItems.getIndex(i);\r\n\r\n\t\t\tthis.getStackValue(dataItem, working);\r\n\r\n\t\t\tlet stackX = dataItem.getValue(\"valueX\", \"stack\");\r\n\t\t\tlet stackY = dataItem.getValue(\"valueY\", \"stack\");\r\n\r\n\t\t\tminX = $math.min(dataItem.getMin(this._xValueFields, working, stackX), minX);\r\n\t\t\tminY = $math.min(dataItem.getMin(this._yValueFields, working, stackY), minY);\r\n\r\n\t\t\tmaxX = $math.max(dataItem.getMax(this._xValueFields, working, stackX), maxX);\r\n\t\t\tmaxY = $math.max(dataItem.getMax(this._yValueFields, working, stackY), maxY);\r\n\r\n\t\t\t// if it's stacked, pay attention to stack value\r\n\t\t\tif (this.stacked) {\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (stackY < minY) {\r\n\t\t\t\t\t\tminY = stackY\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackY > maxY) {\r\n\t\t\t\t\t\tmaxY = stackY;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (stackX < minX) {\r\n\t\t\t\t\t\tminX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (stackX > maxX) {\r\n\t\t\t\t\t\tmaxX = stackX;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// this is mainly for value axis to calculate total and perecent.total of each series category\r\n\t\tthis.xAxis.processSeriesDataItems();\r\n\t\tthis.yAxis.processSeriesDataItems();\r\n\r\n\t\tlet xAxisId: string = this.xAxis.uid;\r\n\t\tlet yAxisId: string = this.yAxis.uid;\r\n\r\n\t\tif (!working) {\r\n\t\t\tif (this._tmin.getKey(xAxisId) != minX || this._tmax.getKey(xAxisId) != maxX || this._tmin.getKey(yAxisId) != minY || this._tmax.getKey(yAxisId) != maxY) {\r\n\t\t\t\tthis._tmin.setKey(xAxisId, minX);\r\n\t\t\t\tthis._tmax.setKey(xAxisId, maxX);\r\n\t\t\t\tthis._tmin.setKey(yAxisId, minY);\r\n\t\t\t\tthis._tmax.setKey(yAxisId, maxY);\r\n\r\n\t\t\t\tlet stackedSeries = this.stackedSeries;\r\n\t\t\t\tif (stackedSeries) {\r\n\t\t\t\t\tif (stackedSeries.isDisposed()) {\r\n\t\t\t\t\t\tthis.stackedSeries = undefined;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tstackedSeries.processValues(false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.dispatchImmediately(\"extremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this._smin.getKey(xAxisId) != minX || this._smax.getKey(xAxisId) != maxX || this._smin.getKey(yAxisId) != minY || this._smax.getKey(yAxisId) != maxY) {\r\n\t\t\tthis._smin.setKey(xAxisId, minX);\r\n\t\t\tthis._smax.setKey(xAxisId, maxX);\r\n\t\t\tthis._smin.setKey(yAxisId, minY);\r\n\t\t\tthis._smax.setKey(yAxisId, maxY);\r\n\r\n\t\t\tif (this.appeared || this.start != 0 || this.end != 1) {\r\n\t\t\t\tthis.dispatchImmediately(\"selectionextremeschanged\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!working && this.stacked) {\r\n\t\t\tthis.processValues(true);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides element's [[Tooltip]].\r\n\t *\r\n\t * @see {@link Tooltip}\r\n\t */\r\n\tpublic hideTooltip() {\r\n\t\tsuper.hideTooltip();\r\n\t\tthis.returnBulletDefaultState();\r\n\t\tthis._prevTooltipDataItem = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific position.\r\n\t *\r\n\t * @param xPosition  X\r\n\t * @param yPosition  Y\r\n\t */\r\n\tpublic showTooltipAtPosition(xPosition: number, yPosition: number): IPoint {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"];\r\n\r\n\t\tif (this.visible && !this.isHiding && !this.isShowing) {\r\n\r\n\t\t\tlet xAxis: Axis = this._xAxis.get();\r\n\t\t\tlet yAxis: Axis = this._yAxis.get();\r\n\r\n\t\t\tif (xAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>xAxis.getSeriesDataItem(this, xAxis.toAxisPosition(xPosition), this.snapTooltip);\r\n\t\t\t}\r\n\t\t\tif (yAxis == this.baseAxis) {\r\n\t\t\t\tdataItem = <this[\"_dataItem\"]>yAxis.getSeriesDataItem(this, yAxis.toAxisPosition(yPosition), this.snapTooltip);\r\n\t\t\t}\r\n\r\n\t\t\tlet point = this.showTooltipAtDataItem(dataItem);\r\n\r\n\t\t\tif (point) {\r\n\t\t\t\treturn point;\r\n\t\t\t}\r\n\r\n\t\t\t// so that if tooltip is shown on columns or bullets for it not to be hidden\r\n\t\t\tif (!this.tooltipText) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.hideTooltip();\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string) {\r\n\t\treturn dataItem.locations[field];\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string) {\r\n\t\treturn dataItem.locations[field];\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows series tooltip at specific dataItem.\r\n\t *\r\n\t * @param dataItem\r\n\t */\r\n\tpublic showTooltipAtDataItem(dataItem: this[\"_dataItem\"]): IPoint {\r\n\t\tthis.returnBulletDefaultState(dataItem);\r\n\t\tif (dataItem && dataItem.visible) {\r\n\t\t\tthis.updateLegendValue(dataItem);\r\n\t\t\tif (this.cursorTooltipEnabled) {\r\n\t\t\t\tthis.tooltipDataItem = dataItem;\r\n\r\n\t\t\t\t// todo: add tooltipXField and tooltipYField.\r\n\t\t\t\tlet tooltipXField = this.tooltipXField;\r\n\t\t\t\tlet tooltipYField = this.tooltipYField;\r\n\r\n\t\t\t\tif ($type.hasValue((<any>dataItem)[tooltipXField]) && $type.hasValue((<any>dataItem)[tooltipYField])) {\r\n\r\n\t\t\t\t\tlet tooltipPoint = this.getPoint(dataItem, tooltipXField, tooltipYField, this.getAdjustedXLocation(dataItem, tooltipXField), this.getAdjustedYLocation(dataItem, tooltipYField));\r\n\r\n\t\t\t\t\tif (tooltipPoint) {\r\n\r\n\t\t\t\t\t\tthis.tooltipX = tooltipPoint.x;\r\n\t\t\t\t\t\tthis.tooltipY = tooltipPoint.y;\r\n\r\n\t\t\t\t\t\tif (this._prevTooltipDataItem != dataItem) {\r\n\t\t\t\t\t\t\tthis.dispatchImmediately(\"tooltipshownat\", {\r\n\t\t\t\t\t\t\t\ttype: \"tooltipshownat\",\r\n\t\t\t\t\t\t\t\ttarget: this,\r\n\t\t\t\t\t\t\t\tdataItem: dataItem\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tthis._prevTooltipDataItem = dataItem;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.cursorHoverEnabled) {\r\n\t\t\t\t\t\t\tfor (let sprite of dataItem.sprites) {\r\n\t\t\t\t\t\t\t\tif (!sprite.parent.visible || sprite.isHidden || sprite.__disabled || sprite.disabled || sprite.isHiding) {\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tsprite.isHover = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.showTooltip()) {\r\n\t\t\t\t\t\t\treturn $utils.spritePointToSvg({ x: tooltipPoint.x, y: tooltipPoint.y }, this);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLegendValue(dataItem, true);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * returns default state to bullets when tooltip is shown at some other data item or hidden\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected returnBulletDefaultState(dataItem?: XYSeriesDataItem) {\r\n\t\tif (this._prevTooltipDataItem && this._prevTooltipDataItem != dataItem) {\r\n\t\t\tfor (let sprite of this._prevTooltipDataItem.sprites) {\r\n\t\t\t\tif (!sprite.isDisposed()) {\r\n\t\t\t\t\tsprite.isHover = false;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._prevTooltipDataItem = undefined;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected shouldCreateBullet(dataItem: this[\"_dataItem\"], bulletTemplate: Bullet): boolean {\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bulletTemplate.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bulletTemplate.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (bulletTemplate.disabled) {\r\n\t\t\tlet disabledField = bulletTemplate.propertyFields.disabled;\r\n\t\t\tlet dataContext = <any>dataItem.dataContext;\r\n\t\t\tif (dataContext && dataContext[disabledField] === false) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/*\r\n\t\tpublic positionBullet(bullet: Bullet) {\r\n\t\t\tsuper.positionBullet(bullet);\r\n\t\r\n\t\t\tlet dataItem:XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\t\r\n\t\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\t\tlet xField: string = bullet.xField;\r\n\t\t\tif (!$type.hasValue(xField)) {\r\n\t\t\t\txField = this.xField;\r\n\t\t\t}\r\n\t\r\n\t\t\tlet yField: string = bullet.yField;\r\n\t\t\tif (!$type.hasValue(yField)) {\r\n\t\t\t\tyField = this.yField;\r\n\t\t\t}\r\n\t\r\n\t\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\t\r\n\t\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tlet xOpenField = this.xOpenField;\r\n\t\t\t\t\tlet yOpenField = this.yOpenField;\r\n\t\r\n\t\t\t\t\tlet xAxis = this.xAxis;\r\n\t\t\t\t\tlet yAxis = this.yAxis;\r\n\t\t\t\t\tlet positionX:number;\r\n\t\t\t\t\tlet positionY:number;\r\n\t\t\t\r\n\t\t\t\t\tif((xAxis instanceof DateAxis && (xOpenField && xOpenField != xField)) || xAxis instanceof ValueAxis){\r\n\t\r\n\t\t\t\t\t\tif(!$type.isNumber(bulletLocationX)){\r\n\t\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(xField);\r\n\t\r\n\t\t\t\t\t\tif(!xOpenField){\r\n\t\t\t\t\t\t\topenValue = xAxis.min;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\t\r\n\t\t\t\t\t\tpositionX = xAxis.valueToPosition(middleValue);\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(xAxis instanceof CategoryAxis){\r\n\t\t\t\t\t\tpositionX = xAxis.categoryToPosition((<any>dataItem)[xField], bulletLocationX);\r\n\t\t\t\t\t}\t\r\n\t\r\n\t\t\t\t\tif((yAxis instanceof DateAxis &&  (yOpenField && yOpenField != yField)) || yAxis instanceof ValueAxis){\r\n\t\r\n\t\t\t\t\t\tif(!$type.isNumber(bulletLocationY)){\r\n\t\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\r\n\t\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(yField);\r\n\t\r\n\t\t\t\t\t\tif(!yOpenField){\r\n\t\t\t\t\t\t\topenValue = yAxis.min;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\t\r\n\t\t\t\t\t\tpositionY = yAxis.valueToPosition(middleValue);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\telse if(yAxis instanceof CategoryAxis){\r\n\t\t\t\t\t\tpositionY = yAxis.categoryToPosition((<any>dataItem)[yField], bulletLocationY);\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tbullet.visible = true;\r\n\t\r\n\t\t\t\t\tthis.positionBulletReal(bullet, positionX, positionY);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbullet.visible = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n\t\r\n\t\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\t\tbullet.x = this.xAxis.renderer.positionToPoint(positionX).x;\r\n\t\t\tbullet.y = this.yAxis.renderer.positionToPoint(positionY).y;\r\n\t\t}\r\n\t*/\r\n\r\n\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet) {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: XYSeriesDataItem = <XYSeriesDataItem>bullet.dataItem;\r\n\r\n\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\tlet xField: string = bullet.xField;\r\n\t\tif (!$type.hasValue(xField)) {\r\n\t\t\txField = this.xField;\r\n\t\t}\r\n\r\n\t\tlet yField: string = bullet.yField;\r\n\t\tif (!$type.hasValue(yField)) {\r\n\t\t\tyField = this.yField;\r\n\t\t}\r\n\r\n\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\tbullet.visible = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\r\n\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\tif (point) {\r\n\t\t\t\tlet x: number = point.x;\r\n\t\t\t\tlet y: number = point.y;\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationX) && this.xOpenField != this.xField) {\r\n\t\t\t\t\tlet openX: number = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\t\tx = x - (x - openX) * bullet.locationX;\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tif ($type.isNumber(bullet.locationY) && this.yOpenField != this.yField) {\r\n\t\t\t\t\tlet openY: number = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\t\ty = y - (y - openY) * bullet.locationY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbullet.moveTo({ x: x, y: y });\r\n\r\n\t\t\t\tbullet.visible = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationX;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tlet bulletLocation: number = bullet.locationY;\r\n\t\tlet dataItem = bullet.dataItem;\r\n\t\tif (!$type.isNumber(bulletLocation)) {\r\n\t\t\tbulletLocation = dataItem.workingLocations[field];\r\n\t\t}\r\n\t\treturn bulletLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Can items from this series be included into stacks?\r\n\t * \r\n\t * Note: proper stacking is only possible if series have the same number\r\n\t * of data items. To ensure this, don't set data directly on series\r\n\t * but do this on chart instead.\r\n\t *\r\n\t * @default false\r\n\t * @param stacked  Can be stacked?\r\n\t */\r\n\tpublic set stacked(stacked: boolean) {\r\n\t\tthis.setPropertyValue(\"stacked\", stacked, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Can be stacked?\r\n\t */\r\n\tpublic get stacked(): boolean {\r\n\t\treturn this.getPropertyValue(\"stacked\");\r\n\t}\r\n\r\n\t/**\r\n\t * Should the nearest tooltip be shown if no data item is found on the\r\n\t * current cursor position? In order this to work, you should set snapTooltip = false on the series baseAxis.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Should snap?\r\n\t */\r\n\tpublic set snapTooltip(value: boolean) {\r\n\t\tthis.setPropertyValue(\"snapTooltip\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Should snap?\r\n\t */\r\n\tpublic get snapTooltip(): boolean {\r\n\t\treturn this.getPropertyValue(\"snapTooltip\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tif (this.xAxis instanceof ValueAxis && this.xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t}\r\n\r\n\t\tif (this.yAxis instanceof ValueAxis && this.yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t}\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\t\tlet delay: number = 0;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet anim: Animation;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tanim = dataItem.show(interpolationDuration, delay, fields);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet fields: string[];\r\n\t\tlet value: number;\r\n\t\tlet xAxis: Axis = this.xAxis;\r\n\r\n\t\tif (xAxis instanceof ValueAxis && xAxis != this.baseAxis) {\r\n\t\t\tfields = this._xValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (xAxis.minZoomed < xAxis.baseValue && xAxis.maxZoomed > xAxis.baseValue) || this.stackedSeries) {\r\n\t\t\t\tvalue = xAxis.baseValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = xAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet yAxis: Axis = this.yAxis;\r\n\t\tif (yAxis instanceof ValueAxis && yAxis != this.baseAxis) {\r\n\t\t\tfields = this._yValueFields;\r\n\t\t\t// animate to zero if 0 is within zoomMin/zoomMax\r\n\t\t\tif (this.stacked || (yAxis.minZoomed < yAxis.baseValue && yAxis.maxZoomed > yAxis.baseValue) || this.stackedSeries) {\r\n\t\t\t\tvalue = yAxis.baseValue;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tvalue = yAxis.min;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//if ($type.hasValue(fields)) {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet anim: Animation;\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (interpolationDuration == 0) {\r\n\t\t\t\tdataItem.hide(0, 0, value, fields);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.sequencedInterpolation && interpolationDuration > 0) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t\t}\r\n\t\t\t\tanim = dataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet animation = super.hide(interpolationDuration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\tif (anim && !anim.isFinished()) {\r\n\t\t\tanimation = anim;\r\n\t\t}\r\n\r\n\t\t// helps to avoid flicker. otherwise columns will show up at full size and only on next frame will animate from 0\r\n\t\tthis.validateDataElements();\r\n\t\t//}\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\r\n\t\t// to calculate stack values\r\n\t\tlet axisSeries: List<XYSeries> = <List<XYSeries>>this.baseAxis.series;\r\n\r\n\t\t$iter.each(axisSeries.iterator(), (series) => {\r\n\t\t\tif (series.stacked) {\r\n\t\t\t\tseries.invalidateProcessedData();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [getStackValue description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic getStackValue(dataItem: this[\"_dataItem\"], working?: boolean): void {\r\n\t\t// todo: here wer stack x and y values only. question is - what should we do with other values, like openX, openY?\r\n\t\t// if this series is not stacked or new stack begins, return.\r\n\r\n\t\tif (!this.stacked) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it might seem that it's better to go through base axis series, but we do not maintain the same order as in chart.series there.\r\n\t\t\tlet chart: XYChart = this.chart;\r\n\t\t\tlet index: number = chart.series.indexOf(this);\r\n\r\n\t\t\tlet field: string;\r\n\r\n\t\t\tif (this.xAxis != this.baseAxis && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.xField;\r\n\t\t\t}\r\n\t\t\tif (this.yAxis != this.baseAxis && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tfield = this.yField;\r\n\t\t\t}\r\n\r\n\t\t\tif (!field) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//this is good for removing series, otherwise stack values will remain the same and chart won't pay atention when adding/removing series\t\t\t\r\n\t\t\tdataItem.setCalculatedValue(field, 0, \"stack\");\r\n\r\n\t\t\t$iter.eachContinue(chart.series.range(0, index).backwards().iterator(), (prevSeries) => {\r\n\t\t\t\t// stacking is only possible if both axes are the same\r\n\t\t\t\tif (prevSeries.xAxis == this.xAxis && prevSeries.yAxis == this.yAxis) {\r\n\t\t\t\t\t// saving value\r\n\t\t\t\t\tprevSeries.stackedSeries = this;\r\n\r\n\t\t\t\t\tlet prevDataItem = prevSeries.dataItems.getIndex(dataItem.index); // indexes should match\r\n\r\n\t\t\t\t\tif (prevDataItem && prevDataItem.hasValue(this._xValueFields) && prevDataItem.hasValue(this._yValueFields)) {\r\n\r\n\t\t\t\t\t\tlet value = dataItem.getValue(field);\r\n\t\t\t\t\t\tlet prevValue: number;\r\n\t\t\t\t\t\tlet prevRealValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\r\n\t\t\t\t\t\tif (working) {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getWorkingValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tprevValue = prevDataItem.getValue(field) + prevDataItem.getValue(field, \"stack\");\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif ((value >= 0 && prevRealValue >= 0) || (value < 0 && prevRealValue < 0)) {\r\n\t\t\t\t\t\t\t//dataItem.events.disable();\r\n\t\t\t\t\t\t\tdataItem.setCalculatedValue(field, prevValue, \"stack\");\r\n\t\t\t\t\t\t\t//dataItem.events.enable();\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (!prevSeries.stacked) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [xField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xField(): string {\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yField(): string {\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * [xOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get xOpenField(): string {\r\n\t\treturn this._xOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [yOpenField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get yOpenField(): string {\r\n\t\treturn this._yOpenField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipXField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipXField(value: string) {\r\n\t\tthis._tooltipXField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipXField(): string {\r\n\t\tif (this._tooltipXField) {\r\n\t\t\treturn this._tooltipXField;\r\n\t\t}\r\n\t\treturn this._xField;\r\n\t}\r\n\r\n\t/**\r\n\t * [tooltipYField description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set tooltipYField(value: string) {\r\n\t\tthis._tooltipYField = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @return [description]\r\n\t */\r\n\tpublic get tooltipYField(): string {\r\n\t\tif (this._tooltipYField) {\r\n\t\t\treturn this._tooltipYField;\r\n\t\t}\r\n\t\treturn this._yField;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic min(axis: ValueAxis): number {\r\n\t\treturn this._tmin.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic max(axis: ValueAxis): number {\r\n\t\treturn this._tmax.getKey(axis.uid);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns lowest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMin(axis: ValueAxis): number {\r\n\t\tlet value = this._smin.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.min(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns highest value in the series for the specific axis within current\r\n\t * selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t * @return value\r\n\t */\r\n\tpublic selectionMax(axis: ValueAxis): number {\r\n\t\tlet value = this._smax.getKey(axis.uid);\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.max(axis);\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up base axes\r\n\t\t\tif ($type.hasValue(config.baseAxis) && $type.isString(config.baseAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.baseAxis)) {\r\n\t\t\t\t\tconfig.baseAxis = this.map.getKey(config.baseAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.baseAxis + \"\\\" found for `baseAxis`.\");\r\n\t\t\t\t\tdelete config.baseAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`.\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYSeries (\" + (this.name || \"unnamed\") + \")] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`.\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axis ranges\r\n\t\t\tif ($type.hasValue(config.axisRanges) && $type.isArray(config.axisRanges)) {\r\n\t\t\t\tfor (let i = 0, len = config.axisRanges.length; i < len; i++) {\r\n\t\t\t\t\tlet range = config.axisRanges[i];\r\n\t\t\t\t\tif (!$type.hasValue(range.type)) {\r\n\t\t\t\t\t\trange.type = \"AxisDataItem\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ($type.hasValue(range.axis) && $type.isString(range.axis) && this.map.hasKey(range.axis)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.axis);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(range.component) && $type.isString(range.component) && this.map.hasKey(range.component)) {\r\n\t\t\t\t\t\trange.component = this.map.getKey(range.component);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Parse date fields based on the series fields\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tthis.processingErrors.push(\"`dataFields` is not set for series [\" + (this.name || \"unnamed\") + \"]\");\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: XYSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string): IPoint {\r\n\t\tlet x: number = this.xAxis.getX(dataItem, xKey, locationX);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY);\r\n\r\n\t\tx = $math.fitToRange(x, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty = $math.fitToRange(y, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\treturn { x: x, y: y };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates item reader text based on the type and set up of axis.\r\n\t */\r\n\tprotected updateItemReaderText(): void {\r\n\t\tlet text = \"\"\r\n\t\t$object.each(this.dataFields, (key, val) => {\r\n\t\t\ttext += \"{\" + key + \"} \";\r\n\t\t});\r\n\t\tthis.itemReaderText = text;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should display a tooltip for chart's cursor.\r\n\t *\r\n\t * If set to `true` (default), the tooltips set for all series item's\r\n\t * elements like columns and bullets will be automatically shown\r\n\t * when [[XYCursor]] passes over category/date, even if its not hovered\r\n\t * directly over the item.\r\n\t *\r\n\t * Set this to `false` to disable such behavior and display item-specific\r\n\t * tooltips only when hovered directly over them\r\n\t *\r\n\t * @default true\r\n\t * @param value Display tooltip?\r\n\t */\r\n\tpublic set cursorTooltipEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorTooltipEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Display tooltip?\r\n\t */\r\n\tpublic get cursorTooltipEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorTooltipEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series should apply hover state on bullets/columns/etc when\r\n\t * cursor is over the data item.\r\n\t *\r\n\t * If set to `true` (default) and chart cursor is enabled on th chart,\r\n\t * hovering over date/category will trigger hover states on related Series\r\n\t * items like bullets and columns.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.2.2\r\n\t * @param  value  Hover enabled?\r\n\t */\r\n\tpublic set cursorHoverEnabled(value: boolean) {\r\n\t\tthis.setPropertyValue(\"cursorHoverEnabled\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hover enabled?\r\n\t */\r\n\tpublic get cursorHoverEnabled(): boolean {\r\n\t\treturn this.getPropertyValue(\"cursorHoverEnabled\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if series' values should be excluded when calculating totals.\r\n\t * \r\n\t * @default false\r\n\t * @since 4.4.9\r\n\t * @param  value  Exclude from totals?\r\n\t */\r\n\tpublic set excludeFromTotal(value: boolean) {\r\n\t\tthis.setPropertyValue(\"excludeFromTotal\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Exclude from totals?\r\n\t */\r\n\tpublic get excludeFromTotal(): boolean {\r\n\t\treturn this.getPropertyValue(\"excludeFromTotal\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYSeries\"] = XYSeries;\r\nregistry.registeredClasses[\"XYSeriesDataItem\"] = XYSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/XYSeries.ts","/**\r\n * A module with functionality for buildin a scrollbar with an XY graph in it.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Scrollbar, IScrollbarProperties, IScrollbarAdapters, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { DesaturateFilter } from \"../../core/rendering/filters/DesaturateFilter\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarProperties extends IScrollbarProperties { }\r\n\r\n/**\r\n * Defines events for [[XYChartScrollbar]].\r\n */\r\nexport interface IXYChartScrollbarEvents extends IScrollbarEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChartScrollbar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartScrollbarAdapters extends IScrollbarAdapters, IXYChartScrollbarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A special version of the Scrollbar that has an XY chart in it.\r\n *\r\n * Used mainly as an advanced scrollbar with a preview for other XY charts.\r\n *\r\n * However, can be used as standalone element.\r\n *\r\n * @see {@link IXYChartScrollbarEvents} for a list of available events\r\n * @see {@link IXYChartScrollbarAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class XYChartScrollbar extends Scrollbar {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartScrollbarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartScrollbarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartScrollbarEvents;\r\n\r\n\t/**\r\n\t * An [[XYSeries]] used to draw a graph on the Scrollbar.\r\n\t */\r\n\tprotected _series: List<XYSeries>;\r\n\r\n\t/**\r\n\t * A chart element Scrollbar is for.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart>();\r\n\r\n\t/**\r\n\t * A chart instance that shows mini-chart within Scrollbar.\r\n\t */\r\n\tprotected _scrollbarChart: XYChart;\r\n\r\n\t/**\r\n\t * [_unselectedOverlay description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _unselectedOverlay: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartScrollbar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tthis.padding(0, 0, 0, 0);\r\n\r\n\t\tlet scrollbarChart: XYChart = this.createChild(XYChart);\r\n\t\tscrollbarChart.shouldClone = false;\r\n\t\tscrollbarChart.margin(0, 0, 0, 0);\r\n\t\tscrollbarChart.padding(0, 0, 0, 0);\r\n\t\tscrollbarChart.interactionsEnabled = false;\r\n\r\n\t\tthis._scrollbarChart = scrollbarChart;\r\n\t\tthis._disposers.push(this._scrollbarChart);\r\n\r\n\t\tthis.minHeight = 60;\r\n\t\tthis.minWidth = 60;\r\n\r\n\t\tlet unselectedOverlay: Sprite = this.createChild(Sprite);\r\n\t\tunselectedOverlay.shouldClone = false;\r\n\t\tunselectedOverlay.setElement(this.paper.add(\"path\"));\r\n\t\tunselectedOverlay.fill = interfaceColors.getFor(\"background\");\r\n\t\tunselectedOverlay.fillOpacity = 0.8;\r\n\t\tunselectedOverlay.interactionsEnabled = false;\r\n\t\tunselectedOverlay.isMeasured = false;\r\n\t\tunselectedOverlay.toBack();\r\n\t\tthis._unselectedOverlay = unselectedOverlay;\r\n\t\tthis._disposers.push(this._unselectedOverlay);\r\n\r\n\t\tscrollbarChart.toBack();\r\n\r\n\t\tthis.background.cornerRadius(0, 0, 0, 0);\r\n\r\n\t\tlet thumbBackground = this.thumb.background;\r\n\t\tthumbBackground.cornerRadius(0, 0, 0, 0);\r\n\t\tthumbBackground.fillOpacity = 0;\r\n\t\tthumbBackground.fill = interfaceColors.getFor(\"background\");\r\n\r\n\t\tlet hoverState = thumbBackground.states.getKey(\"hover\");\r\n\t\tif (hoverState) {\r\n\t\t\thoverState.properties.fillOpacity = 0.2;\r\n\t\t}\r\n\r\n\t\tlet downState = thumbBackground.states.getKey(\"down\");\r\n\t\tif (downState) {\r\n\t\t\tdownState.properties.fillOpacity = 0.4;\r\n\t\t}\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A list of series that are used to draw graph(s) on the scrollbar.\r\n\t *\r\n\t * @readonly\r\n\t * @return Series\r\n\t */\r\n\tpublic get series(): List<XYSeries> {\r\n\t\tif (!this._series) {\r\n\t\t\tthis._series = new List<XYSeries>();\r\n\t\t\tthis._disposers.push(this._series.events.on(\"inserted\", this.handleSeriesAdded, this, false));\r\n\t\t\tthis._disposers.push(this._series.events.on(\"removed\", this.handleSeriesRemoved, this, false));\r\n\t\t}\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new series when they are pushed into a `series` list.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.newValue;\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\tscrollbarChart.zoomOutButton.disabled = true;\r\n\r\n\t\tthis.chart = sourceSeries.chart;\r\n\r\n\t\tlet addXAxis: boolean = true;\r\n\t\tlet addYAxis: boolean = true;\r\n\r\n\t\t// check if we haven't added clone of x or y axis before\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series != sourceSeries) {\r\n\t\t\t\tif (series.xAxis == sourceSeries.xAxis) {\r\n\t\t\t\t\taddXAxis = false;\r\n\t\t\t\t}\r\n\t\t\t\tif (series.yAxis == sourceSeries.yAxis) {\r\n\t\t\t\t\taddYAxis = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet series: XYSeries = <XYSeries>sourceSeries.clone();\r\n\r\n\t\tif (addXAxis) {\r\n\r\n\t\t\tlet xAxis = sourceSeries.xAxis.clone();\r\n\t\t\tscrollbarChart.xAxes.moveValue(xAxis);\r\n\t\t\txAxis.title.disabled = true;\r\n\t\t\txAxis.rangeChangeDuration = 0;\r\n\t\t\txAxis.id = sourceSeries.uid;\r\n\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.padding(0, 0, 0, 0);\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.margin(0, 0, 0, 0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\tlet vAxis = <DateAxis>xAxis;\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tvAxis.min = vAxis.clonedFrom.min;\r\n\t\t\t\t\tvAxis.max = vAxis.clonedFrom.max - 1;\r\n\t\t\t\t}, undefined, false))\r\n\t\t\t}\r\n\t\t\telse if (xAxis instanceof ValueAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>xAxis;\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tvAxis.min = vAxis.clonedFrom.min;\r\n\t\t\t\t\tvAxis.max = vAxis.clonedFrom.max;\r\n\t\t\t\t}, undefined, false))\r\n\t\t\t}\r\n\r\n\r\n\t\t\tseries.xAxis = xAxis;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scrollbarChart.xAxes.each((xAxis) => {\r\n\t\t\t\tif (xAxis.clonedFrom == sourceSeries.xAxis) {\r\n\t\t\t\t\tseries.xAxis = xAxis;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\r\n\t\tif (addYAxis) {\r\n\t\t\tlet yAxis: Axis = <Axis>sourceSeries.yAxis.clone();\r\n\t\t\tscrollbarChart.yAxes.moveValue(yAxis);\r\n\t\t\tyAxis.title.disabled = true;\r\n\t\t\tyAxis.rangeChangeDuration = 0;\r\n\r\n\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\trenderer.ticks.template.disabled = true;\r\n\t\t\trenderer.inside = true;\r\n\t\t\trenderer.labels.template.inside = true;\r\n\t\t\trenderer.line.strokeOpacity = 0;\r\n\t\t\trenderer.minLabelPosition = 0.02;\r\n\t\t\trenderer.maxLabelPosition = 0.98;\r\n\t\t\trenderer.line.disabled = true;\r\n\t\t\trenderer.axisFills.template.disabled = true;\r\n\t\t\trenderer.grid.template.stroke = interfaceColors.getFor(\"background\");\r\n\t\t\trenderer.baseGrid.disabled = true;\r\n\t\t\trenderer.grid.template.strokeOpacity = 0.05;\r\n\t\t\trenderer.minWidth = undefined;\r\n\t\t\trenderer.minHeight = undefined;\r\n\t\t\trenderer.chart = scrollbarChart;\r\n\t\t\trenderer.padding(0, 0, 0, 0);\r\n\t\t\trenderer.margin(0, 0, 0, 0);\r\n\r\n\t\t\tlet labelsTemplate = renderer.labels.template;\r\n\t\t\tlabelsTemplate.fillOpacity = 0.5;\r\n\r\n\t\t\tseries.yAxis = yAxis;\r\n\r\n\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>yAxis;\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tvAxis.min = vAxis.clonedFrom.min;\r\n\t\t\t\t\tvAxis.max = vAxis.clonedFrom.max - 1;\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\r\n\t\t\telse if (yAxis instanceof ValueAxis) {\r\n\t\t\t\tlet vAxis = <ValueAxis>yAxis;\r\n\t\t\t\tthis._disposers.push(vAxis.clonedFrom.events.on(\"extremeschanged\", () => {\r\n\t\t\t\t\tvAxis.min = vAxis.clonedFrom.min;\r\n\t\t\t\t\tvAxis.max = vAxis.clonedFrom.max;\r\n\t\t\t\t}))\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.scrollbarChart.yAxes.each((yAxis) => {\r\n\t\t\t\tif (yAxis.clonedFrom == sourceSeries.yAxis) {\r\n\t\t\t\t\tseries.yAxis = yAxis;\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tseries.rangeChangeDuration = 0;\r\n\t\tseries.interpolationDuration = 0;\r\n\t\tseries.defaultState.transitionDuration = 0;\r\n\t\tseries.showOnInit = false;\r\n\r\n\t\tthis._disposers.push(series.events.on(\"validated\", this.zoomOutAxes, this, false));\r\n\r\n\t\t// data might be set drectly on series\r\n\t\tthis._disposers.push(sourceSeries.events.on(\"datavalidated\", () => {\r\n\t\t\tif (series.data != sourceSeries.data) { // data setter doesn't check this\r\n\t\t\t\tseries.data = sourceSeries.data;\r\n\t\t\t}\r\n\t\t}, undefined, false));\r\n\t\tseries.defaultState.properties.visible = true;\r\n\r\n\t\tseries.filters.push(new DesaturateFilter());\r\n\t\tscrollbarChart.series.push(series);\r\n\r\n\t\tthis.updateByOrientation();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected updateByOrientation() {\r\n\t\tif (this._scrollbarChart) {\r\n\t\t\t$iter.each(this._scrollbarChart.xAxes.iterator(), (xAxis) => {\r\n\t\t\t\tlet renderer = xAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = xAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\r\n\t\t\t$iter.each(this._scrollbarChart.yAxes.iterator(), (yAxis) => {\r\n\t\t\t\tlet renderer = yAxis.renderer;\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\trenderer.grid.template.disabled = true;\r\n\t\t\t\t\trenderer.labels.template.disabled = true;\r\n\t\t\t\t\trenderer.minGridDistance = 10;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\trenderer.grid.template.disabled = false;\r\n\t\t\t\t\trenderer.labels.template.disabled = false;\r\n\t\t\t\t\trenderer.minGridDistance = yAxis.clonedFrom.renderer.minGridDistance;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Cleans up after series are removed from Scrollbar.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected handleSeriesRemoved(event: IListEvents<XYSeries>[\"removed\"]) {\r\n\t\tlet sourceSeries: XYSeries = event.oldValue;\r\n\t\tsourceSeries.events.off(\"validated\", this.zoomOutAxes, this);\r\n\t}\r\n\r\n\t/**\r\n\t * A chart element that is used to display graphs in the Scrollbar.\r\n\t *\r\n\t * This is not the same as `chart`. It's a totally independent instance of\r\n\t * [[XYChart]] with separate config, series, etc.\r\n\t *\r\n\t * It can be configured just like any other [[XYChart]].\r\n\t *\r\n\t * @readonly\r\n\t * @return Scrollbar's internal chart\r\n\t */\r\n\tpublic get scrollbarChart(): XYChart {\r\n\t\treturn this._scrollbarChart;\r\n\t}\r\n\r\n\t/**\r\n\t * A chart that Scrollbar belongs to.\r\n\t *\r\n\t * @param chart  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart) {\r\n\t\tif (this._chart.get() !== chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"datavalidated\", this.handleDataChanged, this, false));\r\n\t\t\tthis.handleDataChanged();\r\n\t\t\tthis._scrollbarChart.dataProvider = chart; // this makes scrollbar chart do not validate data untill charts' data is validated\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Scrollbar's internal chart's data when the main chart's data\r\n\t * changes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataChanged() {\r\n\t\t//@todo: what if raw data changed?\r\n\t\tif (this.chart.data != this.scrollbarChart.data) {\r\n\t\t\tthis.scrollbarChart.data = this.chart.data;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms out all axes on the internal chart.\r\n\t */\r\n\tprotected zoomOutAxes() {\r\n\t\tlet scrollbarChart: XYChart = this.scrollbarChart;\r\n\t\t$iter.each(scrollbarChart.xAxes.iterator(), (x) => {\r\n\t\t\tx.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t\t$iter.each(scrollbarChart.yAxes.iterator(), (y) => {\r\n\t\t\ty.zoom({ start: 0, end: 1 }, true, true);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates scrollbar thumb.\r\n\t */\r\n\tprotected updateThumb() {\r\n\t\tsuper.updateThumb();\r\n\t\tif (this._unselectedOverlay) {\r\n\t\t\tlet thumb = this.thumb;\r\n\t\t\tlet x: number = thumb.pixelX || 0;\r\n\t\t\tlet y: number = thumb.pixelY || 0;\r\n\t\t\tlet w: number = thumb.pixelWidth || 0;\r\n\t\t\tlet h: number = thumb.pixelHeight || 0;\r\n\r\n\t\t\tlet path: string = \"\";\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: -1,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: x,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: x + w,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: (this.pixelWidth || 0) - x - w,\r\n\t\t\t\t\theight: h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: y\r\n\t\t\t\t});\r\n\r\n\t\t\t\tpath += $path.rectToPath({\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: y + h,\r\n\t\t\t\t\twidth: w,\r\n\t\t\t\t\theight: (this.pixelHeight || 0) - y - h\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._unselectedOverlay.path = path;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tlet series = config.series[i];\r\n\t\t\t\t\tif ($type.hasValue(series) && $type.isString(series)) {\r\n\t\t\t\t\t\tif (this.map.hasKey(series)) {\r\n\t\t\t\t\t\t\tconfig.series[i] = this.map.getKey(series);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthrow Error(\"XYChartScrollbar error: Series with id `\" + series + \"` does not exist.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChartScrollbar\"] = XYChartScrollbar;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/XYChartScrollbar.ts","/**\r\n * XY Chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SerialChart, ISerialChartProperties, ISerialChartDataFields, ISerialChartAdapters, ISerialChartEvents, SerialChartDataItem } from \"./SerialChart\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { List, IListEvents } from \"../../core/utils/List\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { Optional } from \"../../core/utils/Type\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererX } from \"../axes/AxisRendererX\";\r\nimport { AxisRendererY } from \"../axes/AxisRendererY\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { Scrollbar, IScrollbarEvents } from \"../../core/elements/Scrollbar\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { XYCursor, IXYCursorEvents } from \"../cursors/XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IDisposer, Disposer } from \"../../core/utils/Disposer\";\r\nimport { Button } from \"../../core/elements/Button\";\r\nimport { ZoomOutButton } from \"../../core/elements/ZoomOutButton\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { XYChartScrollbar } from \"../elements/XYChartScrollbar\";\r\n\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\nimport { defaultRules, ResponsiveBreakpoints } from \"../../core/utils/Responsive\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChartDataItem extends SerialChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: XYChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart]].\r\n */\r\nexport interface IXYChartDataFields extends ISerialChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[XYChart]].\r\n */\r\nexport interface IXYChartProperties extends ISerialChartProperties {\r\n\r\n\t/**\r\n\t * A container that is used as a maske for bullets so that they can't\r\n\t * \"spill\" outside of the plot area.\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * Specifies what should chart do if when mouse wheel is rotated.\r\n\t *\r\n\t * @default \"none\"\r\n\t */\r\n\tmouseWheelBehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Specifies if chart should arrange series tooltips so that they won't\r\n\t * overlap.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tarrangeTooltips?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart]].\r\n */\r\nexport interface IXYChartEvents extends ISerialChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChartAdapters extends ISerialChartAdapters, IXYChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates an XY chart, and any derivative chart, like Serial, Date-based, etc.\r\n *\r\n * Basically this is a chart type, that is used to display any chart\r\n * information in a square plot area.\r\n *\r\n * The horizontal and vertical scale is determined by the type of Axis.\r\n *\r\n * The plot types are determined by type of Series.\r\n *\r\n * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * let categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * let series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"XYChart\");\r\n *\r\n * // Add Data\r\n * chart.data = [{\r\n * \"country\": \"USA\",\r\n * \"visits\": 3025\r\n * }, {\r\n * \t\"country\": \"China\",\r\n * \t\"visits\": 1882\r\n * }, {\r\n * \t\"country\": \"Japan\",\r\n * \t\"visits\": 1809\r\n * }];\r\n *\r\n * // Add category axis\r\n * var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());\r\n * categoryAxis.dataFields.category = \"country\";\r\n *\r\n * // Add value axis\r\n * var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n *\r\n * // Add series\r\n * var series = chart.series.push(new am4charts.ColumnSeries());\r\n * series.name = \"Web Traffic\";\r\n * series.dataFields.categoryX = \"country\";\r\n * series.dataFields.valueY = \"visits\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Category axis\r\n * \t\"xAxes\": [{\r\n * \t\t\"type\": \"CategoryAxis\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Value axis\r\n * \t\"yAxes\": [{\r\n * \t\t\"type\": \"ValueAxis\"\r\n * \t}],\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"ColumnSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"categoryX\": \"country\",\r\n * \t\t\t\"valueY\": \"visits\"\r\n * \t\t},\r\n * \t\t\"name\": \"Web Traffic\"\r\n * \t}],\r\n *\r\n * \t// Cursor\r\n * \t\"cursor\": {},\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"USA\",\r\n * \t\t\"visits\": 3025\r\n * \t}, {\r\n * \t\t\"country\": \"China\",\r\n * \t\t\"visits\": 1882\r\n * \t}, {\r\n * \t\t\"country\": \"Japan\",\r\n * \t\t\"visits\": 1809\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"XYChart\");\r\n * ```\r\n *\r\n *\r\n * @see {@link IXYChartEvents} for a list of available Events\r\n * @see {@link IXYChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart extends SerialChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: XYSeries;\r\n\r\n\t/**\r\n\t * A list of horizontal axes.\r\n\t */\r\n\tprotected _xAxes: List<Axis<this[\"_xAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A list of vertical axes.\r\n\t */\r\n\tprotected _yAxes: List<Axis<this[\"_yAxisRendererType\"]>>;\r\n\r\n\t/**\r\n\t * A container that holds vertical axes and plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic yAxesAndPlotContainer: Container\r\n\r\n\t/**\r\n\t * A container that holds top axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic topAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds bottom axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic bottomAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds left axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic leftAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds right axes.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic rightAxesContainer: Container;\r\n\r\n\t/**\r\n\t * A container for plot area.\r\n\t *\r\n\t * @type {Container}\r\n\t */\r\n\tpublic plotContainer: Container;\r\n\r\n\t/**\r\n\t * A reference to horizontal [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarX: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to vertical [[Scrollbar]].\r\n\t */\r\n\tprotected _scrollbarY: Scrollbar;\r\n\r\n\t/**\r\n\t * A reference to chart's cursor.\r\n\t */\r\n\tpublic _cursor: XYCursor;\r\n\r\n\t/**\r\n\t * A container that chart's cursor is placed in.\r\n\t */\r\n\tprotected _cursorContainer: Container;\r\n\r\n\t/**\r\n\t * Defines the type of horizontal axis rederer.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX = AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis rederer.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY = AxisRendererY;\r\n\r\n\t/**\r\n\t * Defines the type horizontal axis renderer.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererX;\r\n\r\n\t/**\r\n\t * Defines the type of vertical axis renderer.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererY;\r\n\r\n\t/**\r\n\t * A button which is used to zoom out the chart.\r\n\t */\r\n\tprotected _zoomOutButton: Button;\r\n\r\n\t/**\r\n\t * An element that is used as a mask to contain bullets from spilling out of\r\n\t * the plot area.\r\n\t */\r\n\tprotected _bulletMask: Sprite;\r\n\r\n\r\n\tprotected _panStartXRange: IRange;\r\n\r\n\tprotected _panStartYRange: IRange;\r\n\r\n\tprotected _panEndXRange: IRange;\r\n\r\n\tprotected _panEndYRange: IRange;\r\n\r\n\tprotected _mouseWheelDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Holds a reference to the container axis bullets are drawn in.\r\n\t */\r\n\tpublic axisBulletsContainer: Container;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic _seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"XYChart\";\r\n\r\n\t\t// Set defaults\r\n\t\t//this.margin(10, 10, 10, 10);\r\n\t\tthis.maskBullets = true;\r\n\t\tthis.arrangeTooltips = true;\r\n\r\n\t\t// Create main chart container\r\n\t\tlet chartContainer = this.chartContainer;\r\n\t\tchartContainer.layout = \"vertical\";\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Create top axes container\r\n\t\tlet topAxesCont = chartContainer.createChild(Container);\r\n\t\ttopAxesCont.shouldClone = false;\r\n\t\ttopAxesCont.layout = \"vertical\";\r\n\t\ttopAxesCont.width = percent(100);\r\n\t\ttopAxesCont.zIndex = 1;\r\n\t\tthis.topAxesContainer = topAxesCont;\r\n\r\n\t\t// Create vertical axes and plot area container\r\n\t\t// Plot area and vertical axes share the whole width of the chart,\r\n\t\t// so we need to put then into a separate container so that layouting\r\n\t\t// engine takes care of the positioning\r\n\t\tlet yAxesAndPlotCont = chartContainer.createChild(Container);\r\n\t\tyAxesAndPlotCont.shouldClone = false;\r\n\t\tyAxesAndPlotCont.layout = \"horizontal\";\r\n\t\tyAxesAndPlotCont.width = percent(100);\r\n\t\tyAxesAndPlotCont.height = percent(100);\r\n\t\tyAxesAndPlotCont.zIndex = 0;\r\n\t\tthis.yAxesAndPlotContainer = yAxesAndPlotCont;\r\n\r\n\t\t// Create a container for bottom axes\r\n\t\tlet bottomAxesCont = chartContainer.createChild(Container);\r\n\t\tbottomAxesCont.shouldClone = false;\r\n\t\tbottomAxesCont.width = percent(100);\r\n\t\tbottomAxesCont.layout = \"vertical\";\r\n\t\tbottomAxesCont.zIndex = 1;\r\n\t\tthis.bottomAxesContainer = bottomAxesCont;\r\n\r\n\t\t// Create a container for left-side axes\r\n\t\tlet leftAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tleftAxesCont.shouldClone = false;\r\n\t\tleftAxesCont.layout = \"horizontal\";\r\n\t\tleftAxesCont.height = percent(100);\r\n\t\tleftAxesCont.contentAlign = \"right\";\r\n\t\tleftAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tleftAxesCont.zIndex = 1;\r\n\t\tthis.leftAxesContainer = leftAxesCont;\r\n\r\n\t\t// Create a container for plot area\r\n\t\tlet plotCont = yAxesAndPlotCont.createChild(Container);\r\n\t\tplotCont.shouldClone = false;\r\n\t\tplotCont.height = percent(100);\r\n\t\tplotCont.width = percent(100);\r\n\t\t// Create transparend background for plot container so that hover works\r\n\t\t// on all of it\r\n\t\tplotCont.background.fillOpacity = 0;\r\n\t\tthis.plotContainer = plotCont;\r\n\r\n\t\t// must go below plot container\r\n\t\tthis.mouseWheelBehavior = \"none\";\r\n\r\n\t\tthis._cursorContainer = plotCont;\r\n\r\n\t\t// Create a container for right-side axes\r\n\t\tlet rightAxesCont = yAxesAndPlotCont.createChild(Container);\r\n\t\trightAxesCont.shouldClone = false;\r\n\t\trightAxesCont.layout = \"horizontal\";\r\n\t\trightAxesCont.height = percent(100);\r\n\t\trightAxesCont.zIndex = 1;\r\n\t\trightAxesCont.events.on(\"transformed\", this.updateXAxesMargins, this, false);\r\n\t\tthis.rightAxesContainer = rightAxesCont;\r\n\r\n\t\tthis.seriesContainer.parent = plotCont;\r\n\t\tthis.bulletsContainer.parent = plotCont;\r\n\r\n\t\tlet zoomOutButton = plotCont.createChild(ZoomOutButton);\r\n\t\tzoomOutButton.shouldClone = false;\r\n\t\tzoomOutButton.align = \"right\";\r\n\t\tzoomOutButton.valign = \"top\";\r\n\t\tzoomOutButton.zIndex = Number.MAX_SAFE_INTEGER;\r\n\t\tzoomOutButton.marginTop = 5;\r\n\t\tzoomOutButton.marginRight = 5;\r\n\r\n\t\tzoomOutButton.hide(0);\r\n\t\tthis.zoomOutButton = zoomOutButton;\r\n\r\n\t\t// Create a container for bullets\r\n\t\tlet axisBulletsContainer: Container = this.plotContainer.createChild(Container);\r\n\t\taxisBulletsContainer.shouldClone = false;\r\n\t\taxisBulletsContainer.width = percent(100);\r\n\t\taxisBulletsContainer.height = percent(100);\r\n\t\taxisBulletsContainer.isMeasured = false;\r\n\t\taxisBulletsContainer.zIndex = 4;\r\n\t\taxisBulletsContainer.layout = \"none\";\r\n\t\tthis.axisBulletsContainer = axisBulletsContainer;\r\n\r\n\t\tthis._bulletMask = this.plotContainer;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tthis.zoomOutButton.exportable = false;\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"X/Y chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tthis.seriesContainer.toFront();\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tif (this.maskBullets) {\r\n\t\t\tthis.bulletsContainer.mask = this._bulletMask;\r\n\t\t}\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a redrawing of all chart's series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updatePlotElements(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers data (re)validation which in turn can cause a redraw of the\r\n\t * whole chart or just aprticular series / elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\t// tell axes that data changed\r\n\t\tif (this._parseDataFrom == 0) {\r\n\t\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\t\taxis.dataChangeUpdate();\r\n\t\t\t});\r\n\r\n\t\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\t\tseries.dataChangeUpdate();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tsuper.validateData();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates margins for horizontal axes based on settings and available space.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateXAxesMargins(): void {\r\n\r\n\t\tlet leftAxesWidth = this.leftAxesContainer.measuredWidth;\r\n\t\tlet rightAxesWidth = this.rightAxesContainer.measuredWidth;\r\n\t\tlet bottomAxesCont = this.bottomAxesContainer;\r\n\r\n\t\tif (bottomAxesCont.paddingLeft != leftAxesWidth || bottomAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\tbottomAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\tbottomAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\r\n\t\tlet topAxesCont = this.topAxesContainer;\r\n\r\n\t\tif (topAxesCont.paddingLeft != leftAxesWidth || topAxesCont.paddingRight != rightAxesWidth) {\r\n\t\t\ttopAxesCont.paddingLeft = leftAxesWidth;\r\n\t\t\ttopAxesCont.paddingRight = rightAxesWidth;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers a re-initialization of this element.\r\n\t *\r\n\t * Will result in complete redrawing of the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic reinit(): void {\r\n\t\tsuper.reinit();\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\tseries.appeared = false;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the horizontal axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleXAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateXAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers an update on the vertical axis when one of its properties\r\n\t * change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event An event object\r\n\t */\r\n\tpublic handleYAxisChange(event: AMEvent<AxisRenderer, ISpriteEvents>[\"propertychanged\"]) {\r\n\t\tthis.updateYAxis(event.target);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new horizontal (X) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Axis insert event\r\n\t */\r\n\tpublic processXAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererX();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleXAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"X\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleXAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleXAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateXAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up a new vertical (Y) axis when it is added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Axis insert event\r\n\t */\r\n\tpublic processYAxis(event: IListEvents<Axis>[\"inserted\"]): void {\r\n\r\n\t\tlet axis: Axis = event.newValue;\r\n\t\taxis.chart = this;\r\n\t\tif (!axis.renderer) {\r\n\t\t\taxis.renderer = new this._axisRendererY();\r\n\t\t\taxis.renderer.observe([\"opposite\", \"inside\", \"inversed\", \"minGridDistance\"], this.handleYAxisChange, this, false);\r\n\t\t}\r\n\t\taxis.axisLetter = \"Y\";\r\n\r\n\t\taxis.events.on(\"startendchanged\", this.handleYAxisRangeChange, this, false);\r\n\t\t//axis.events.on(\"endchanged\", this.handleYAxisRangeChange, this, false);\r\n\r\n\t\t// Although axis does not use data directly, we set dataProvider here\r\n\t\t// (but not add to chart data users) to hold up rendering before data\r\n\t\t// is parsed (system handles this)\r\n\t\taxis.dataProvider = this;\r\n\r\n\t\tthis.updateYAxis(axis.renderer);\r\n\t\tthis.processAxis(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates horizontal (X) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.zoomAxes(this.xAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarX, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows or hides the Zoom Out button depending on whether the chart is fully\r\n\t * zoomed out or not.\r\n\t */\r\n\tprotected toggleZoomOutButton() {\r\n\t\tif (this.zoomOutButton) {\r\n\t\t\tlet show = false;\r\n\r\n\t\t\t$iter.eachContinue(this.xAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t\t\t$iter.eachContinue(this.yAxes.iterator(), (axis): boolean => {\r\n\t\t\t\tif ($math.round(axis.start, 3) != 0 || $math.round(axis.end, 3) != 1) {\r\n\t\t\t\t\tshow = true;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\r\n\t\t\tif (!this.seriesAppeared) {\r\n\t\t\t\tshow = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (show) {\r\n\t\t\t\tthis.zoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.zoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * moved this check to a separate method so that we could override it in TreeMapSeries\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\tlet appeared: boolean = false;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (!series.appeared) {\r\n\t\t\t\tappeared = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn appeared;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates vertical (Y) scrollbar and other horizontal axis whenever axis'\r\n\t * value range changes.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tlet range: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.zoomAxes(this.yAxes, range, true);\r\n\t\t}\r\n\t\tthis.toggleZoomOutButton();\r\n\t\tthis.updateScrollbar(this.scrollbarY, range);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a relative scrollbar whenever data range of the axis changes.\r\n\t *\r\n\t * @param scrollbar  Scrollbar instance\r\n\t * @param range      New data (values) range of the axis\r\n\t */\r\n\tprotected updateScrollbar(scrollbar: Scrollbar, range: IRange): void {\r\n\t\tif (scrollbar) {\r\n\t\t\tscrollbar.skipRangeEvents();\r\n\t\t\tscrollbar.start = range.start;\r\n\t\t\tscrollbar.end = range.end;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a common range of values between a list of axes.\r\n\t *\r\n\t * This is used to synchronize the zoom between multiple axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes  A list of axes\r\n\t * @return Common value range\r\n\t */\r\n\tpublic getCommonAxisRange(axes: List<Axis>): IRange {\r\n\t\tlet start: Optional<number>;\r\n\t\tlet end: Optional<number>;\r\n\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tlet axisStart = axis.start;\r\n\t\t\tlet axisEnd = axis.end;\r\n\r\n\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\taxisStart = 1 - axis.end;\r\n\t\t\t\taxisEnd = 1 - axis.start;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(start) || (axisStart < start)) {\r\n\t\t\t\tstart = axisStart;\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(end) || (axisEnd > end)) {\r\n\t\t\t\tend = axisEnd;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn { start: start, end: end };\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.topAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.bottomAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\tlet axis = renderer.axis;\r\n\t\tif (renderer.opposite) {\r\n\t\t\taxis.parent = this.rightAxesContainer;\r\n\t\t\taxis.toBack();\r\n\t\t}\r\n\t\telse {\r\n\t\t\taxis.parent = this.leftAxesContainer;\r\n\t\t\taxis.toFront();\r\n\t\t}\r\n\t\tif (axis.renderer) {\r\n\t\t\taxis.renderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates an Axis for use with this chart, e.g. sets proper renderer\r\n\t * and containers for placement.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\t// Value axis does not use data directly, only category axis does\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\tthis._dataUsers.moveValue(axis);\r\n\t\t}\r\n\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\r\n\t\trenderer.gridContainer.parent = this.plotContainer;\r\n\t\trenderer.gridContainer.toBack();\r\n\r\n\t\trenderer.breakContainer.parent = this.plotContainer;\r\n\t\trenderer.breakContainer.toFront();\r\n\t\trenderer.breakContainer.zIndex = 10;\r\n\r\n\t\taxis.addDisposer(new Disposer(() => {\r\n\t\t\tthis.dataUsers.removeValue(axis);\r\n\t\t}))\r\n\r\n\t\trenderer.bulletsContainer.parent = this.axisBulletsContainer;\r\n\r\n\t\tthis.plotContainer.events.on(\"maxsizechanged\", () => {\r\n\t\t\tif (this.inited) {\r\n\t\t\t\taxis.invalidateDataItems();\r\n\t\t\t\tthis.updateSeriesMasks();\r\n\t\t\t}\r\n\t\t}, axis, false);\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tlet mask = series.mainContainer.mask;\r\n\t\t\t\tseries.mainContainer.mask = undefined;\r\n\t\t\t\tseries.mainContainer.mask = mask;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of horizontal (X) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get xAxes(): List<Axis<this[\"_xAxisRendererType\"]>> {\r\n\t\tif (!this._xAxes) {\r\n\t\t\tthis._xAxes = new List<Axis<this[\"_xAxisRendererType\"]>>();\r\n\t\t\tthis._xAxes.events.on(\"inserted\", this.processXAxis, this, false);\r\n\t\t\tthis._xAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._xAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleAxisRemoval(event: IListEvents<Axis>[\"removed\"]) {\r\n\t\tlet axis = event.oldValue;\r\n\t\tthis.dataUsers.removeValue(axis); // need to remove, as it might not be disposed\r\n\t\tif (axis.autoDispose) {\r\n\t\t\taxis.dispose();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of vertical (Y) axes.\r\n\t *\r\n\t * @return List of axes\r\n\t */\r\n\tpublic get yAxes(): List<Axis<this[\"_yAxisRendererType\"]>> {\r\n\t\tif (!this._yAxes) {\r\n\t\t\tthis._yAxes = new List<Axis<this[\"_yAxisRendererType\"]>>();\r\n\t\t\tthis._yAxes.events.on(\"inserted\", this.processYAxis, this, false);\r\n\t\t\tthis._yAxes.events.on(\"removed\", this.handleAxisRemoval, this, false);\r\n\t\t}\r\n\r\n\t\treturn this._yAxes;\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a new [[XYSeries]] object with required parameters when it is\r\n\t * added to the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event  Event\r\n\t */\r\n\tpublic handleSeriesAdded(event: IListEvents<XYSeries>[\"inserted\"]): void {\r\n\t\ttry {\r\n\t\t\tsuper.handleSeriesAdded(event);\r\n\t\t\tlet series: XYSeries = event.newValue;\r\n\r\n\t\t\tif (this.xAxes.length == 0 || this.yAxes.length == 0) {\r\n\t\t\t\tregistry.removeFromInvalidComponents(series);\r\n\t\t\t\tseries.dataInvalid = false;\r\n\t\t\t}\r\n\r\n\t\t\t$utils.used(series.xAxis); // this is enough to get axis, handled in getter\r\n\t\t\t$utils.used(series.yAxis); // this is enough to get axis, handled in getter\r\n\r\n\t\t\tif (series.fill == undefined) {\r\n\t\t\t\tseries.fill = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (series.stroke == undefined) {\r\n\t\t\t\tseries.stroke = series.fill;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (e) {\r\n\t\t\tthis.raiseCriticalError(e);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chart's [[Cursor]].\r\n\t *\r\n\t * @param cursor  Cursor\r\n\t */\r\n\tpublic set cursor(cursor: this[\"_cursor\"]) {\r\n\t\tif (this._cursor != cursor) {\r\n\t\t\tif (this._cursor) {\r\n\t\t\t\tthis.removeDispose(this._cursor);\r\n\t\t\t}\r\n\r\n\t\t\tthis._cursor = cursor;\r\n\r\n\t\t\tif (cursor) {\r\n\t\t\t\t// TODO this is wrong, fix it\r\n\t\t\t\tthis._disposers.push(cursor);\r\n\t\t\t\tcursor.chart = this;\r\n\t\t\t\tcursor.shouldClone = false;\r\n\t\t\t\tcursor.parent = this._cursorContainer;\r\n\t\t\t\tcursor.events.on(\"cursorpositionchanged\", this.handleCursorPositionChange, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomstarted\", this.handleCursorZoomStart, this, false);\r\n\t\t\t\tcursor.events.on(\"zoomended\", this.handleCursorZoomEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"panstarted\", this.handleCursorPanStart, this, false);\r\n\t\t\t\tcursor.events.on(\"panning\", this.handleCursorPanning, this, false);\r\n\t\t\t\tcursor.events.on(\"panended\", this.handleCursorPanEnd, this, false);\r\n\t\t\t\tcursor.events.on(\"behaviorcanceled\", this.handleCursorCanceled, this, false);\r\n\t\t\t\tcursor.events.on(\"hidden\", this.handleHideCursor, this, false);\r\n\t\t\t\tcursor.zIndex = Number.MAX_SAFE_INTEGER - 1;\r\n\r\n\t\t\t\tif (this.tapToActivate) {\r\n\t\t\t\t\t// We need this in order to setup cursor properly\r\n\t\t\t\t\tthis.setTapToActivate(this.tapToActivate);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Cursor\r\n\t */\r\n\tpublic get cursor(): this[\"_cursor\"] {\r\n\t\treturn this._cursor;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs tasks when the cursor's position changes, e.g. shows proper\r\n\t * tooltips on axes and series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleCursorPositionChange(): void {\r\n\r\n\t\tlet cursor = this.cursor;\r\n\r\n\t\tif (cursor.visible && !cursor.isHiding) {\r\n\t\t\tlet xPosition: number = this.cursor.xPosition;\r\n\t\t\tlet yPosition: number = this.cursor.yPosition;\r\n\r\n\t\t\tthis.showSeriesTooltip({\r\n\t\t\t\tx: xPosition,\r\n\t\t\t\ty: yPosition\r\n\t\t\t});\r\n\r\n\t\t\tlet exceptAxis: Axis;\r\n\t\t\tlet snapToSeries = cursor.snapToSeries;\r\n\t\t\tif (snapToSeries) {\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.xAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.yAxis;\r\n\t\t\t\t}\r\n\t\t\t\tif (snapToSeries.baseAxis == snapToSeries.yAxis) {\r\n\t\t\t\t\texceptAxis = snapToSeries.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._seriesPoints = [];\r\n\t\t\tthis.showAxisTooltip(this.xAxes, xPosition, exceptAxis);\r\n\t\t\tthis.showAxisTooltip(this.yAxes, yPosition, exceptAxis);\r\n\t\t\tthis.sortSeriesTooltips(this._seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Hides all cursor-related tooltips when the cursor itself is hidden.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleHideCursor(): void {\r\n\t\tthis.hideObjectTooltip(this.xAxes);\r\n\t\tthis.hideObjectTooltip(this.yAxes);\r\n\t\tthis.hideObjectTooltip(this.series);\r\n\r\n\t\tthis.updateSeriesLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates values for each series' legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSeriesLegend(): void {\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.updateLegendValue();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Hides a tooltip for a list of objects.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param sprites  A list of sprites to hide tooltip for\r\n\t */\r\n\tpublic hideObjectTooltip(sprites: List<Sprite>): void {\r\n\t\t$iter.each(sprites.iterator(), (sprite) => {\r\n\t\t\tsprite.hideTooltip(0);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Shows a tooltip for all chart's series, using specific coordinates as a\r\n\t * reference point.\r\n\t *\r\n\t * The tooltip might be shown at different coordinates depending on the\r\n\t * actual data point's position, overlapping with other tooltips, etc.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Reference point\r\n\t */\r\n\tpublic showSeriesTooltip(position?: IPoint): void {\r\n\r\n\t\tif (!position) {\r\n\t\t\tthis.series.each((series) => {\r\n\t\t\t\tseries.hideTooltip();\r\n\t\t\t});\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet seriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\r\n\t\tthis.series.each((series) => {\r\n\t\t\t//if (series.tooltipText || series.tooltipHTML) { // not good, bullets are not hovered then\r\n\r\n\t\t\tif ((series.xAxis instanceof DateAxis && series.xAxis.snapTooltip) || (series.yAxis instanceof DateAxis && series.yAxis.snapTooltip)) {\r\n\t\t\t\t// void\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet point = series.showTooltipAtPosition(position.x, position.y);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tseries.tooltip.setBounds({ x: 0, y: 0, width: this.pixelWidth, height: this.pixelHeight });\r\n\t\t\t\t\tseriesPoints.push({ series: series, point: point });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t//}\r\n\t\t});\r\n\r\n\t\tif (this.arrangeTooltips) {\r\n\t\t\tthis.sortSeriesTooltips(seriesPoints);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic sortSeriesTooltips(seriesPoints: { point: IPoint, series: XYSeries }[]) {\r\n\r\n\t\tlet topLeft = $utils.spritePointToSvg({ x: -0.5, y: -0.5 }, this.plotContainer);\r\n\t\tlet bottomRight = $utils.spritePointToSvg({ x: this.plotContainer.pixelWidth + 0.5, y: this.plotContainer.pixelHeight + 0.5 }, this.plotContainer);\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet filteredSeriesPoints: { point: IPoint, series: XYSeries }[] = [];\r\n\t\t$array.each(seriesPoints, (seriesPoint) => {\r\n\t\t\tlet point = seriesPoint.point;\r\n\t\t\tif (point && $math.isInRectangle(point, { x: topLeft.x, y: topLeft.y, width: bottomRight.x - topLeft.x, height: bottomRight.y - topLeft.y })) {\r\n\t\t\t\tfilteredSeriesPoints.push({ point: point, series: seriesPoint.series });\r\n\t\t\t\tsum += point.y;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tseriesPoints = filteredSeriesPoints;\r\n\r\n\t\tseriesPoints.sort((a, b) => {\r\n\t\t\tif (a.point.y > b.point.y) {\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t\telse if (a.point.y < b.point.y) {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tlet averageY = sum / seriesPoints.length;\r\n\t\tlet maxY = $utils.svgPointToDocument({ x: 0, y: 0 }, this.svgContainer.SVGContainer).y;\r\n\r\n\t\tif (seriesPoints.length > 0) {\r\n\r\n\t\t\tlet top = topLeft.y;\r\n\t\t\tlet bottom = bottomRight.y;\r\n\r\n\t\t\t// TODO is this needed ?\r\n\t\t\t$utils.spritePointToDocument({ x: 0, y: top }, this);\r\n\r\n\t\t\tlet dropped = false;\r\n\r\n\t\t\tif (averageY > top + (bottom - top) / 2) {\r\n\t\t\t\tlet nextHeight = bottom;\r\n\t\t\t\tfor (let i = seriesPoints.length - 1; i >= 0; i--) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: -maxY, width: this.pixelWidth, height: nextHeight + maxY });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\t\t\t\t\tnextHeight = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY - tooltip.pixelY + pointY - tooltip.pixelMarginTop }, tooltip).y;\r\n\r\n\t\t\t\t\tif (nextHeight < -maxY) {\r\n\t\t\t\t\t\tdropped = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (averageY <= top + (bottom - top) / 2 || dropped) {\r\n\t\t\t\tlet nextY = top;\r\n\t\t\t\tfor (let i = 0, len = seriesPoints.length; i < len; i++) {\r\n\t\t\t\t\tlet series = seriesPoints[i].series;\r\n\t\t\t\t\tlet pointY = seriesPoints[i].point.y;\r\n\t\t\t\t\tlet tooltip = series.tooltip;\r\n\t\t\t\t\ttooltip.setBounds({ x: 0, y: nextY, width: this.pixelWidth, height: bottom });\r\n\r\n\t\t\t\t\tif (tooltip.invalid) {\r\n\t\t\t\t\t\ttooltip.validate();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttooltip.toBack();\r\n\r\n\t\t\t\t\tnextY = $utils.spritePointToSvg({ x: 0, y: tooltip.label.pixelY + tooltip.label.measuredHeight - tooltip.pixelY + pointY + tooltip.pixelMarginBottom }, tooltip).y;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows tooltips for a list of axes at specific position.\r\n\t *\r\n\t * Position might be X coordinate for horizontal axes, and Y coordinate for\r\n\t * vertical axes.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axes      List of axes to show tooltip on\r\n\t * @param position  Position (px)\r\n\t */\r\n\tpublic showAxisTooltip(axes: List<Axis>, position: number, except?: Axis): void {\r\n\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\tif (axis != except) {\r\n\t\t\t\tif (this.dataItems.length > 0 || axis.dataItems.length > 0) {\r\n\t\t\t\t\taxis.showTooltipAtPosition(position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Recalculates the value range for the axis taking into account zoom level & inversed.\r\n\t *\r\n\t * @param axis   Axis\r\n\t * @param range  Range\r\n\t * @return Modified range\r\n\t */\r\n\tpublic getUpdatedRange(axis: Axis<this[\"_xAxisRendererType\"]>, range: IRange): IRange {\r\n\r\n\t\tif (!axis) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet start: number;\r\n\t\tlet end: number;\r\n\t\tlet inversed = axis.renderer.inversed;\r\n\r\n\t\tif (axis.renderer instanceof AxisRendererY) {\r\n\t\t\trange = $math.invertRange(range);\r\n\t\t}\r\n\r\n\t\tif (inversed) {\r\n\t\t\t$math.invertRange(range);\r\n\r\n\t\t\tstart = 1 - axis.end;\r\n\t\t\tend = 1 - axis.start;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstart = axis.start;\r\n\t\t\tend = axis.end;\r\n\t\t}\r\n\r\n\t\tlet difference: number = end - start;\r\n\r\n\t\treturn {\r\n\t\t\tstart: start + range.start * difference,\r\n\t\t\tend: start + range.end * difference\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user finishes zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomEnd(event: IXYCursorEvents[\"zoomended\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tif (behavior == \"zoomX\" || behavior == \"zoomXY\") {\r\n\t\t\tlet xRange: IRange = cursor.xRange;\r\n\t\t\tif (xRange && this.xAxes.length > 0) {\r\n\t\t\t\txRange = this.getUpdatedRange(this.xAxes.getIndex(0), xRange);\r\n\t\t\t\txRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.xAxes, xRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (behavior == \"zoomY\" || behavior == \"zoomXY\") {\r\n\t\t\tlet yRange: IRange = cursor.yRange;\r\n\t\t\tif (yRange && this.yAxes.length > 0) {\r\n\t\t\t\tyRange = this.getUpdatedRange(this.yAxes.getIndex(0), yRange);\r\n\t\t\t\tyRange.priority = \"start\";\r\n\t\t\t\tthis.zoomAxes(this.yAxes, yRange);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanStart(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\tif (xAxis) {\r\n\t\t\tthis._panStartXRange = { start: xAxis.start, end: xAxis.end };\r\n\t\t}\r\n\r\n\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\tif (yAxis) {\r\n\t\t\tthis._panStartYRange = { start: yAxis.start, end: yAxis.end };\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user ends panning\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanEnd(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\r\n\t\tif (this._panEndXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndXRange;\r\n\t\t\tlet delta = 0;\r\n\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndXRange = undefined;\r\n\t\t\tthis._panStartXRange = undefined;\r\n\t\t}\r\n\t\tif (this._panEndYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panEndRange = this._panEndYRange;\r\n\r\n\t\t\tlet delta = 0;\r\n\t\t\tif (panEndRange.start < 0) {\r\n\t\t\t\tdelta = panEndRange.start;\r\n\t\t\t}\r\n\t\t\tif (panEndRange.end > 1) {\r\n\t\t\t\tdelta = panEndRange.end - 1;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: panEndRange.start - delta, end: panEndRange.end - delta }, false, true);\r\n\t\t\tthis._panEndYRange = undefined;\r\n\t\t\tthis._panStartYRange = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleCursorCanceled(): void {\r\n\t\tthis._panEndXRange = undefined;\r\n\t\tthis._panStartXRange = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user is panning chart plot using chart cursor.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorPanning(event: IXYCursorEvents[\"panning\"]): void {\r\n\t\tlet cursor: XYCursor = this.cursor;\r\n\t\tlet behavior = cursor.behavior;\r\n\t\tlet maxPanOut = cursor.maxPanOut;\r\n\t\tif (this._panStartXRange && (behavior == \"panX\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartXRange;\r\n\t\t\tlet range = cursor.xRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.xAxes);\r\n\r\n\t\t\tlet difference = (panStartRange.end - panStartRange.start);\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndXRange = newRange;\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tif (this._panStartYRange && (behavior == \"panY\" || behavior == \"panXY\")) {\r\n\t\t\tlet panStartRange = this._panStartYRange;\r\n\t\t\tlet range = cursor.yRange;\r\n\r\n\t\t\tlet axisRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\t\tlet difference = panStartRange.end - panStartRange.start;\r\n\t\t\tlet delta = range.start * (axisRange.end - axisRange.start);\r\n\r\n\t\t\tlet newStart = Math.max(-maxPanOut, delta + panStartRange.start);\r\n\t\t\tlet newEnd = Math.min(delta + panStartRange.end, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStart <= 0) {\r\n\t\t\t\tnewEnd = newStart + difference;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEnd >= 1) {\r\n\t\t\t\tnewStart = newEnd - difference;\r\n\t\t\t}\r\n\r\n\t\t\tlet newRange = {\r\n\t\t\t\tstart: newStart,\r\n\t\t\t\tend: newEnd\r\n\t\t\t}\r\n\t\t\tthis._panEndYRange = newRange;\r\n\t\t\tthis.zoomAxes(this.yAxes, newRange, false, false, cursor.maxPanOut);\r\n\t\t}\r\n\r\n\t\tthis.handleHideCursor();\r\n\t}\r\n\r\n\t/**\r\n\t * Performs zoom and other operations when user starts zooming using chart\r\n\t * cursor, e.g. zooms axes.\r\n\t *\r\n\t * @param event Cursor's event\r\n\t */\r\n\tprotected handleCursorZoomStart(event: IXYCursorEvents[\"zoomstarted\"]): void {\r\n\r\n\t\t// Nothing here\r\n\t\t// This method is here only as a \"placeholder\" for extending classes to\r\n\t\t// override if necessary\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal (X) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarX(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarX) {\r\n\t\t\tthis.removeDispose(this._scrollbarX);\r\n\t\t}\r\n\t\tthis._scrollbarX = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.topAxesContainer;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toBack();\r\n\t\t\tscrollbar.orientation = \"horizontal\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleXScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet xAxis = this.xAxes.getIndex(0);\r\n\t\t\t\tif (xAxis) {\r\n\t\t\t\t\targ.value = xAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarX(): Scrollbar {\r\n\t\treturn this._scrollbarX;\r\n\t}\r\n\r\n\t/**\r\n\t * Vertical (Y) scrollbar.\r\n\t *\r\n\t * @param scrollbar Scrollbar\r\n\t */\r\n\tpublic set scrollbarY(scrollbar: Scrollbar) {\r\n\t\tif (this._scrollbarY) {\r\n\t\t\tthis.removeDispose(this._scrollbarY);\r\n\t\t}\r\n\t\tthis._scrollbarY = scrollbar;\r\n\r\n\t\tif (scrollbar) {\r\n\t\t\tthis._disposers.push(scrollbar);\r\n\t\t\tscrollbar.parent = this.rightAxesContainer;\r\n\t\t\tscrollbar.startGrip.exportable = false;\r\n\t\t\tscrollbar.shouldClone = false;\r\n\t\t\tscrollbar.endGrip.exportable = false;\r\n\t\t\tscrollbar.toFront();\r\n\t\t\tscrollbar.orientation = \"vertical\";\r\n\t\t\tscrollbar.events.on(\"rangechanged\", this.handleYScrollbarChange, this, false);\r\n\t\t\t// accessibility related\r\n\t\t\tscrollbar.adapter.add(\"positionValue\", (arg) => {\r\n\t\t\t\tlet yAxis = this.yAxes.getIndex(0);\r\n\t\t\t\tif (yAxis) {\r\n\t\t\t\t\targ.value = yAxis.getPositionLabel(arg.position);\r\n\t\t\t\t}\r\n\t\t\t\treturn arg;\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Scrollbar\r\n\t */\r\n\tpublic get scrollbarY(): Scrollbar {\r\n\t\treturn this._scrollbarY;\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the horizontal (X) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleXScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\r\n\t\t\trange = this.zoomAxes(this.xAxes, range);\r\n\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes affected by the vertical (Y) scrollbar when the selection\r\n\t * on it changes.\r\n\t *\r\n\t * @param event Scrollbar range change event\r\n\t */\r\n\tprotected handleYScrollbarChange(event: AMEvent<Scrollbar, IScrollbarEvents>[\"rangechanged\"]): void {\r\n\t\tif (this.inited) {\r\n\t\t\tlet scrollbar: Scrollbar = event.target;\r\n\t\t\tlet range = scrollbar.range;\r\n\t\t\tif (range.end == 1) {\r\n\t\t\t\trange.priority = \"end\";\r\n\t\t\t}\r\n\t\t\tif (range.start == 0) {\r\n\t\t\t\trange.priority = \"start\";\r\n\t\t\t}\r\n\t\t\trange = this.zoomAxes(this.yAxes, range);\r\n\t\t\tscrollbar.fixRange(range);\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms axes that are affected by to specific relative range.\r\n\t *\r\n\t * @param axes       List of axes to zoom\r\n\t * @param range      Range of values to zoom to (0-1)\r\n\t * @param instantly  If set to `true` will skip zooming animation\r\n\t * @return Recalculated range that is common to all involved axes\r\n\t */\r\n\tprotected zoomAxes(axes: List<Axis<this[\"_xAxisRendererType\"]>>, range: IRange, instantly?: boolean, round?: boolean, declination?: number): IRange {\r\n\t\tlet realRange: IRange = { start: 0, end: 1 };\r\n\r\n\t\tthis.showSeriesTooltip(); // hides\r\n\r\n\t\tif (!this.dataInvalid) {\r\n\t\t\t$iter.each(axes.iterator(), (axis) => {\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\trange = $math.invertRange(range);\r\n\t\t\t\t}\r\n\r\n\t\t\t\taxis.hideTooltip(0);\r\n\r\n\t\t\t\tif (round) {\r\n\t\t\t\t\t//let diff = range.end - range.start;\r\n\t\t\t\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tlet diff = range.end - range.start;\r\n\t\t\t\t\t\t//range.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\r\n\t\t\t\t\t\tlet location = 0;\r\n\t\t\t\t\t\tif (range.end > 0.5) {\r\n\t\t\t\t\t\t\tlocation = 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\trange.end = axis.roundPosition(range.end + 0.0001, location);\r\n\t\t\t\t\t\trange.start = range.end - diff;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\trange.start = axis.roundPosition(range.start + 0.0001, 0);\r\n\t\t\t\t\t\trange.end = axis.roundPosition(range.end + 0.0001, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet axisRange: IRange = axis.zoom(range, instantly, instantly, declination);\r\n\r\n\t\t\t\tif (axis.renderer.inversed) {\r\n\t\t\t\t\taxisRange = $math.invertRange(axisRange);\r\n\t\t\t\t}\r\n\r\n\t\t\t\trealRange = axisRange;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn realRange;\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if bullet container is masked.\r\n\t *\r\n\t * If it is set to `true`, any bullets that do not fit into bullet container\r\n\t * will be clipped off. Settting to `false` will allow bullets to \"spill out\"\r\n\t * of the plot area so they are not cut off.\r\n\t *\r\n\t * @param value Mask bullet container?\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mask bullet container?\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates if chart should arrange series tooltips so that they would not\r\n\t * overlap.\r\n\t *\r\n\t * If set to `true` (default), the chart will adjust vertical positions of\r\n\t * all simultaneously shown tooltips to avoid overlapping.\r\n\t *\r\n\t * However, if you have a vertically-arranged chart, it might not make sense,\r\n\t * because tooltips would most probably not be aligned horizontally. In this\r\n\t * case it would probably be a good idea to set this setting to `false`.\r\n\t *\r\n\t * @default true\r\n\t * @param value Arrange tooltips?\r\n\t */\r\n\tpublic set arrangeTooltips(value: boolean) {\r\n\t\tthis.setPropertyValue(\"arrangeTooltips\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Arrange tooltips?\r\n\t */\r\n\tpublic get arrangeTooltips(): boolean {\r\n\t\treturn this.getPropertyValue(\"arrangeTooltips\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Handles mouse wheel event.\r\n\t *\r\n\t * @param event  Original event\r\n\t */\r\n\tprotected handleWheel(event: AMEvent<Sprite, ISpriteEvents>[\"wheel\"]) {\r\n\t\tlet plotContainer = this.plotContainer;\r\n\t\tlet svgPoint: IPoint = $utils.documentPointToSvg(event.point, this.htmlContainer, this.svgContainer.cssScale);\r\n\t\tlet plotPoint = $utils.svgPointToSprite(svgPoint, plotContainer);\r\n\t\tlet shift = event.shift.y;\r\n\r\n\t\tlet rangeX: IRange = this.getCommonAxisRange(this.xAxes);\r\n\t\tlet rangeY: IRange = this.getCommonAxisRange(this.yAxes);\r\n\r\n\t\tlet shiftStep = 0.05;\r\n\r\n\t\tlet maxPanOut = 0;\r\n\r\n\t\tlet mouseWheelBehavior = this.mouseWheelBehavior;\r\n\r\n\t\tif (mouseWheelBehavior == \"panX\" || mouseWheelBehavior == \"panXY\") {\r\n\r\n\t\t\tlet differenceX = rangeX.end - rangeX.start;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartX <= 0) {\r\n\t\t\t\tnewEndX = newStartX + differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndX >= 1) {\r\n\t\t\t\tnewStartX = newEndX - differenceX;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"panY\" || mouseWheelBehavior == \"panXY\") {\r\n\t\t\tshift *= -1;\r\n\t\t\tlet differenceY = rangeY.end - rangeY.start;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start + shiftStep * shift / 100);\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100, 1 + maxPanOut);\r\n\r\n\t\t\tif (newStartY <= 0) {\r\n\t\t\t\tnewEndY = newStartY + differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tif (newEndY >= 1) {\r\n\t\t\t\tnewStartY = newEndY - differenceY;\r\n\t\t\t}\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomX\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationX = plotPoint.x / plotContainer.maxWidth;\r\n\r\n\t\t\tlet newStartX = Math.max(-maxPanOut, rangeX.start - shiftStep * shift / 100 * locationX);\r\n\t\t\tnewStartX = Math.min(newStartX, rangeX.start + (rangeX.end - rangeX.start) * locationX - shiftStep * 0.05);\r\n\r\n\t\t\tlet newEndX = Math.min(rangeX.end + shiftStep * shift / 100 * (1 - locationX), 1 + maxPanOut);\r\n\t\t\tnewEndX = Math.max(newEndX, rangeX.start + (rangeX.end - rangeX.start) * locationX + shiftStep * 0.05);\r\n\r\n\t\t\tthis.zoomAxes(this.xAxes, { start: newStartX, end: newEndX });\r\n\t\t}\r\n\r\n\t\tif (mouseWheelBehavior == \"zoomY\" || mouseWheelBehavior == \"zoomXY\") {\r\n\t\t\tlet locationY = plotPoint.y / plotContainer.maxHeight;\r\n\r\n\t\t\tlet newStartY = Math.max(-maxPanOut, rangeY.start - shiftStep * shift / 100 * (1 - locationY));\r\n\t\t\tnewStartY = Math.min(newStartY, rangeY.start + (rangeY.end - rangeY.start) * locationY - shiftStep * 0.05);\r\n\r\n\t\t\tlet newEndY = Math.min(rangeY.end + shiftStep * shift / 100 * locationY, 1 + maxPanOut);\r\n\t\t\tnewEndY = Math.max(newEndY, rangeY.start + (rangeY.end - rangeY.start) * locationY + shiftStep * 0.05);\r\n\r\n\t\t\tthis.zoomAxes(this.yAxes, { start: newStartY, end: newEndY });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies action for when mouse wheel is used when over the chart.\r\n\t *\r\n\t * Options: Options: `\"zoomX\"`, `\"zoomY\"`, `\"zoomXY\"`, `\"panX\"`, `\"panY\"`, `\"panXY\"`, `\"none\"` (default).\r\n\t *\r\n\t * @default \"none\"\r\n\t * @param mouse wheel behavior\r\n\t */\r\n\tpublic set mouseWheelBehavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\r\n\t\tif (this.setPropertyValue(\"mouseWheelBehavior\", value)) {\r\n\t\t\tif (value != \"none\") {\r\n\t\t\t\tthis._mouseWheelDisposer = this.plotContainer.events.on(\"wheel\", this.handleWheel, this, false);\r\n\t\t\t\tthis._disposers.push(this._mouseWheelDisposer);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._mouseWheelDisposer) {\r\n\t\t\t\t\tthis.plotContainer.wheelable = false;\r\n\t\t\t\t\tthis.plotContainer.hoverable = false;\r\n\t\t\t\t\tthis._mouseWheelDisposer.dispose();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Mouse wheel behavior\r\n\t */\r\n\tpublic get mouseWheelBehavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"mouseWheelBehavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `dateFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param fields  Array of date fields\r\n\t * @return Array of date fields populated with chart's date fields\r\n\t */\r\n\tprotected dataSourceDateFields(fields: string[]): string[] {\r\n\t\t// Process parent\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"dateX\", \"dateY\", \"openDateX\", \"openDateY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by the [[DataSource]]'s `numberFields` adapater\r\n\t * so that particular chart types can popuplate this setting with their\r\n\t * own type-specific data fields so they are parsed properly.\r\n\t *\r\n\t * @param value  Array of number fields\r\n\t * @return Array of number fields populated with chart's number fields\r\n\t */\r\n\tprotected dataSourceNumberFields(fields: string[]): string[] {\r\n\t\tfields = super.dataSourceDateFields(fields);\r\n\r\n\t\t// Check if we have any series with date-fields\r\n\t\t$iter.each(this.series.iterator(), (series: this[\"_seriesType\"]) => {\r\n\t\t\tfields = this.populateDataSourceFields(\r\n\t\t\t\tfields,\r\n\t\t\t\t<any>series.dataFields,\r\n\t\t\t\t[\"valueX\", \"valueY\", \"openValueX\", \"openValueY\"]\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn fields;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Save axis ranges for later processing\r\n\t\t\tlet xAxes: any[] = [];\r\n\t\t\tlet yAxes: any[] = [];\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.xAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for xAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.xAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\txAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.xAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.xAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tif (!config.yAxes[i].type) {\r\n\t\t\t\t\t\tthrow Error(\"[XYChart error] No type set for yAxes[\" + i + \"].\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if ($type.hasValue(config.yAxes[i][\"axisRanges\"])) {\r\n\t\t\t\t\t\tyAxes.push({\r\n\t\t\t\t\t\t\taxisRanges: config.yAxes[i][\"axisRanges\"],\r\n\t\t\t\t\t\t\tindex: i\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdelete (config.yAxes[i][\"axisRanges\"]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"LineSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"XYCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up scrollbars\r\n\t\t\tif ($type.hasValue(config.scrollbarX) && !$type.hasValue(config.scrollbarX.type)) {\r\n\t\t\t\tconfig.scrollbarX.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.scrollbarY) && !$type.hasValue(config.scrollbarY.type)) {\r\n\t\t\t\tconfig.scrollbarY.type = \"Scrollbar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\r\n\t\t\t// Finish up with ranges.\r\n\t\t\t// We need to do this here because series are processed last in JSON\r\n\t\t\t// config. Therefore their respective objects are not yet are available\r\n\t\t\t// when axis (and respectively their ranges) are being processed.\r\n\t\t\tif (yAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = yAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.yAxes.getIndex(yAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: yAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (xAxes.length) {\r\n\t\t\t\tfor (let i = 0, len = xAxes.length; i < len; i++) {\r\n\t\t\t\t\tthis.xAxes.getIndex(xAxes[i].index).config = {\r\n\t\t\t\t\t\taxisRanges: xAxes[i].axisRanges\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"scrollbarX\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarX\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"scrollbarY\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"scrollbarY\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"cursor\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"cursor\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse if (a == \"series\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"series\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new Series of type suitable for this chart.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new XYSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Button]] element that is used for zooming out the chart.\r\n\t *\r\n\t * This button appears only when chart is zoomed in, and disappears\r\n\t * autoamatically when it is zoome dout.\r\n\t *\r\n\t * @param button  Zoom out button\r\n\t */\r\n\tpublic set zoomOutButton(button: Button) {\r\n\t\tthis._zoomOutButton = button;\r\n\t\tif (button) {\r\n\t\t\tbutton.events.on(\"hit\", () => {\r\n\t\t\t\tthis.zoomAxes(this.xAxes, { start: 0, end: 1 });\r\n\t\t\t\tthis.zoomAxes(this.yAxes, { start: 0, end: 1 });\r\n\t\t\t}, undefined, false);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Zoom out button\r\n\t */\r\n\tpublic get zoomOutButton(): Button {\r\n\t\treturn this._zoomOutButton;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[XYChart]].\r\n\t *\r\n\t * @param source Source XYChart\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\r\n\t\tsource.xAxes.each((axis) => {\r\n\t\t\tthis.xAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\tsource.yAxes.each((axis) => {\r\n\t\t\tthis.yAxes.push(axis.clone());\r\n\t\t})\r\n\r\n\t\t//this.xAxes.copyFrom(source.xAxes);\r\n\t\t//this.yAxes.copyFrom(source.yAxes);\r\n\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\t//this.zoomOutButton.copyFrom(source.zoomOutButton);\r\n\r\n\t\tif (source.cursor) {\r\n\t\t\tthis.cursor = source.cursor.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarX) {\r\n\t\t\tthis.scrollbarX = source.scrollbarX.clone();\r\n\t\t}\r\n\r\n\t\tif (source.scrollbarY) {\r\n\t\t\tthis.scrollbarY = source.scrollbarY.clone();\r\n\t\t}\r\n\t\t//@todo copy all container properties\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\r\n\t\tlet scrollbarX = this.scrollbarX;\r\n\t\tif (scrollbarX && scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarX.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tlet scrollbarY = this.scrollbarY;\r\n\t\tif (scrollbarY && scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tscrollbarY.scrollbarChart.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\r\n\t\tthis.yAxes.each((axis) => {\r\n\t\t\taxis.disposeData();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Adds one or several (array) of data items to the existing data.\r\n\t *\r\n\t * @param rawDataItem One or many raw data item objects\r\n\t */\r\n\tpublic addData(rawDataItem: Object | Object[], removeCount?: number): void {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarX, removeCount);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.addScrollbarData(this.scrollbarY, removeCount);\r\n\t\t}\r\n\r\n\t\tsuper.addData(rawDataItem, removeCount);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected addScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tchart._parseDataFrom = chart.data.length;\r\n\t\tchart.invalidateData();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected removeScrollbarData(scrollbar: XYChartScrollbar, removeCount: number) {\r\n\t\tlet chart = scrollbar.scrollbarChart;\r\n\t\tif ($type.isNumber(removeCount)) {\r\n\t\t\twhile (removeCount > 0) {\r\n\t\t\t\tlet dataItem = this.dataItems.getIndex(0);\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchart.dataItems.remove(dataItem);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tchart.dataUsers.each((dataUser) => {\r\n\t\t\t\t\tlet dataItem = dataUser.dataItems.getIndex(0);\r\n\t\t\t\t\tif (dataItem) {\r\n\t\t\t\t\t\tdataUser.dataItems.remove(dataItem);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tchart._parseDataFrom--;\r\n\r\n\t\t\t\tremoveCount--;\r\n\t\t\t}\r\n\r\n\t\t\tchart.invalidateData();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Removes elements from the beginning of data\r\n\t *\r\n\t * @param count number of elements to remove\r\n\t */\r\n\tpublic removeData(count: $type.Optional<number>) {\r\n\t\tif (this.scrollbarX instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarX, count);\r\n\t\t}\r\n\t\tif (this.scrollbarY instanceof XYChartScrollbar) {\r\n\t\t\tthis.removeScrollbarData(this.scrollbarY, count);\r\n\t\t}\r\n\r\n\t\tsuper.removeData(count);\r\n\t}\r\n\r\n\t/**\r\n\t * @param  value  Tap to activate?\r\n\t */\r\n\tprotected setTapToActivate(value: boolean): void {\r\n\t\tsuper.setTapToActivate(value);\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = value;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = value;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivate(): void {\r\n\t\tsuper.handleTapToActivate();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = false;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = false;\r\n\t\t}\r\n\t}\r\n\r\n\tprotected handleTapToActivateDeactivation(): void {\r\n\t\tsuper.handleTapToActivateDeactivation();\r\n\t\tif (this.cursor) {\r\n\t\t\tthis.cursor.interactions.isTouchProtected = true;\r\n\t\t\tthis.plotContainer.interactions.isTouchProtected = true;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart\"] = XYChart;\r\n\r\n/**\r\n * Add default responsive rules\r\n */\r\n\r\n/**\r\n * Remove horizontal scrollbar on narrow charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarX) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarX.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\r\n/**\r\n * Remove vertical scrollbar on short charts.\r\n */\r\ndefaultRules.push({\r\n\trelevant: ResponsiveBreakpoints.maybeXS,\r\n\tstate: function(target, stateId) {\r\n\t\tif (target instanceof XYChart && target.scrollbarY) {\r\n\t\t\tlet state = target.states.create(stateId);\r\n\t\t\tlet sbstate = target.scrollbarY.states.create(stateId);\r\n\t\t\tsbstate.properties.disabled = true;\r\n\t\t\treturn state;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[LineSeriesSegment]].\r\n */\r\nexport interface ILineSeriesSegmentEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesSegmentAdapters extends IContainerAdapters, ILineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link ILineSeriesSegmentEvents} for a list of available events\r\n * @see {@link ILineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class LineSeriesSegment extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesSegment\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.interactionsEnabled = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\t// Create fill element\r\n\t\tlet fillSprite = this.createChild(Sprite);\r\n\t\tthis.fillSprite = fillSprite;\r\n\t\tfillSprite.shouldClone = false;\r\n\t\tfillSprite.setElement(this.paper.add(\"path\"));\r\n\t\tfillSprite.isMeasured = false;\r\n\t\tthis._disposers.push(fillSprite);\r\n\r\n\r\n\t\t// Create line element\r\n\t\tlet strokeSprite = this.createChild(Sprite);\r\n\t\tthis.strokeSprite = strokeSprite;\r\n\t\tstrokeSprite.shouldClone = false;\r\n\t\tstrokeSprite.fill = color();\r\n\t\tstrokeSprite.setElement(this.paper.add(\"path\"));\r\n\t\tstrokeSprite.isMeasured = false;\r\n\t\tthis._disposers.push(strokeSprite);\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number): void {\r\n\t\tif (!this.disabled) {\r\n\t\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\t\t\t\t// first moveTo helps to avoid Chrome straight line in the mask bug.\r\n\t\t\t\tlet path: string = $path.moveTo({ x: points[0].x - 0.2, y: points[0].y - 0.2 }) + $path.moveTo(points[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(points);\r\n\r\n\t\t\t\tif (this.strokeOpacity == 0 || this.strokeSprite.strokeOpacity == 0) {\r\n\t\t\t\t\t// like this and not if != 0, otherwise ranges stroke won't be drawn.\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.strokeSprite.path = path;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + new $smoothing.Tension(smoothnessX, smoothnessY).smooth(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.fillSprite.path = \"\";\r\n\t\t\t\tthis.strokeSprite.path = \"\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties from a [[Sprite]] to both line and fill elements.\r\n\t *\r\n\t * @param source Source [[Sprite]] to copy properties from\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\r\n\t\tlet lineElement = this.strokeSprite;\r\n\t\t$object.copyProperties(source, lineElement.properties, visualProperties);\r\n\t\tlineElement.events.copyFrom(source.strokeSprite.events);\r\n\t\tlineElement.fillOpacity = 0;\r\n\r\n\t\tlet fillElement = this.fillSprite;\r\n\t\t$object.copyProperties(source, fillElement.properties, visualProperties);\r\n\t\tfillElement.events.copyFrom(source.fillSprite.events);\r\n\t\tfillElement.strokeOpacity = 0;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeriesSegment\"] = LineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeriesSegment.ts","/**\r\n * Line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesDataFields, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Axis, AxisDataItem } from \"../axes/Axis\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { DateAxis } from \"../axes/DateAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { Rectangle } from \"../../core/elements/Rectangle\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { LegendDataItem } from \"../Legend\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[LineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class LineSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: LineSeries;\r\n\r\n\t/**\r\n\t * Point of line series data item\r\n\t */\r\n\tpublic point: IPoint;\r\n\r\n\t/**\r\n\t * A reference to a segment object, used for getting proper colors for tooltips\r\n\t */\r\n\tpublic segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"LineSeriesDataItem\";\r\n\t}\r\n\r\n\t// @todo: minimums/maximums\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Vertical tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionY?: number;\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnect?: boolean;\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @default 1.1\r\n\t */\r\n\tautoGapCount?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[LineSeries]].\r\n */\r\nexport interface ILineSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[LineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILineSeriesAdapters extends IXYSeriesAdapters, ILineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a line graph.\r\n *\r\n * @see {@link ILineSeriesEvents} for a list of available Events\r\n * @see {@link ILineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class LineSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ILineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: LineSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of line series segments.\r\n\t *\r\n\t * Segments are used in two cases:\r\n\t *\r\n\t * * When we want to change the appearance of a part of the line series;\r\n\t * * When we have an axis range.\r\n\t */\r\n\tpublic segments: ListTemplate<this[\"_segment\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: LineSeriesSegment;\r\n\r\n\t/**\r\n\t * A container for segment elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic segmentsContainer: Container;\r\n\r\n\t/**\r\n\t * Minimum distance in pixels between two adjacent points.\r\n\t *\r\n\t * If the distance is less than this setting, a point is skipped.\r\n\t *\r\n\t * This allows acceptable performance with huge amounts of data points.\r\n\t *\r\n\t * @default 0.5\r\n\t */\r\n\tpublic minDistance: number = 0.5;\r\n\r\n\t/**\r\n\t * Iterator for segments.\r\n\t */\r\n\tprotected _segmentsIterator: $iter.ListIterator<this[\"_segment\"]>;\r\n\r\n\tprotected _adjustedStartIndex: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.segments = new ListTemplate<LineSeriesSegment>(this.createSegment());\r\n\t\tthis.segments.template.applyOnClones = true;\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.segments));\r\n\t\tthis._disposers.push(this.segments.template);\r\n\r\n\t\tthis._segmentsIterator = new $iter.ListIterator<LineSeriesSegment>(this.segments, () => this.segments.create());\r\n\t\tthis._segmentsIterator.createNewItems = true;\r\n\r\n\t\tthis.className = \"LineSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.fillOpacity = 0;\r\n\r\n\t\tthis.connect = true;\r\n\r\n\t\tthis.tensionX = 1;\r\n\t\tthis.tensionY = 1;\r\n\r\n\t\tthis.autoGapCount = 1.1;\r\n\r\n\t\tthis.segmentsContainer = this.mainContainer.createChild(Container);\r\n\t\tthis.segmentsContainer.isMeasured = false;\r\n\r\n\t\t// line series might have multiple segments and it has a separate sprite for fill and stroke for each segment. So we need to observe all the changes on series and set them on the segments\r\n\t\t// todo: we need list here, otherwise everything will be redrawn event on change of properties like tooltipX or similar.\r\n\t\t// this.addEventListener(SpriteEvent.PROPERTY_CHANGED, this.validateDataElements, false, this);\r\n\r\n\t\tthis.bulletsContainer.toFront();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Line Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new LineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new LineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits data item's working values.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @param index     Data item's index\r\n\t */\r\n\r\n\tprotected setInitialWorkingValues(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// this makes data items animate when added\r\n\r\n\t\tlet yAxis: Axis = this._yAxis.get();\r\n\t\tlet xAxis: Axis = this._xAxis.get();\r\n\r\n\t\tif (this.appeared && this.visible) {\r\n\r\n\t\t\tlet previousDataItem: XYSeriesDataItem = this.dataItems.getIndex(dataItem.index - 1);\r\n\r\n\t\t\tdataItem.component = this; // as these values are set before, we don't know component yet\r\n\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialY: number = yAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialY = previousDataItem.values[\"valueY\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// this makes line animate from previous point to newly added point\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", initialY, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueY\", dataItem.values.valueY.value);\r\n\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tlet initialX: number = xAxis.minZoomed;\r\n\t\t\t\t\tif (previousDataItem) {\r\n\t\t\t\t\t\tinitialX = previousDataItem.values[\"valueX\"].workingValue;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", initialX, 0);\r\n\t\t\t\t\tdataItem.setWorkingValue(\"valueX\", dataItem.values.valueX.value);\r\n\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateX - 1, 0); // instantly move it to previous\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY); // animate to it's location\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.baseAxis == xAxis) {\r\n\t\t\t\tif (yAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (xAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateX\", dataItem.locations.dateX);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (xAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryX\", dataItem.locations.categoryX);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == yAxis) {\r\n\t\t\t\tif (xAxis instanceof ValueAxis) {\r\n\t\t\t\t\tif (yAxis instanceof DateAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"dateY\", dataItem.locations.dateY);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (yAxis instanceof CategoryAxis) {\r\n\t\t\t\t\t\tdataItem.setWorkingLocation(\"categoryY\", dataItem.locations.categoryY);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates corresponding legend data item with current values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?:boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\t\t//This is hack to save some methos, used to set tooltip color source only\r\n\t\tif (dataItem && dataItem.segment) {\r\n\t\t\tthis.tooltipColorSource = dataItem.segment;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tthis._segmentsIterator.reset();\r\n\r\n\t\tthis.openSegmentWrapper(this._adjustedStartIndex);\r\n\r\n\t\t$iter.each(this.axisRanges.iterator(), (range) => {\r\n\t\t\tthis.openSegmentWrapper(this._adjustedStartIndex, range);\r\n\t\t});\r\n\r\n\t\t$iter.each(this._segmentsIterator.iterator(), (segment) => {\r\n\t\t\tsegment.__disabled = true;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * [sliceData description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected sliceData(): void {\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\t// we need extra one item to both sides with values for line series, otherwise the line will not continue out of bounds of the chart while scrolling\r\n\t\t// find first to the left\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.startIndex - 1; i >= 0; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tstartIndex = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis._adjustedStartIndex = this.findAdjustedIndex(startIndex, [\"stroke\", \"strokeWidth\", \"strokeDasharray\", \"strokeOpacity\", \"fill\", \"fillOpacity\", \"opacity\"]);\r\n\r\n\t\t// find first to the right\r\n\t\t// TODO use iterator instead\r\n\t\tfor (let i = this.endIndex, len = this.dataItems.length; i < len; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tif (dataItem && dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tendIndex = i + 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._workingStartIndex = startIndex;\r\n\t\tthis._workingEndIndex = endIndex;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected findAdjustedIndex(adjustedIndex: number, properties: string[]): number {\r\n\t\tlet propertyFields: any = this.propertyFields;\r\n\t\tlet startIndex = adjustedIndex;\r\n\r\n\t\t$array.each(properties, (property) => {\r\n\t\t\tif ($type.hasValue(propertyFields[property])) {\r\n\t\t\t\tfor (let i = startIndex; i >= 0; i--) {\r\n\t\t\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\t\t\tif(dataItem){\r\n\t\t\t\t\t\tif ($type.hasValue(dataItem.properties[property])) {\r\n\t\t\t\t\t\t\tif (adjustedIndex > i) {\r\n\t\t\t\t\t\t\t\tadjustedIndex = i;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn adjustedIndex;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Wraps openSegment call with iterative solution to prevent stack overflow\r\n\t *\r\n\t * @param openIndex  Index\r\n\t * @param axisRange  Range\r\n\t */\r\n\tprotected openSegmentWrapper(openIndex: number, axisRange?: AxisDataItem): void {\r\n\t\tlet params = {\r\n\t\t\t\"index\": openIndex,\r\n\t\t\t\"axisRange\": axisRange\r\n\t\t};\r\n\t\tdo {\r\n\t\t\tparams = this.openSegment(params.index, params.axisRange);\r\n\t\t} while (params)\r\n\t}\r\n\r\n\t/**\r\n\t * [openSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param openIndex  [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected openSegment(openIndex: number, axisRange?: AxisDataItem): { \"index\": number, \"axisRange\": AxisDataItem } {\r\n\t\tlet addToClose = false;\r\n\t\tlet points: IPoint[] = [];\r\n\t\topenIndex = Math.min(openIndex, this.dataItems.length);\r\n\t\tlet endIndex: number = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\t\tthis._workingEndIndex = Math.min(this._workingEndIndex, this.dataItems.length);\r\n\r\n\t\tlet closeIndex: number;\r\n\t\tlet propertiesChanged: boolean = false;\r\n\r\n\t\tlet segment: LineSeriesSegment = this._segmentsIterator.getFirst();\r\n\t\tsegment.__disabled = false;\r\n\r\n\t\tif (axisRange) {\r\n\t\t\tsegment.parent = axisRange.contents;\r\n\t\t\t$object.copyProperties(axisRange.contents, segment, visualProperties);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$object.copyProperties(this, segment, visualProperties);\r\n\t\t\tsegment.filters.clear();\r\n\t\t\tsegment.parent = this.segmentsContainer;\r\n\t\t}\r\n\r\n\t\tlet connect: boolean = this.connect;\r\n\t\tlet valuesFound:boolean = false; // some flag to avoid multiple closes if no values found\r\n\r\n\t\tfor (let i: number = openIndex; i < endIndex; i++) {\r\n\r\n\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\tdataItem.segment = segment;\r\n\r\n\t\t\tif (dataItem.hasProperties) {\r\n\t\t\t\t// if this is first item of segment\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tthis.updateSegmentProperties(dataItem.properties, segment);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// this time we only need to know if properties changed, so we don't pass segment\r\n\t\t\t\t\tpropertiesChanged = this.updateSegmentProperties(dataItem.properties, segment, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\tthis.addPoints(points, dataItem, this.xField, this.yField);\r\n\t\t\t\tvaluesFound = true;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// if no values in first data item, go to next\r\n\t\t\t\tif (i == openIndex) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// stop cycle\r\n\t\t\t\t\tif (!connect && valuesFound) {\r\n\t\t\t\t\t\tcloseIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tcloseIndex = i;\r\n\r\n\t\t\tif (this.baseAxis instanceof DateAxis) {\r\n\t\t\t\tlet next = this.dataItems.getIndex(i + 1)\r\n\t\t\t\tif (next && this.baseAxis.makeGap(next, dataItem)) {\r\n\t\t\t\t\taddToClose = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (propertiesChanged) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.closeSegment(segment, points, openIndex, closeIndex, axisRange, addToClose);\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean) {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.workingLocations[xField], dataItem.workingLocations[yField]);\r\n\t\tif (!backwards) {\r\n\t\t\tdataItem.point = point;\r\n\t\t}\r\n\t\tpoints.push(point);\r\n\t}\r\n\r\n\t/**\r\n\t * [closeSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment    [description]\r\n\t * @param points     [description]\r\n\t * @param openIndex  [description]\r\n\t * @param closeIndex [description]\r\n\t * @param axisRange  [description]\r\n\t */\r\n\tprotected closeSegment(segment: LineSeriesSegment, points: IPoint[], openIndex: number, closeIndex: number, axisRange?: AxisDataItem, add?: boolean) {\r\n\t\tlet closePoints: IPoint[] = [];\r\n\r\n\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\tthis.stacked) {\r\n\t\t\tfor (let i: number = closeIndex; i >= openIndex; i--) {\r\n\t\t\t\tlet dataItem: this[\"_dataItem\"] = this.dataItems.getIndex(i);\r\n\t\t\t\tif (dataItem.hasValue(this._xValueFields) && dataItem.hasValue(this._yValueFields)) { // not sure, this means that open point will only be added if value is also set for this point, but maybe it's ok.\r\n\t\t\t\t\tthis.addPoints(closePoints, dataItem, this.xOpenField, this.yOpenField, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet baseAxis: Axis = this.baseAxis;\r\n\t\t\tlet count: number = points.length;\r\n\t\t\tlet xAxis: Axis = this.xAxis;\r\n\t\t\tlet yAxis: Axis = this.yAxis;\r\n\t\t\tif (count > 0) {\r\n\t\t\t\tif (baseAxis == xAxis) {\r\n\t\t\t\t\tclosePoints.push({ x: points[count - 1].x, y: yAxis.basePoint.y }); // last x\r\n\t\t\t\t\tclosePoints.push({ x: points[0].x, y: yAxis.basePoint.y }); // first x\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[count - 1].y }); // last y\r\n\t\t\t\t\tclosePoints.push({ x: xAxis.basePoint.x, y: points[0].y }); // first y\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.drawSegment(segment, points, closePoints);\r\n\r\n\t\tif (add) {\r\n\t\t\tcloseIndex++;\r\n\t\t}\r\n\r\n\t\tif (closeIndex < this._workingEndIndex - 1) {\r\n\t\t\treturn { \"index\": closeIndex, \"axisRange\": axisRange };\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY);\r\n\t}\r\n\r\n\t/**\r\n\t * Segement will get its colors from `this.dataItem`, as thats how\r\n\t * `getPropertyValue()` method works.\r\n\t *\r\n\t * We pass `lineSeriesDataItem.properties` as item here each time when a flag\r\n\t * `hasProperties` is set to `true` on data item (this means it can contain\r\n\t * some properties set).\r\n\t *\r\n\t * @param itemProperties  Item properties\r\n\t * @param segment         Segment\r\n\t * @return Properties changed?\r\n\t */\r\n\tprotected updateSegmentProperties(itemProperties: { [index: string]: any }, segment: LineSeriesSegment, checkOnly?: boolean): boolean {\r\n\t\tlet changed: boolean = false;\r\n\r\n\t\t$object.each(itemProperties, (propertyName, value) => {\r\n\t\t\t// some value must be defined\r\n\t\t\tif ($type.hasValue(value)) {\r\n\t\t\t\tlet currentValue = (<any>segment)[propertyName];\r\n\t\t\t\tlet currentValueStr: string;\r\n\t\t\t\t// current value can be Color, number, anything. So we check if it has toString, otherwise just do String().\r\n\t\t\t\t// toString() will return hex if it's color. The only problem is that it will return lowercased hex and if we have uppercase in data, it will think that it changed\r\n\t\t\t\tif (currentValue) {\r\n\t\t\t\t\tif (currentValue.toString) {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcurrentValueStr = currentValue; // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tlet valueStr: string;\r\n\r\n\t\t\t\tif (value) {\r\n\t\t\t\t\tif (value.toString) {\r\n\t\t\t\t\t\tvalueStr = value.toString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tvalueStr = value;  // not doing String(currentValue) as this will make all Objects the same\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (currentValue == value || (currentValueStr != undefined && valueStr != undefined && currentValueStr == valueStr)) {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif (!checkOnly) {\r\n\t\t\t\t\t\t(<any>segment)[propertyName] = value;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tchanged = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn changed;\r\n\t}\r\n\r\n\t/**\r\n\t * Connect the lines over empty data points?\r\n\t *\r\n\t * If set to `true` the line will connect two adjacent data points by a\r\n\t * straight line. Even if there are data points with missing values\r\n\t * in-between.\r\n\t *\r\n\t * If you set this to `false`, the line will break when there are missing\r\n\t * values.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/#Line_series_with_gaps} for more information about this feature\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connect(value: boolean) {\r\n\t\tif (this.setPropertyValue(\"connect\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connect(): boolean {\r\n\t\treturn this.getPropertyValue(\"connect\");\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for horizontal tension, meaning the curve will bend in\r\n\t * such way that it never goes below or above connecting points. To enable\r\n\t * vertical bending as well, use `tensionY`.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Horizontal tension (0-1)\r\n\t */\r\n\tpublic set tensionX(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Horizontal tension (0-1)\r\n\t */\r\n\tpublic get tensionX(): number {\r\n\t\treturn this.getPropertyValue(\"tensionX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Can be used to create smoothed lines. It works like this:\r\n\t *\r\n\t * Accepted values are in the range between 0 and 1. The biggest value (1)\r\n\t * will mean that the \"tension\" is very high, so the line is maximally\r\n\t * attracted to the points it connects, hence the straight line.\r\n\t *\r\n\t * Using smaller numbers will \"relax\" the tension, creating some curving.\r\n\t *\r\n\t * The smaller the tension setting, the more relaxed the line and the more\r\n\t * wide the curve.\r\n\t *\r\n\t * This setting is for vertical tension, meaning the curve might bend in\r\n\t * such way that it will go below or above connected points.\r\n\t *\r\n\t * Combine this setting with `tensionX` to create beautifully looking\r\n\t * smoothed line series.\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Vertical tension (0-1)\r\n\t */\r\n\tpublic set tensionY(value: number) {\r\n\t\tthis.setPropertyValue(\"tensionY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Vertical tension (0-1)\r\n\t */\r\n\tpublic get tensionY(): number {\r\n\t\treturn this.getPropertyValue(\"tensionY\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.disposeChildren();\r\n\r\n\t\tlet line: Line = marker.createChild(Line);\r\n\t\tline.shouldClone = false;\r\n\t\t//line.copyFrom(<any>this); coppies events which is not good\r\n\t\t$object.copyProperties(this, line, visualProperties);\r\n\r\n\t\tline.x2 = w;\r\n\t\tline.y = h / 2;\r\n\t\tline.visible = true;\r\n\r\n\t\tif (this.fillOpacity > 0) {\r\n\t\t\tlet fill: Rectangle = marker.createChild(Rectangle);\r\n\t\t\t//fill.copyFrom(<any>this); coppies events which is not good\r\n\t\t\t$object.copyProperties(this, fill, visualProperties);\r\n\t\t\tfill.width = w;\r\n\t\t\tfill.height = h;\r\n\t\t\tfill.y = 0;\r\n\t\t\tfill.strokeOpacity = 0;\r\n\t\t\tfill.visible = true;\r\n\r\n\t\t\tline.y = 0;\r\n\t\t}\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.stroke;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\r\n\t\t$iter.eachContinue(this.bullets.iterator(), (bullet) => {\r\n\r\n\t\t\tif ((bullet instanceof Bullet) && !bullet.copyToLegendMarker) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tlet hasLabels: boolean = false;\r\n\r\n\t\t\tif (bullet instanceof Container) {\r\n\t\t\t\t// do not copy bullets with labels\r\n\r\n\t\t\t\t$iter.each(bullet.children.iterator(), (child) => {\r\n\t\t\t\t\tif (child instanceof Label) {\r\n\t\t\t\t\t\thasLabels = true;\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (!hasLabels) {\r\n\t\t\t\tlet clone: Sprite = <Sprite>bullet.clone();\r\n\t\t\t\tclone.parent = marker;\r\n\t\t\t\tclone.isMeasured = true;\r\n\t\t\t\tclone.tooltipText = undefined;\r\n\t\t\t\tclone.x = w / 2;\r\n\t\t\t\tif (this.fillOpacity > 0) {\r\n\t\t\t\t\tclone.y = 0;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tclone.y = h / 2;\r\n\t\t\t\t}\r\n\t\t\t\tclone.visible = true;\r\n\r\n\t\t\t\t// otherwise will not transit to color after hiding\r\n\t\t\t\tif (!$type.hasValue(clone.fill)) {\r\n\t\t\t\t\tclone.fill = this.fill;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!$type.hasValue(clone.stroke)) {\r\n\t\t\t\t\tclone.stroke = this.stroke;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.segments.clear();\r\n\t}\r\n\r\n\t/**\r\n\t * If `connect = false` and distance between two data points is bigger\r\n\t * than `baseInterval * autoGapCount`, a line will break automatically.\r\n\t *\r\n\t * @since 4.2.4\r\n\t * @param  value  Gap count\r\n\t */\r\n\tpublic set autoGapCount(value: number) {\r\n\t\tthis.setPropertyValue(\"autoGapCount\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Gap count\r\n\t */\r\n\tpublic get autoGapCount(): number {\r\n\t\treturn this.getPropertyValue(\"autoGapCount\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LineSeries\"] = LineSeries;\r\nregistry.registeredClasses[\"LineSeriesDataItem\"] = LineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/LineSeries.ts","/**\r\n * Radar series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\n//import { Sprite } from \"../../core/Sprite\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeriesDataItem\";\r\n\r\n\t\tthis.setLocation(\"dateX\", 0, 0);\r\n\t\tthis.setLocation(\"dateY\", 0, 0);\r\n\r\n\t\tthis.setLocation(\"categoryX\", 0, 0);\r\n\t\tthis.setLocation(\"categoryY\", 0, 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesProperties extends ILineSeriesProperties {\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tconnectEnds?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarSeries]].\r\n */\r\nexport interface IRadarSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarSeriesAdapters extends ILineSeriesAdapters, IRadarSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a radar graph.\r\n *\r\n * @see {@link IRadarSeriesEvents} for a list of available Events\r\n * @see {@link IRadarSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarSeries\";\r\n\t\tthis.connectEnds = true;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new RadarSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\t//\t\tangle = $math.fitToRange(angle, startAngle, endAngle);\r\n\t\tif (angle < startAngle || angle > endAngle) {\r\n\t\t\treturn undefined;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points    [description]\r\n\t * @param dataItem  [description]\r\n\t * @param xField    [description]\r\n\t * @param yField    [description]\r\n\t * @param backwards [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\t\tlet point = this.getPoint(dataItem, xField, yField, dataItem.locations[xField], dataItem.locations[yField]);\r\n\t\tif (point) {\r\n\t\t\tpoints.push(point);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [drawSegment description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param segment      [description]\r\n\t * @param points       [description]\r\n\t * @param closePoints  [description]\r\n\t */\r\n\tprotected drawSegment(segment: LineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet axis: Axis = this.yAxis;\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>axis.renderer;\r\n\r\n\t\tif (this.connectEnds && Math.abs(renderer.endAngle - renderer.startAngle) == 360) {\r\n\t\t\t// adds one point to the beginning of closePoints array, if needed\r\n\t\t\tif (this.dataFields[<keyof this[\"_dataFields\"]>this._xOpenField] ||\r\n\t\t\t\tthis.dataFields[<keyof this[\"_dataFields\"]>this._yOpenField] ||\r\n\t\t\t\tthis.stacked) {\r\n\t\t\t\tpoints.push(points[0]);\r\n\t\t\t\tif (closePoints.length > 0) {\r\n\t\t\t\t\tclosePoints.unshift(closePoints[closePoints.length - 1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsuper.drawSegment(segment, points, closePoints);\r\n\t}\r\n\r\n\t/**\r\n\t * Should the last and and first data points be connected, forming a complete\r\n\t * closed circle?\r\n\t *\r\n\t * @default true\r\n\t * @param value  Connect?\r\n\t */\r\n\tpublic set connectEnds(value: boolean) {\r\n\t\tthis.setPropertyValue(\"connectEnds\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Connect?\r\n\t */\r\n\tpublic get connectEnds(): boolean {\r\n\t\treturn this.getPropertyValue(\"connectEnds\");\r\n\t}\r\n\t/*\r\n\t\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\t\t\r\n\t\t\tlet rendererX:AxisRendererCircular = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\t\tlet rendererY:AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\t\t\r\n\t\t\tlet angle = rendererX.positionToAngle(positionX);\r\n\t\t\tlet radius = rendererY.positionToCoordinate(positionY);\r\n\t\r\n\t\t\tif(angle < this.chart.startAngle || angle > this.chart.endAngle){\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\r\n\t\t\tbullet.x = $math.cos(angle) * radius;\r\n\t\t\tbullet.y = $math.sin(angle) * radius;\r\n\t\t}\t*/\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarSeries\"] = RadarSeries;\r\nregistry.registeredClasses[\"RadarSeriesDataItem\"] = RadarSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarSeries.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisFill, IAxisFillProperties, IAxisFillAdapters, IAxisFillEvents } from \"./AxisFill\";\r\nimport { Axis } from \"./Axis\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { AxisRendererCircular } from \"./AxisRendererCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularProperties extends IAxisFillProperties {\r\n\r\n\t/**\r\n\t * Inner radius. Relative ir absolute.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius. Relative or absolute.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t */\r\n\tcornerRadius?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisFillCircular]].\r\n */\r\nexport interface IAxisFillCircularEvents extends IAxisFillEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisFillCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisFillCircularAdapters extends IAxisFillAdapters, IAxisFillCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Provides fill element functionality for circular Axes.\r\n *\r\n * @see {@link IAxisFillCircularEvents} for a list of available events\r\n * @see {@link IAxisFillCircularAdapters} for a list of available Adapters\r\n * @todo Needs description\r\n */\r\nexport class AxisFillCircular extends AxisFill {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisFillCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisFillCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisFillCircularEvents;\r\n\r\n\t/**\r\n\t * An SVG path, used to draw fill shape.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t */\r\n\tpublic fillPath: string;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Axis\r\n\t */\r\n\tconstructor(axis: Axis) {\r\n\t\tsuper(axis);\r\n\r\n\t\tthis.className = \"AxisFillCircular\";\r\n\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tif(this.__disabled || this.disabled){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\tthis.fillPath = renderer.getPositionRangePath(this.startPosition, this.endPosition, this.radius, $type.hasValue(this.innerRadius) ? this.innerRadius : renderer.innerRadius, this.cornerRadius);\r\n\t\t\tthis.path = this.fillPath;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the fill. Relative ([[Percent]]) or absolute (pixels).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Corner radius for the fill. In pixels.\r\n\t *\r\n\t * @param value  Corner radius (px)\r\n\t */\r\n\tpublic set cornerRadius(value: number) {\r\n\t\tthis.setPropertyValue(\"cornerRadius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Corner radius (px)\r\n\t */\r\n\tpublic get cornerRadius(): number {\r\n\t\treturn this.getPropertyValue(\"cornerRadius\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisFillCircular\"] = AxisFillCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisFillCircular.ts","/**\r\n * A module defining functionality for circular axis grid elements.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Grid, IGridProperties, IGridAdapters, IGridEvents } from \"./Grid\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[GridCircular]].\r\n */\r\nexport interface IGridCircularProperties extends IGridProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[GridCircular]].\r\n */\r\nexport interface IGridCircularEvents extends IGridEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GridCircular]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGridCircularAdapters extends IGridAdapters, IGridCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a circular grid element for circular-type axis.\r\n *\r\n * @see {@link IGridCircularEvents} for a list of available events\r\n * @see {@link IGridCircularAdapters} for a list of available Adapters\r\n * @todo Review: container is better, as we'll be able to attach something to the GridCircular, also with 3d charts we might need some additional elements\r\n */\r\nexport class GridCircular extends Grid {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGridCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGridCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGridCircularEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GridCircular\";\r\n\t\tthis.pixelPerfect = false;\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular grid. (absolute or relative)\r\n\t *\r\n\t * @param value Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GridCircular\"] = GridCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/GridCircular.ts","/**\r\n * Module, defining Axis Renderer for circular axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRenderer, IAxisRendererProperties, IAxisRendererAdapters, IAxisRendererEvents } from \"./AxisRenderer\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisFillCircular } from \"./AxisFillCircular\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { GridCircular } from \"./GridCircular\";\r\nimport { AxisLabelCircular } from \"./AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularProperties extends IAxisRendererProperties {\r\n\r\n\t/**\r\n\t * Start angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the circular axis in degrees (0-360).\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Outer radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the circular axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * Specifies if axis should use it's own start/end angles or the ones set on chart.\r\n\t */\r\n\tuseChartAngles?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererCircular]].\r\n */\r\nexport interface IAxisRendererCircularEvents extends IAxisRendererEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererCircularAdapters extends IAxisRendererAdapters, IAxisRendererCircularProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for circular axis.\r\n */\r\nexport class AxisRendererCircular extends AxisRenderer {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererCircularProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererCircularAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererCircularEvents;\r\n\r\n\t/**\r\n\t * Defines type of the grid elements.\r\n\t */\r\n\tpublic _gridType: GridCircular;\r\n\r\n\t/**\r\n\t * Defines type for the fill elements.\r\n\t */\r\n\tpublic _fillType: AxisFillCircular;\r\n\r\n\t/**\r\n\t * Defines type for the label elements.\r\n\t */\r\n\tpublic _labelType: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\r\n\t\t// axis.layout = \"none\"; // does not trigger redraw when size changes\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.className = \"AxisRendererCircular\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.useChartAngles = true;\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.grid.template.location = 0;\r\n\r\n\t\tthis.labels.template.location = 0;\r\n\t\tthis.labels.template.radius = 15;\r\n\r\n\t\tthis.ticks.template.location = 0;\r\n\t\tthis.ticks.template.pixelPerfect = false;\r\n\t\tthis.tooltipLocation = 0;\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t* @ignore\r\n\t*/\r\n\tpublic setAxis(axis: Axis) {\r\n\t\tsuper.setAxis(axis);\r\n\t\taxis.isMeasured = false;\r\n\r\n\t\t// modify x and y so that tooltip would always be on circle\r\n\t\tlet tooltip = axis.tooltip;\r\n\r\n\t\ttooltip.adapter.add(\"dx\", (x, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.cos(Math.atan2(point.y, point.x)) - point.x;\r\n\t\t});\r\n\r\n\t\ttooltip.adapter.add(\"dy\", (y, target) => {\r\n\t\t\tlet point: IPoint = $utils.svgPointToSprite({ x: target.pixelX, y: target.pixelY }, this);\r\n\t\t\treturn this.pixelRadius * Math.sin(Math.atan2(point.y, point.x)) - point.y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn 2 * Math.PI * this.pixelRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"radius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"innerRadius\", value, false, false, 10, false)) {\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if axis should use its own `startAngle` and `endAngle` or\r\n\t * inherit them from relative properties from chart.\r\n\t *\r\n\t * @default false\r\n\t * @param value  Use chart's angles\r\n\t */\r\n\tpublic set useChartAngles(value: boolean) {\r\n\t\tthis.setPropertyValue(\"useChartAngles\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Use chart angles\r\n\t */\r\n\tpublic get useChartAngles(): boolean {\r\n\t\treturn this.getPropertyValue(\"useChartAngles\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet coordinate: number = this.positionToCoordinate(position);\r\n\t\tlet angle: number = this.startAngle + (this.endAngle - this.startAngle) * coordinate / this.axisLength;\r\n\t\treturn { x: this.pixelRadius * $math.cos(angle), y: this.pixelRadius * $math.sin(angle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position (0-1) on axis to angle in degrees (0-360).\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic positionToAngle(position: number): number {\r\n\t\tlet axis: Axis = this.axis;\r\n\r\n\t\tlet arc: number = (this.endAngle - this.startAngle) / (axis.end - axis.start);\r\n\r\n\t\tlet angle: number;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tangle = this.startAngle + (axis.end - position) * arc;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tangle = this.startAngle + (position - axis.start) * arc;\r\n\t\t}\r\n\r\n\t\treturn $math.round(angle, 3);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\t\tthis.line.path = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius, radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: GridCircular, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif ($type.isNumber(point.x) && $type.isNumber(point.y) && grid.element) {\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet radius: number = $utils.relativeRadiusToValue($type.hasValue(grid.radius) ? grid.radius : percent(100), this.pixelRadius);\r\n\r\n\t\t\tlet gridInnerRadius = $utils.relativeRadiusToValue(grid.innerRadius, this.pixelRadius);\r\n\t\t\tgrid.zIndex = 0;\r\n\r\n\t\t\tlet innerRadius: number = $utils.relativeRadiusToValue($type.isNumber(gridInnerRadius) ? gridInnerRadius : this.innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick         Tick element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number, endPosition: number) {\r\n\r\n\t\tposition = position + (endPosition - position) * tick.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (tick.element) {\r\n\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\r\n\t\t\tlet tickLength: number = tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength = -tickLength;\r\n\t\t\t}\r\n\t\t\ttick.zIndex = 1;\r\n\t\t\ttick.path = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) }) + $path.lineTo({ x: (radius + tickLength) * $math.cos(angle), y: (radius + tickLength) * $math.sin(angle) });\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet angle: number = $math.DEGREES * Math.atan2(point.y, point.x);\t\t\r\n\r\n\t\tpoint = { x: radius * $math.cos(angle), y: radius * $math.sin(angle) }\r\n\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlabel.fixPosition(this.positionToAngle(position), this.pixelRadius);\r\n\t\tlabel.zIndex = 2;\r\n\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees (0-360).\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tthis.axis.invalidateSeries();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number, radius?: number | Percent, innerRadius?: number | Percent, cornerRadius?: number): string {\r\n\t\tlet path: string = \"\";\r\n\t\tif ($type.isNumber(startPosition) && $type.isNumber(endPosition)) {\r\n\r\n\t\t\tif (!$type.hasValue(radius)) {\r\n\t\t\t\tradius = this.radius;\r\n\t\t\t}\r\n\r\n\t\t\tstartPosition = $math.max(startPosition, this.axis.start);\r\n\t\t\tendPosition = $math.min(endPosition, this.axis.end);\r\n\r\n\t\t\tif (endPosition < startPosition) {\r\n\t\t\t\tendPosition = startPosition;\r\n\t\t\t}\r\n\r\n\t\t\tlet pixelRadius: number = $utils.relativeRadiusToValue(radius, this.pixelRadius);\r\n\t\t\tlet pixelInnerRadius: number = $utils.relativeRadiusToValue(innerRadius, this.pixelRadius, true);\r\n\r\n\t\t\tlet startAngle: number = this.positionToAngle(startPosition);\r\n\t\t\tlet endAngle: number = this.positionToAngle(endPosition);\r\n\r\n\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\tpath = $path.arc(startAngle, arc, pixelRadius, pixelInnerRadius, pixelRadius, cornerRadius);\r\n\t\t}\r\n\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new grid element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Grid element\r\n\t */\r\n\tpublic createGrid(): this[\"_gridType\"] {\r\n\t\treturn new GridCircular();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new fill element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Fill element\r\n\t */\r\n\tpublic createFill(axis: Axis): this[\"_fillType\"] {\r\n\t\treturn new AxisFillCircular(axis);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new label element, suitable for this Axis Renderer type.\r\n\t *\r\n\t * @return Label element\r\n\t */\r\n\tpublic createLabel(): this[\"_labelType\"] {\r\n\t\treturn new AxisLabelCircular();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet angle = $math.fitAngleToRange($math.getAngle(point), this.startAngle, this.endAngle);\r\n\t\treturn this.coordinateToPosition((angle - this.startAngle) / 360 * this.axisLength);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererCircular\"] = AxisRendererCircular;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererCircular.ts","/**\r\n * Module, defining Axis Renderer for radial axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"./AxisRendererY\";\r\nimport { Axis } from \"./Axis\";\r\nimport { AxisTick } from \"./AxisTick\";\r\nimport { CategoryAxis } from \"./CategoryAxis\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { Grid } from \"./Grid\";\r\nimport { AxisBreak } from \"./AxisBreak\";\r\nimport { WavedCircle } from \"../../core/elements/WavedCircle\";\r\nimport { PointerOrientation } from \"../../core/elements/Tooltip\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisBullet } from \"./AxisBullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialProperties extends IAxisRendererYProperties {\r\n\r\n\t/**\r\n\t * Start angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * End angle of the radial axis in degrees. (0-360)\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * A grid type to display: \"circles\" or \"polygons\".\r\n\t *\r\n\t * @default \"circles\"\r\n\t */\r\n\tgridType?: \"circles\" | \"polygons\"; //@todo: move it to GridRadial?\r\n\r\n\t/**\r\n\t * An angle of the axis in degrees. (0-360)\r\n\t */\r\n\taxisAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * Outer radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the radial axis.\r\n\t *\r\n\t * Can either be absolute (pixels) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[AxisRendererRadial]].\r\n */\r\nexport interface IAxisRendererRadialEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRenderer]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererRadialAdapters extends IAxisRendererYAdapters, IAxisRendererRadialProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A renderer for radial axis.\r\n */\r\nexport class AxisRendererRadial extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererRadialProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererRadialAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererRadialEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<RadarChart>();\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic pixelRadiusReal: number = 0;\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererRadial\";\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\t\tthis.minGridDistance = 30;\r\n\t\tthis.gridType = \"circles\";\r\n\t\tthis.axisAngle = -90;\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.radius = percent(100);\r\n\r\n\t\tthis.line.strokeOpacity = 0;\r\n\r\n\t\tthis.labels.template.horizontalCenter = \"middle\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates Axis renderer.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart && this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns actual length of the Axis, in pixels.\r\n\t *\r\n\t * @return Length (px)\r\n\t */\r\n\tpublic get axisLength(): number {\r\n\t\treturn this.pixelRadius - this.pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the axis.\r\n\t *\r\n\t * Can be absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false)\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.innerRadius, this.pixelRadiusReal) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: RadarChart) {\r\n\t\tthis._chart.set(chart, null);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): RadarChart {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position on axis to point coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Point\r\n\t */\r\n\tpublic positionToPoint(position: number): IPoint {\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(position), 0, Infinity);\r\n\t\treturn { x: radius * $math.cos(this.axisAngle), y: radius * $math.sin(this.axisAngle) };\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the axis line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateAxisLine() {\r\n\t\tthis.line.path = $path.moveTo({ x: this.pixelInnerRadius * $math.cos(this.axisAngle), y: this.pixelInnerRadius * $math.sin(this.axisAngle) }) + $path.lineTo({ x: this.pixelRadius * $math.cos(this.axisAngle), y: this.pixelRadius * $math.sin(this.axisAngle) });\r\n\r\n\t\tlet title = this.axis.title;\r\n\t\ttitle.valign = \"none\";\r\n\t\ttitle.horizontalCenter = \"middle\";\r\n\t\ttitle.verticalCenter = \"bottom\";\r\n\t\ttitle.y = - this.axisLength / 2;\r\n\t\tlet rotation: number = 90;\r\n\t\tif (this.opposite) {\r\n\t\t\tif (!this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this.inside) {\r\n\t\t\t\trotation = -90;\r\n\t\t\t}\r\n\t\t}\r\n\t\ttitle.rotation = rotation;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tlet path: string;\r\n\t\tlet radius: number = $math.getDistance(point);\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\tif ($type.isNumber(radius) && grid.element) {\r\n\t\t\tlet chart = this.chart;\r\n\t\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\t\tlet count = chart.dataItems.length;\r\n\t\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t\t// polygons are only possible if x axis is present\r\n\t\t\t// @todo: review this\r\n\t\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius, radius);\r\n\t\t\t}\r\n\t\t\tgrid.path = path;\r\n\t\t}\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a label element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param label        Label element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  Ending position\r\n\t */\r\n\tpublic updateLabelElement(label: this[\"_labelType\"], position: number, endPosition: number, location?: number) {\r\n\r\n\t\tif (!$type.hasValue(location)) {\r\n\t\t\tlocation = label.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tthis.positionItem(label, point);\r\n\t\tthis.toggleVisibility(label, position, this.minLabelPosition, this.maxLabelPosition);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\t// @todo? zero grid for radar chart, is it needed?\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point Point coordinates\r\n\t * @return Fits?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Start angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\t// do not normalize angle here!\r\n\t\tif (this.setPropertyValue(\"startAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\t// do not normalize angel here!\r\n\t\tif (this.setPropertyValue(\"endAngle\", value)) {\r\n\t\t\tthis.invalidateAxisItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the radial axis in degrees. (0-360)\r\n\t *\r\n\t * @param value  Axis angle\r\n\t */\r\n\tpublic set axisAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"axisAngle\", $math.normalizeAngle(value));\r\n\t\tthis.invalidateAxisItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis angle\r\n\t */\r\n\tpublic get axisAngle(): number {\r\n\t\treturn this.getPropertyValue(\"axisAngle\");\r\n\t\t//return $math.fitToRange(this.getPropertyValue(\"axisAngle\"), this.startAngle, this.endAngle); // no good, as less flexible\r\n\t}\r\n\r\n\t// polygons grid type is only possible under these conditions: xAxis is available and it is CategoryAxis, also at least one series should be added to a chart\r\n\r\n\t/**\r\n\t * Grid type for radial axis.\r\n\t *\r\n\t * A grid on radia axis can either be perfect circles (\"circles\"), or\r\n\t * straight lines (\"polygons\").\r\n\t *\r\n\t * @default \"circles\"\r\n\t * @param value  Grid type\r\n\t */\r\n\tpublic set gridType(value: \"circles\" | \"polygons\") {\r\n\t\tthis.setPropertyValue(\"gridType\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Grid type\r\n\t */\r\n\tpublic get gridType(): \"circles\" | \"polygons\" {\r\n\t\tlet axis: Axis = this.chart.xAxes.getIndex(0);\r\n\t\tif (axis instanceof CategoryAxis) {\r\n\t\t\treturn this.getPropertyValue(\"gridType\");\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn \"circles\";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * [getPositionRangePath description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param startPosition  Starting position\r\n\t * @param endPosition    End position\r\n\t * @return SVG path\r\n\t */\r\n\tpublic getPositionRangePath(startPosition: number, endPosition: number): string {\r\n\t\tlet pixelInnerRadius = this.pixelInnerRadius;\r\n\t\tlet pixelRadius = this.axisLength + pixelInnerRadius;\r\n\t\tlet innerRadius: number = $math.fitToRange(this.positionToCoordinate(startPosition), pixelInnerRadius, pixelRadius);\r\n\t\tlet radius: number = $math.fitToRange(this.positionToCoordinate(endPosition), pixelInnerRadius, pixelRadius);\r\n\r\n\t\t//let angleCount: number = this.angleCount;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\tlet path: string;\r\n\r\n\t\tlet chart = this.chart;\r\n\t\tlet xAxis = chart.xAxes.getIndex(0);\r\n\t\tlet count = chart.dataItems.length;\r\n\t\tlet series = chart.series.getIndex(0);\r\n\r\n\t\t// polygons are only possible if x axis is present\r\n\t\t// @todo: review this\r\n\t\tif (this.gridType == \"polygons\" && count > 0 && series && xAxis && xAxis instanceof CategoryAxis) {\r\n\t\t\tlet gridLocation = xAxis.renderer.grid.template.location;\r\n\r\n\t\t\tlet angle: number = xAxis.getAngle(series.dataItems.getIndex(0), \"categoryX\", gridLocation);\r\n\t\t\tpath = $path.moveTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\tlet count: number = chart.dataItems.length;\r\n\r\n\t\t\tfor (let i = 1; i < count; i++) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t}\r\n\r\n\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(count - 1), \"categoryX\", xAxis.renderer.cellEndLocation);\r\n\t\t\tpath += $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\r\n\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\r\n\t\t\tfor (let i = count - 1; i >= 0; i--) {\r\n\t\t\t\tangle = xAxis.getAngle(series.dataItems.getIndex(i), \"categoryX\", gridLocation);\r\n\t\t\t\tpath += $path.lineTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) });\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpath = $path.arc(startAngle, arc, radius, innerRadius);\r\n\t\t}\r\n\t\treturn path;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions an axis break element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Break element\r\n\t */\r\n\tpublic updateBreakElement(axisBreak: AxisBreak) {\r\n\t\t// @todo: someday we might need axis break when gridType is polygons\r\n\r\n\t\tlet startLine: WavedCircle = <WavedCircle>axisBreak.startLine;\r\n\t\tlet endLine: WavedCircle = <WavedCircle>axisBreak.endLine;\r\n\t\tlet fillShape: WavedCircle = <WavedCircle>axisBreak.fillShape;\r\n\r\n\t\tlet startPoint: IPoint = axisBreak.startPoint;\r\n\t\tlet endPoint: IPoint = axisBreak.endPoint;\r\n\r\n\t\tstartLine.radius = Math.abs(startPoint.y);\r\n\t\tendLine.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.radius = Math.abs(endPoint.y);\r\n\t\tfillShape.innerRadius = Math.abs(startPoint.y);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates visual elements for and axis break.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axisBreak Axis break\r\n\t */\r\n\tpublic createBreakSprites(axisBreak: AxisBreak): void {\r\n\t\taxisBreak.startLine = new WavedCircle();\r\n\t\taxisBreak.endLine = new WavedCircle();\r\n\t\taxisBreak.fillShape = new WavedCircle();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates some of the Axis tooltip's visual properties, related to\r\n\t * rendering of the Axis.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateTooltip(): void {\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tif (axis) {\r\n\r\n\t\t\tlet bigNum: number = 4000;\r\n\t\t\tlet bbx: number = -4000;\r\n\t\t\tlet bby: number = -4000;\r\n\t\t\tlet bbw: number = bigNum * 2;\r\n\t\t\tlet bbh: number = bigNum * 2;\r\n\t\t\tlet axisAngle: number = this.axisAngle;\r\n\t\t\tif (axisAngle < 0) {\r\n\t\t\t\taxisAngle += 360;\r\n\t\t\t}\r\n\t\t\tlet tooltipOrientation: PointerOrientation = \"vertical\";\r\n\t\t\tif ((axisAngle > 45 && axisAngle < 135) || (axisAngle > 225 && axisAngle < 315)) {\r\n\t\t\t\ttooltipOrientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\tthis.axis.updateTooltip(tooltipOrientation, { x: bbx, y: bby, width: bbw, height: bbh });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param tick      Tick element\r\n\t * @param position  Position\r\n\t */\r\n\tpublic updateTickElement(tick: AxisTick, position: number): void {\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (tick.element) {\r\n\t\t\tlet angle: number = $math.normalizeAngle(this.axisAngle + 90);\r\n\t\t\tif (angle / 90 != Math.round(angle / 90)) {\r\n\t\t\t\ttick.pixelPerfect = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttick.pixelPerfect = true;\r\n\t\t\t}\r\n\t\t\tlet tickLength = -tick.length;\r\n\t\t\tif (tick.inside) {\r\n\t\t\t\ttickLength *= -1;\r\n\t\t\t}\r\n\t\t\ttick.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: tickLength * $math.cos(angle), y: tickLength * $math.sin(angle) });\r\n\t\t}\r\n\t\tthis.positionItem(tick, point);\r\n\r\n\t\tthis.toggleVisibility(tick, position, 0, 1);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Updates and positions axis bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet       AxisBullet element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateBullet(bullet: Sprite, position: number, endPosition: number): void {\r\n\t\tlet location = 0.5;\r\n\t\tif (bullet instanceof AxisBullet) {\r\n\t\t\tlocation = bullet.location;\r\n\t\t}\r\n\r\n\t\tposition = position + (endPosition - position) * location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\t\r\n\t\tthis.positionItem(bullet, point);\r\n\r\n\t\tthis.toggleVisibility(bullet, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a position on the axis to a coordinate in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinate (px)\r\n\t */\r\n\tpublic positionToCoordinate(position: number): number {\r\n\t\tlet coordinate: number;\r\n\t\tlet axis: Axis = this.axis;\r\n\t\tlet axisFullLength = axis.axisFullLength;\r\n\t\tlet innerRadius = this.pixelInnerRadius;\r\n\r\n\t\tif (axis.renderer.inversed) {\r\n\t\t\tcoordinate = (axis.end - position) * axisFullLength + innerRadius;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcoordinate = (position - axis.start) * axisFullLength + innerRadius;\r\n\t\t}\r\n\r\n\t\treturn $math.round(coordinate, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Converts a point at specific coordinates to a relative position (0-1)\r\n\t * on the axis.\r\n\t *\r\n\t * @param point  Point\r\n\t * @return Position (0-1)\r\n\t */\r\n\tpublic pointToPosition(point: IPoint) {\r\n\t\tlet coordinate = ($math.getDistance(point) - this.pixelInnerRadius);\r\n\t\treturn this.coordinateToPosition(coordinate);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererRadial\"] = AxisRendererRadial;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererRadial.ts","/**\r\n * Radar chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { RadarSeries } from \"../series/RadarSeries\";\r\nimport { RadarColumnSeries } from \"../series/RadarColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { RadarCursor } from \"../cursors/RadarCursor\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarChartDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarChart]].\r\n */\r\nexport interface IRadarChartDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarChart]].\r\n */\r\nexport interface IRadarChartProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Radius of the Radar face. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Radar face. Percent value is relative to radius.\r\n\t *\r\n\t * @todo review desc\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarChart]].\r\n */\r\nexport interface IRadarChartEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarChartAdapters extends IXYChartAdapters, IRadarChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Radar chart.\r\n *\r\n * @see {@link IRadarChartEvents} for a list of available Events\r\n * @see {@link IRadarChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/radar-chart/} for documentation\r\n * @important\r\n */\r\nexport class RadarChart extends XYChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IRadarChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: RadarSeries | RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tpublic _xAxisRendererType: AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tpublic _yAxisRendererType: AxisRendererRadial;\r\n\r\n\t/**\r\n\t * Defines X axis renderer type.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererCircular = AxisRendererCircular;\r\n\r\n\t/**\r\n\t * Defines Y axis renderer type.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererRadial = AxisRendererRadial;\r\n\r\n\t/**\r\n\t * [_cursor description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tpublic _cursor: RadarCursor;\r\n\r\n\t/**\r\n\t * A container that holds Radar visual elements.\r\n\t */\r\n\tpublic radarContainer: Container;\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected _pixelInnerRadius: number;\r\n\r\n\r\n\t/**\r\n\t * used by cursor. We adjust innerradius if start and end angle are close to each other\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic innerRadiusModifyer: number = 1;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarChart\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\t\tthis.innerRadius = 0;\r\n\r\n\t\tlet radarContainer = this.plotContainer.createChild(Container);\r\n\t\tradarContainer.shouldClone = false;\r\n\t\tradarContainer.layout = \"absolute\";\r\n\t\tradarContainer.align = \"center\";\r\n\t\tradarContainer.valign = \"middle\";\r\n\r\n\t\tthis.seriesContainer.parent = radarContainer;\r\n\t\tthis.radarContainer = radarContainer;\r\n\t\tthis.bulletsContainer.parent = radarContainer;\r\n\t\tthis.axisBulletsContainer = radarContainer;\r\n\r\n\t\tthis._cursorContainer = radarContainer;\r\n\r\n\t\tthis._bulletMask = radarContainer.createChild(Circle);\r\n\t\tthis._bulletMask.shouldClone = false;\r\n\t\tthis._bulletMask.element = this.paper.add(\"path\");\r\n\t\tthis._bulletMask.opacity = 0;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Radar chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates Axis with required properties for this chart.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tprotected processAxis(axis: Axis): void {\r\n\t\tsuper.processAxis(axis);\r\n\t\tlet renderer: AxisRenderer = axis.renderer;\r\n\t\trenderer.gridContainer.parent = renderer;\r\n\t\trenderer.breakContainer.parent = renderer;\r\n\t\taxis.parent = this.radarContainer;\r\n\t\trenderer.toBack();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all X axes after range change event.\r\n\t */\r\n\tprotected handleXAxisRangeChange() {\r\n\t\tsuper.handleXAxisRangeChange();\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Updates all Y axes after range change event.\r\n\t */\r\n\tprotected handleYAxisRangeChange() {\r\n\t\tsuper.handleYAxisRangeChange();\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\taxis.invalidate();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up cursor\r\n\t\t\tif ($type.hasValue(config.cursor) && !$type.hasValue(config.cursor.type)) {\r\n\t\t\t\tconfig.cursor.type = \"RadarCursor\";\r\n\t\t\t}\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"RadarSeries\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Set up axes\r\n\t\t\t/*if ($type.hasValue(config.xAxes) && $type.isArray(config.xAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.xAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.xAxes[i].type = config.xAxes[i].type || \"AxisRendererCircular\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxes) && $type.isArray(config.yAxes)) {\r\n\t\t\t\tfor (let i = 0, len = config.yAxes.length; i < len; i++) {\r\n\t\t\t\t\tconfig.yAxes[i].type = config.yAxes[i].type || \"AxisRendererRadial\";\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Does calculations before drawing the chart.\r\n\t */\r\n\tprotected beforeDraw(): void {\r\n\t\tsuper.beforeDraw();\r\n\r\n\t\tlet plotContainer = this.plotContainer;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\tlet wr = plotContainer.innerWidth / rect.width;\r\n\t\tlet hr = plotContainer.innerHeight / rect.height;\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tlet value = innerRadius.value;\r\n\t\t\tlet mr = Math.min(wr, hr);\r\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(plotContainer.innerHeight, plotContainer.innerWidth)) / mr;\r\n\t\t\tinnerRect = $math.getArcRect(this.startAngle, this.endAngle, value);\r\n\r\n\t\t\tthis.innerRadiusModifyer = value / innerRadius.value;\r\n\t\t\tinnerRadius = percent(value * 100);\r\n\t\t}\r\n\t\t// @todo handle this when innerRadius set in pixels (do it for pie also)\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(plotContainer.innerWidth / rect.width, plotContainer.innerHeight / rect.height);\r\n\r\n\t\tlet diameter = $utils.relativeRadiusToValue(this.radius, maxRadius) * 2 || 0;\r\n\t\tlet radius = diameter / 2;\r\n\t\tlet startAngle = this.startAngle;\r\n\t\tlet endAngle = this.endAngle;\r\n\r\n\t\tthis._pixelInnerRadius = $utils.relativeRadiusToValue(innerRadius, radius);\r\n\r\n\t\tthis._bulletMask.path = $path.arc(startAngle, endAngle - startAngle, radius, this._pixelInnerRadius);\r\n\r\n\t\t$iter.each(this.xAxes.iterator(), (axis) => {\r\n\t\t\tif(axis.renderer.useChartAngles){\r\n\t\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\t\taxis.renderer.endAngle = endAngle;\r\n\t\t\t}\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\t$iter.each(this.yAxes.iterator(), (axis) => {\r\n\t\t\taxis.renderer.startAngle = startAngle;\r\n\t\t\taxis.renderer.endAngle = endAngle;\r\n\r\n\t\t\taxis.width = diameter;\r\n\t\t\taxis.height = diameter;\r\n\t\t\t//axis.renderer.width = diameter;\r\n\t\t\t//axis.renderer.height = diameter;\r\n\t\t\taxis.renderer.pixelRadiusReal = radius;\r\n\t\t\taxis.renderer.innerRadius = innerRadius;\r\n\t\t});\r\n\r\n\t\tlet cursor = this.cursor;\r\n\t\tif (cursor) {\r\n\t\t\tcursor.width = diameter;\r\n\t\t\tcursor.height = diameter;\r\n\t\t\tcursor.startAngle = startAngle;\r\n\t\t\tcursor.endAngle = endAngle;\r\n\t\t}\r\n\r\n\t\tthis.radarContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.radarContainer.validatePosition();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series, suitable for RadarChart.\r\n\t *\r\n\t * @return New Series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new RadarSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius in pixels\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\t\treturn this._pixelInnerRadius;\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * If set in Percent, it will be relative to `radius`. (outer radius)\r\n\t *\r\n\t * @param value Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the horizontal (X) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateXAxis(renderer: AxisRenderer) {\r\n\t\t//do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers (re)rendering of the vertical (Y) axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param axis Axis\r\n\t */\r\n\tpublic updateYAxis(renderer: AxisRenderer) {\r\n\t\t// do not call super!\r\n\t\tif (renderer) {\r\n\t\t\trenderer.processRenderer();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarChart\"] = RadarChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/RadarChart.ts","/**\r\n * Functionality for drawing simple ClockHands\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { Trapezoid } from \"../../core/elements/Trapezoid\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { GaugeChart } from \"../types/GaugeChart\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ClockHand]].\r\n */\r\nexport interface IClockHandProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(100)\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's tip.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendWidth: number;\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's base.\r\n\t *\r\n\t * @default 5\r\n\t */\r\n\tstartWidth: number;\r\n\r\n\t/**\r\n\t * rotation direction\r\n\t * @default \"any\"\r\n\t */\r\n\trotationDirection: \"any\" | \"clockWise\" | \"CounterClockWise\";\r\n}\r\n\r\n/**\r\n * Defines events for [[ClockHand]].\r\n */\r\nexport interface IClockHandEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ClockHand]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IClockHandAdapters extends IContainerAdapters, IClockHandProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * ClockHand class is capable of drawing a simple pointy shape with optionally\r\n * rounderd corners and an icon.\r\n *\r\n * @see {@link IClockHandEvents} for a list of available events\r\n * @see {@link IClockHandAdapters} for a list of available Adapters\r\n * @todo Improve\r\n * @important\r\n */\r\nexport class ClockHand extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IClockHandProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IClockHandAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IClockHandEvents;\r\n\r\n\t/**\r\n\t * A circle element used as hand's base.\r\n\t */\r\n\tprotected _pin: Circle;\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t */\r\n\tprotected _hand: Trapezoid;\r\n\r\n\t/**\r\n\t * An Axis hand is related to.\r\n\t */\r\n\tprotected _axis: MutableValueDisposer<Axis> = new MutableValueDisposer<Axis>();\r\n\r\n\t/**\r\n\t * Hand's current value.\r\n\t */\r\n\tprotected _value: any;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ClockHand\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tthis.stroke = this.fill;\r\n\r\n\t\tlet pin: Circle = new Circle();\r\n\t\tpin.radius = 5;\r\n\t\tthis.pin = pin;\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startWidth = 5;\r\n\t\tthis.endWidth = 1;\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\tlet hand: Trapezoid = new Trapezoid();\r\n\t\tthis.hand = hand;\r\n\r\n\t\tthis._disposers.push(this._axis);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Re(validates) the clock hand, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet hand = this.hand;\r\n\t\thand.width = this.pixelWidth;\r\n\t\tlet h: number = Math.max(this.startWidth, this.endWidth);\r\n\t\thand.height = h;\r\n\t\thand.leftSide = percent(this.startWidth / h * 100);\r\n\t\thand.rightSide = percent(this.endWidth / h * 100);\r\n\r\n\t\tif (this.axis) {\r\n\t\t\tlet renderer: AxisRendererCircular = <AxisRendererCircular>this.axis.renderer;\r\n\r\n\t\t\tlet x0: number = $utils.relativeRadiusToValue(this.innerRadius, renderer.pixelRadius);\r\n\t\t\tlet x1: number = $utils.relativeRadiusToValue(this.radius, renderer.pixelRadius);\r\n\r\n\t\t\thand.x = x0;\r\n\t\t\thand.y = - h / 2;\r\n\r\n\t\t\thand.width = x1 - x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A circle element used as hand's base. (pin)\r\n\t *\r\n\t * @param pin  Pin element\r\n\t */\r\n\tpublic set pin(pin: Circle) {\r\n\t\tif (this._pin) {\r\n\t\t\tthis.removeDispose(this._pin);\r\n\t\t}\r\n\t\tif (pin) {\r\n\t\t\tthis._pin = pin;\r\n\t\t\tpin.parent = this;\r\n\t\t\tthis._disposers.push(pin);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Pin element\r\n\t */\r\n\tpublic get pin(): Circle {\r\n\t\treturn this._pin;\r\n\t}\r\n\r\n\t/**\r\n\t * A trapezoid shape used for hand itself.\r\n\t *\r\n\t * The shape of the trapezoid is controlled by ClockHand's `startWidth` and\r\n\t * `endWidth` properties.\r\n\t *\r\n\t * Set `endWidth` to 1 (px) to make it pointy.\r\n\t *\r\n\t * @param hand  Hand element\r\n\t */\r\n\tpublic set hand(hand: Trapezoid) {\r\n\t\tif (this._hand) {\r\n\t\t\tthis.removeDispose(this._hand);\r\n\t\t}\r\n\t\tif (hand) {\r\n\t\t\tthis._hand = hand;\r\n\t\t\thand.parent = this;\r\n\t\t\tthis._disposers.push(hand);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Hand element\r\n\t */\r\n\tpublic get hand(): Trapezoid {\r\n\t\treturn this._hand;\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's outer end. (tip)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Radius of the hand's inner end. (base)\r\n\t *\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @default Percent(0)\r\n\t * @param value  Radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's inner end. (base)\r\n\t *\r\n\t * @default 5\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set startWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"startWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get startWidth(): number {\r\n\t\treturn this.getPropertyValue(\"startWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width, in pixels, of the clock hand's outer end. (tip)\r\n\t *\r\n\t * @default 1\r\n\t * @param value  Width (px)\r\n\t */\r\n\tpublic set endWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"endWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Width (px)\r\n\t */\r\n\tpublic get endWidth(): number {\r\n\t\treturn this.getPropertyValue(\"endWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Rotation direction\r\n\t *\r\n\t * @default any\r\n\t * @param value\r\n\t */\r\n\tpublic set rotationDirection(value: \"any\" | \"clockWise\" | \"counterClockWise\") {\r\n\t\tthis.setPropertyValue(\"rotationDirection\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return rotationDirection\r\n\t */\r\n\tpublic get rotationDirection(): \"any\" | \"clockWise\" | \"counterClockWise\" {\r\n\t\treturn this.getPropertyValue(\"rotationDirection\");\r\n\t}\r\n\r\n\t/**\r\n\t * Moves clock hand to particular value.\r\n\t *\r\n\t * If `duration` is set to a number in milliseconds, the hand will move\r\n\t * to the new position gracefully, rather than jumping rigth to it.\r\n\t *\r\n\t * Alternatively, you can also set `value` directly.\r\n\t *\r\n\t * @param value     New value\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param easing  Animation easing function\r\n\t */\r\n\tpublic showValue(value: any, duration?: number, easing?: (value: number) => number): void {\r\n\t\tthis._value = value;\r\n\t\tif (value != undefined) {\r\n\t\t\tif (!$type.isNumber(duration)) {\r\n\t\t\t\tduration = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.axis) {\r\n\t\t\t\tlet renderer = <AxisRendererCircular>this.axis.renderer;\r\n\t\t\t\tlet newAngle = renderer.positionToAngle(this.axis.anyToPosition(value));\r\n\t\t\t\tlet currentAngle = this.rotation;\r\n\r\n\t\t\t\tif (this.rotationDirection == \"clockWise\") {\r\n\t\t\t\t\tif (newAngle < currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle - 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.rotationDirection == \"counterClockWise\") {\r\n\t\t\t\t\tif (newAngle > currentAngle) {\r\n\t\t\t\t\t\tthis.rotation = currentAngle + 360;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.animate({ property: \"rotation\", to: newAngle }, duration, easing);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A current value clock hand is pointing to.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: any) {\r\n\t\tthis.showValue(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): any {\r\n\t\treturn this._value;\r\n\t}\r\n\r\n\t/**\r\n\t * An Axis clock hand is associated with.\r\n\t *\r\n\t * Hand's `value` relates to values on the Axis.\r\n\t *\r\n\t * @param axis  Axis\r\n\t */\r\n\tpublic set axis(axis: Axis) {\r\n\t\tif (this.axis != axis) {\r\n\t\t\tthis._axis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.events.on(\"datavalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"datarangechanged\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"dataitemsvalidated\", this.updateValue, this, false),\r\n\t\t\t\taxis.events.on(\"propertychanged\", this.invalidate, this, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t\tif (axis) {\r\n\t\t\tlet chart: GaugeChart = <GaugeChart>axis.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tthis.rotation = chart.startAngle;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.parent = axis.renderer;\r\n\t\tthis.zIndex = 5;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Axis\r\n\t */\r\n\tpublic get axis(): Axis {\r\n\t\treturn this._axis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Triggers `value` accessor, so that Hand animates to new position, in case\r\n\t * value has changed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateValue() {\r\n\t\tthis.value = this.value;\r\n\t}\r\n\r\n\t/**\r\n * Processes JSON-based config before it is applied to the object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param config  Config\r\n */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Connect clock hands with axes\r\n\t\t\tif ($type.hasValue(config.axis) && $type.isString(config.axis) && this.map.hasKey(config.axis)) {\r\n\t\t\t\tconfig.axis = this.map.getKey(config.axis);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ClockHand\"] = ClockHand;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ClockHand.ts","/**\r\n * Module for building Gauge charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart, IRadarChartProperties, IRadarChartDataFields, IRadarChartAdapters, IRadarChartEvents, RadarChartDataItem } from \"./RadarChart\";\r\nimport { ListTemplate, IListEvents, ListDisposer } from \"../../core/utils/List\";\r\nimport { ClockHand } from \"../elements/ClockHand\";\r\nimport { Ordering } from \"../../core/utils/Order\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[GaugeChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class GaugeChartDataItem extends RadarChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: GaugeChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartDataFields extends IRadarChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartProperties extends IRadarChartProperties { }\r\n\r\n/**\r\n * Defines events for [[GaugeChart]].\r\n */\r\nexport interface IGaugeChartEvents extends IRadarChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[GaugeChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IGaugeChartAdapters extends IRadarChartAdapters, IGaugeChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Gauge chart.\r\n *\r\n * @see {@link IGaugeChartEvents} for a list of available Events\r\n * @see {@link IGaugeChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/gauge-chart/} for documentation\r\n * @important\r\n */\r\nexport class GaugeChart extends RadarChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IGaugeChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IGaugeChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IGaugeChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IGaugeChartEvents;\r\n\r\n\t/**\r\n\t * A list of [[ClockHand]] items displayed on this Gauge chart.\r\n\t */\r\n\tpublic hands: ListTemplate<ClockHand>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"GaugeChart\";\r\n\r\n\t\tthis.startAngle = 180;\r\n\t\tthis.endAngle = 360;\r\n\r\n\t\tthis.hands = new ListTemplate<ClockHand>(new ClockHand());\r\n\t\tthis.hands.events.on(\"inserted\", this.processHand, this, false);\r\n\r\n\t\tthis._disposers.push(new ListDisposer(this.hands));\r\n\t\tthis._disposers.push(this.hands.template);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Gauge chart\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decorates a [[ClockHand]] when it is added to the chart.\r\n\t *\r\n\t * @param event  Event\r\n\t */\r\n\tprotected processHand(event: IListEvents<ClockHand>[\"inserted\"]): void {\r\n\t\tlet hand: ClockHand = event.newValue;\r\n\t\tif (!hand.axis) {\r\n\t\t\thand.axis = this.xAxes.getIndex(0);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This function is used to sort element's JSON config properties, so that\r\n\t * some properties that absolutely need to be processed last, can be put at\r\n\t * the end.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param a  Element 1\r\n\t * @param b  Element 2\r\n\t * @return Sorting number\r\n\t */\r\n\tprotected configOrder(a: string, b: string): Ordering {\r\n\t\tif (a == b) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\t// Must come last\r\n\t\telse if (a == \"hands\") {\r\n\t\t\treturn 1;\r\n\t\t}\r\n\t\telse if (b == \"hands\") {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.configOrder(a, b);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"GaugeChart\"] = GaugeChart;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/GaugeChart.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieSeries, PieSeriesDataItem, IPieSeriesDataFields, IPieSeriesProperties, IPieSeriesAdapters, IPieSeriesEvents } from \"../series/PieSeries\";\r\nimport { PieChart3D } from \"../types/PieChart3D\";\r\nimport { Slice3D } from \"../../core/elements/3d/Slice3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieSeries3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieSeries3DDataItem extends PieSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines type of the slice represented by this data item.\r\n\t */\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieSeries3D;\r\n\r\n\t/**\r\n\t * @todo Remove?\r\n\t * @deprecated\r\n\t */\r\n\tpublic component: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3DDataItem\";\r\n\r\n\t\tthis.values.depthValue = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Slice depth (height).\r\n\t *\r\n\t * @param value  Depth\r\n\t */\r\n\tpublic set depthValue(value: number) {\r\n\t\tthis.setValue(\"depthValue\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth\r\n\t */\r\n\tpublic get depthValue(): number {\r\n\t\treturn this.values[\"depthValue\"].value;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DDataFields extends IPieSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds 3D slice depth (height).\r\n\t */\r\n\tdepthValue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DProperties extends IPieSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieSeries3D]].\r\n */\r\nexport interface IPieSeries3DEvents extends IPieSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieSeries3DAdapters extends IPieSeriesAdapters, IPieSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a slice series on a 3D pie chart.\r\n *\r\n * @see {@link IPieSeries3DEvents} for a list of available Events\r\n * @see {@link IPieSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class PieSeries3D extends PieSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPieSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieSeries3DEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PieSeries3DDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: PieChart3D;\r\n\r\n\tpublic _slice: Slice3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieSeries3D\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PieSeries3DDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * creates slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new Slice3D();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: PieSeries3DDataItem): void {\r\n\r\n\t\tlet slice: Slice3D = <Slice3D>dataItem.slice;\r\n\r\n\t\tlet depth: number = this.depth;\r\n\t\tif (!$type.isNumber(depth)) {\r\n\t\t\tdepth = this.chart.depth;\r\n\t\t}\r\n\r\n\t\tlet depthPercent: number = dataItem.values.depthValue.percent;\r\n\t\tif (!$type.isNumber(depthPercent)) {\r\n\t\t\tdepthPercent = 100;\r\n\t\t}\r\n\r\n\t\tslice.depth = depthPercent * depth / 100;\r\n\r\n\t\tlet angle: number = this.angle;\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = this.chart.angle;\r\n\t\t}\r\n\r\n\t\tslice.angle = angle;\r\n\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = this._workingStartIndex; i < this._workingEndIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tlet slice: Slice3D = dataItem.slice;\r\n\r\n\t\t\tconst startAngle = slice.startAngle;\r\n\t\t\t// find quarter\r\n\t\t\t//q0 || q1\r\n\t\t\tif ((startAngle >= -90 && startAngle < 90)) {\r\n\t\t\t\tslice.toFront();\r\n\t\t\t}\r\n\t\t\t//q2 || q3\r\n\t\t\telse if ((startAngle >= 90)) {\r\n\t\t\t\tslice.toBack();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth (height) of the pie slice in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of the view point of the 3D pie. (0-360)\r\n\t *\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice = dataItem.slice;\r\n\r\n\t\tbullet.y = bullet.pixelY - slice.depth;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieSeries3D\"] = PieSeries3D;\r\nregistry.registeredClasses[\"PieSeries3DDataItem\"] = PieSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PieSeries3D.ts","/**\r\n * 3D Pie chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nimport { PieChart, IPieChartProperties, IPieChartDataFields, IPieChartAdapters, IPieChartEvents, PieChartDataItem } from \"./PieChart\";\r\nimport { PieSeries3D } from \"../series/PieSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PieChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PieChart3DDataItem extends PieChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PieChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DDataFields extends IPieChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DProperties extends IPieChartProperties {\r\n\r\n\t/**\r\n\t * Pie's \"depth\" or \"height\" in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Pie's angle at which we are looking at it. (degrees)\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PieChart3D]].\r\n */\r\nexport interface IPieChart3DEvents extends IPieChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PieChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPieChart3DAdapters extends IPieChartAdapters, IPieChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D Pie chart.\r\n *\r\n *  * ```TypeScript\r\n * // Includes\r\n * import * as am4core from \"@amcharts/amcharts4/core\";\r\n * import * as am4charts from \"@amcharts/amcharts4/charts\";\r\n *\r\n * // Create chart\r\n * let chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * let series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JavaScript\r\n * // Create chart\r\n * var chart = am4core.create(\"chartdiv\", am4charts.Pie3DChart);\r\n *\r\n * // The following would work as well:\r\n * // var chart = am4core.create(\"chartdiv\", \"Pie3DChart\");\r\n *\r\n * // Set data\r\n * chart.data = [{\r\n * \t\"country\": \"Lithuania\",\r\n * \t\"litres\": 501.9\r\n * }, {\r\n * \t\"country\": \"Czechia\",\r\n * \t\"litres\": 301.9\r\n * }, {\r\n * \t\"country\": \"Ireland\",\r\n * \t\"litres\": 201.1\r\n * }];\r\n *\r\n * // Create series\r\n * var series = chart.series.push(new am4charts.Pie3DSeries());\r\n * series.dataFields.value = \"litres\";\r\n * series.dataFields.category = \"country\";\r\n * ```\r\n * ```JSON\r\n * var chart = am4core.createFromConfig({\r\n *\r\n * \t// Series\r\n * \t\"series\": [{\r\n * \t\t\"type\": \"Pie3DSeries\",\r\n * \t\t\"dataFields\": {\r\n * \t\t\t\"value\": \"litres\",\r\n * \t\t\t\"category\": \"country\"\r\n * \t\t}\r\n * \t}],\r\n *\r\n * \t// Data\r\n * \t\"data\": [{\r\n * \t\t\"country\": \"Lithuania\",\r\n * \t\t\"litres\": 501.9\r\n * \t}, {\r\n * \t\t\"country\": \"Czechia\",\r\n * \t\t\"litres\": 301.9\r\n * \t}, {\r\n * \t\t\"country\": \"Ireland\",\r\n * \t\t\"litres\": 201.1\r\n * \t}]\r\n *\r\n * }, \"chartdiv\", \"Pie3DChart\");\r\n * ```\r\n *\r\n * @see {@link IPieChart3DEvents} for a list of available Events\r\n * @see {@link IPieChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/pie-chart/} for documentation\r\n * @important\r\n */\r\nexport class PieChart3D extends PieChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IPieChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPieChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPieChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPieChart3DEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: PieSeries3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"PieChart3D\";\r\n\r\n\t\tthis.depth = 20;\r\n\t\tthis.angle = 10;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D pie in pixels.\r\n\t *\r\n\t * This will determine \"height\" of the pie.\r\n\t *\r\n\t * @default 20\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tif (this.setPropertyValue(\"depth\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * An angle of a \"point of view\" in degrees. Possible range 0 - 90.\r\n\t *\r\n\t * @default 10\r\n\t * @param value  Angle (degrees)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tvalue = $math.fitToRange(value, 0, 90);\r\n\t\tif (this.setPropertyValue(\"angle\", value)) {\r\n\t\t\tthis.invalidateDataUsers();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle (degrees)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new Series.\r\n\t *\r\n\t * @return New series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new PieSeries3D();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PieChart3D\"] = PieChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/PieChart3D.ts","/**\r\n * Sliced chart module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { PercentChart, IPercentChartProperties, IPercentChartDataFields, IPercentChartAdapters, IPercentChartEvents, PercentChartDataItem } from \"./PercentChart\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SlicedChart]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SlicedChartDataItem extends PercentChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SlicedChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChartDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartDataFields extends IPercentChartDataFields { }\r\n\r\n/**\r\n * Defines properties for [[SlicedChart]]\r\n */\r\nexport interface ISlicedChartProperties extends IPercentChartProperties { }\r\n\r\n/**\r\n * Defines events for [[SlicedChart]].\r\n */\r\nexport interface ISlicedChartEvents extends IPercentChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SlicedChart]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISlicedChartAdapters extends IPercentChartAdapters, ISlicedChartProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sliced chart.\r\n *\r\n * @see {@link ISlicedChartEvents} for a list of available Events\r\n * @see {@link ISlicedChartAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class SlicedChart extends PercentChart {\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISlicedChartDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISlicedChartProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISlicedChartAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISlicedChartEvents;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: FunnelSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SlicedChart\";\r\n\r\n\t\tthis.seriesContainer.layout = \"horizontal\";\r\n\r\n\t\tthis.padding(15, 15, 15, 15);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sliced chart\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the chart, causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SlicedChart\"] = SlicedChart;\r\nregistry.registeredClasses[\"SlicedChartDataItem\"] = SlicedChartDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SlicedChart.ts","/**\r\n * FlowDiagramNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite, AMEvent, visualProperties, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { FlowDiagram, FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $string from \"../../core/utils/String\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendSettings, LegendDataItem } from \"../Legend\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Name of the node.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * Sum of all incomming+outgoing link values\r\n\t */\r\n\ttotal?: number;\r\n\r\n\t/**\r\n\t * Sum of all incoming link values\r\n\t */\r\n\ttotalIncoming?: number;\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values\r\n\t */\r\n\ttotalOutgoing?: number;\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t */\r\n\tcolor?: Color;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramNode]].\r\n */\r\nexport interface IFlowDiagramNodeEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramNodeAdapters extends IContainerAdapters, IFlowDiagramNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Flow Diagram.\r\n *\r\n * A Flow node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[FlowLink]] elements.\r\n *\r\n * @see {@link IFlowDiagramNodeEvents} for a list of available events\r\n * @see {@link IFlowDiagramNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramNode extends Container {\r\n\r\n\t/**\r\n\t * total ajusted taken in mind chart.minNodeSize\r\n\t */\r\n\tpublic adjustedTotal: number;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<this[\"_dataItem\"]>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: FlowDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[FlowDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Settings for the appearance of the related legend items.\r\n\t */\r\n\tpublic legendSettings: LegendSettings = new LegendSettings();\r\n\r\n\r\n\t/**\r\n\t * A reference to the legend data item related to this node.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramNode\";\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.draggable = true;\r\n\t\tthis.inert = true;\r\n\r\n\t\tthis.setStateOnChildren = true;\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.invalidateLinks, this, false);\r\n\t\tthis.events.on(\"sizechanged\", this.invalidateLinks, this, false);\r\n\t\t//this.events.on(\"hit\", this.handleHit, this, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic handleHit(event: AMEvent<Sprite, ISpriteEvents>[\"hit\"]) {\r\n\t\tif (this.isHidden || this.isHiding) {\r\n\t\t\tthis.show();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.hide();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden node.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.toNode || (dataItem.toNode && !dataItem.toNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tif (!dataItem.fromNode || (dataItem.fromNode && !dataItem.fromNode.isHidden)) {\r\n\t\t\t\tdataItem.setWorkingValue(\"value\", dataItem.getValue(\"value\"), duration);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides node.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet animation = super.hide(duration);\r\n\r\n\t\tthis.outgoingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t})\r\n\r\n\t\tthis.incomingDataItems.each(function(dataItem) {\r\n\t\t\tdataItem.setWorkingValue(\"value\", 0, duration);\r\n\t\t})\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Marks node as invalid, for redrawal in the next update cycle.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tif(!this.isDisposed()){\r\n\t\t\tsuper.validate();\r\n\t\t\tthis.invalidateLinks();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\r\n\t\tthis.outgoingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"fromNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.fromNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.incomingDataItems.each((dataItem) => {\r\n\t\t\tlet link = dataItem.link;\r\n\t\t\tif (link.colorMode == \"toNode\") {\r\n\t\t\t\tlink.fill = link.dataItem.toNode.color;\r\n\t\t\t}\r\n\r\n\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\tlink.stroke = link.gradient;\r\n\r\n\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\r\n\t\t\t\tif (stop) {\r\n\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * List of incoming items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Incoming items\r\n\t */\r\n\tpublic get incomingDataItems(): List<this[\"_dataItem\"]> {\r\n\t\tif (!this._incomingDataItems) {\r\n\t\t\tlet incomingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\tincomingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._incomingSorted = $iter.sort(this._incomingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._incomingSorted = this._incomingDataItems.iterator();\r\n\t\t\t\t}\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._incomingDataItems = incomingDataItems;\r\n\t\t}\r\n\t\treturn this._incomingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * List of outgoing items (links).\r\n\t *\r\n\t * @readonly\r\n\t * @return Outgoing items\r\n\t */\r\n\tpublic get outgoingDataItems(): List<FlowDiagramDataItem> {\r\n\t\tif (!this._outgoingDataItems) {\r\n\t\t\tlet outgoingDataItems = new List<FlowDiagramDataItem>();\r\n\t\t\toutgoingDataItems.events.on(\"inserted\", () => {\r\n\t\t\t\tif (this.chart.sortBy == \"name\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $string.order(x.fromName, y.fromName));\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.chart.sortBy == \"value\") {\r\n\t\t\t\t\tthis._outgoingSorted = $iter.sort(this._outgoingDataItems.iterator(), (x, y) => $order.reverse($number.order(x.value, y.value)));\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._outgoingSorted = this._outgoingDataItems.iterator();\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, false);\r\n\t\t\tthis._outgoingDataItems = outgoingDataItems;\r\n\t\t}\r\n\t\treturn this._outgoingDataItems;\r\n\t}\r\n\r\n\t/**\r\n\t * A name of the node.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setPropertyValue(\"name\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.getPropertyValue(\"name\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incoming+outgoing link values\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set total(value: number) {\r\n\t\tthis.setPropertyValue(\"total\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get total(): number {\r\n\t\treturn this.getPropertyValue(\"total\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all incomming link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalIncoming(value: number) {\r\n\t\tthis.setPropertyValue(\"totalIncoming\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalIncoming(): number {\r\n\t\treturn this.getPropertyValue(\"totalIncoming\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sum of all outgoing link values.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set totalOutgoing(value: number) {\r\n\t\tthis.setPropertyValue(\"totalOutgoing\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get totalOutgoing(): number {\r\n\t\treturn this.getPropertyValue(\"totalOutgoing\");\r\n\t}\r\n\r\n\t/**\r\n\t * Node's color.\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setColorProperty(\"color\", value);\r\n\t\tif (this._background) {\r\n\t\t\tthis._background.fill = value;\r\n\t\t}\r\n\t\tthis.fill = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.getPropertyValue(\"color\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\t\tcolumn.stroke = this.fill;\r\n\r\n\t\tcolumn.copyFrom(<any>this);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Legend data item that corresponds to this series.\r\n\t *\r\n\t * @param value  Data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tthis._legendDataItem.itemContainer.deepInvalidate();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramNode\"] = FlowDiagramNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FlowDiagramNode.ts","/**\r\n * FlowDiagramLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { Container, IContainerProperties, IContainerEvents, IContainerAdapters } from \"../../core/Container\";\r\nimport { FlowDiagramDataItem } from \"../types/FlowDiagram\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Polyline } from \"../../core/elements/Polyline\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t */\r\n\tcolorMode?: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\";\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n\r\n\t/**\r\n\t * [maskBullets description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tmaskBullets?: boolean;\r\n\r\n\t/**\r\n\t * [tooltipLocation description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttooltipLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagramLink]].\r\n */\r\nexport interface IFlowDiagramLinkEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagramLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramLinkAdapters extends IContainerAdapters, IFlowDiagramLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Flow Diagram.\r\n *\r\n * @see {@link IFlowDiagramLinkEvents} for a list of available events\r\n * @see {@link IFlowDiagramLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagramLink extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tprotected _gradient: LinearGradient;\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected _bullets: ListTemplate<Bullet>;\r\n\r\n\t/**\r\n\t * Link sprite\r\n\t */\r\n\tpublic link: Sprite;\r\n\r\n\t/**\r\n\t * Bullets mask spite\r\n     */\r\n\tprotected _bulletsMask: Sprite;\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tprotected _bulletsContainer: Container;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Line | Polyline;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramLink\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.maskBullets = false;\r\n\r\n\t\tthis.colorMode = \"fromNode\";\r\n\r\n\t\tthis.layout = \"none\";\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\r\n\t\t// this is very important, otherwise the container will be shifted\r\n\t\tthis.verticalCenter = \"none\";\r\n\t\tthis.horizontalCenter = \"none\";\r\n\r\n\t\tthis.tooltipText = \"{fromName}→{toName}:{value.value}\";\r\n\t\tthis.tooltipLocation = 0.5;\r\n\r\n\t\tthis.link = this.createChild(Sprite);\r\n\t\tthis.link.shouldClone = false;\r\n\t\tthis.link.setElement(this.paper.add(\"path\"));\r\n\t\tthis.link.isMeasured = false;\r\n\t\tthis.fillOpacity = 0.2;\r\n\t\tthis.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullets() {\r\n\t\t$iter.each(this.bullets.iterator(), (bullet) => {\r\n\t\t\tbullet.parent = this.bulletsContainer;\r\n\r\n\t\t\tbullet.maxWidth = this.maxWidth;\r\n\t\t\tbullet.maxHeight = this.maxHeight;\r\n\r\n\t\t\tthis.positionBullet(bullet);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bullets container\r\n     */\r\n\tpublic get bulletsContainer(){\r\n\t\tif(!this._bulletsContainer){\r\n\t\t\tlet bulletsContainer = this.createChild(Container);\r\n\t\t\tbulletsContainer.shouldClone = false;\r\n\t\t\tbulletsContainer.layout = \"none\";\r\n\t\t\tthis._bulletsContainer = bulletsContainer;\r\n\t\t}\r\n\t\treturn this._bulletsContainer;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bullets mask sprite\r\n     */\r\n\tpublic get bulletsMask(){\r\n\t\tif(!this._bulletsMask){\r\n\t\t\tlet bulletsMask = this.createChild(Sprite);\r\n\t\t\tbulletsMask.shouldClone = false;\r\n\t\t\tbulletsMask.setElement(this.paper.add(\"path\"));\r\n\t\t\tbulletsMask.isMeasured = false;\r\n\t\t\tthis._bulletsMask = bulletsMask;\r\n\t\t}\r\n\t\treturn this._bulletsMask;\r\n\t}\r\n\r\n\t/**\r\n\t * Positions bullets at relative bullet.locationX position on the link.\r\n\t * @ignore\r\n\t */\r\n\tprotected positionBullet(bullet: Bullet) {\r\n\r\n\t\tlet location = bullet.locationX;\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = bullet.locationY;\r\n\t\t}\r\n\r\n\t\tif (!$type.isNumber(location)) {\r\n\t\t\tlocation = 0.5;\r\n\t\t}\r\n\t\tlet point = this.middleLine.positionToPoint(location);\r\n\r\n\t\tbullet.moveTo(point);\r\n\r\n\t\tlet rotationField = bullet.propertyFields.rotation;\r\n\t\tlet angle: number;\r\n\t\tif (bullet.dataItem) {\r\n\t\t\tlet dataContext: any = bullet.dataItem.dataContext;\r\n\t\t\tangle = dataContext[rotationField];\r\n\t\t}\r\n\t\tif (!$type.isNumber(angle)) {\r\n\t\t\tangle = point.angle;\r\n\t\t}\r\n\r\n\t\tbullet.rotation = angle;\r\n\t}\r\n\r\n\t/**\r\n\t * [startAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endAngle description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link be filled with a solid color, color of from node, color of toNode or gradient between node colors.\r\n\t * Some of the links, like ChordLink does not support gradiens well.\r\n\t *\r\n\t * @param value  Fill mode\r\n\t */\r\n\tpublic set colorMode(value: \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\") {\r\n\t\tif (value == \"gradient\") {\r\n\t\t\tlet color = this.fill;\r\n\r\n\t\t\tthis.gradient.stops.clear();\r\n\t\t\tif(color instanceof Color){\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t\tthis.gradient.addColor(color);\r\n\t\t\t}\r\n\t\t\tthis.fill = this.gradient;\r\n\t\t\tthis.stroke = this.gradient;\r\n\t\t}\r\n\t\tthis.setPropertyValue(\"colorMode\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Fill mode\r\n\t */\r\n\tpublic get colorMode(): \"solid\" | \"gradient\" | \"fromNode\" | \"toNode\" {\r\n\t\treturn this.getPropertyValue(\"colorMode\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Should link bullets be masked or not\r\n\t *\r\n\t * @param value\r\n\t * @default false;\r\n\t */\r\n\tpublic set maskBullets(value: boolean) {\r\n\t\tthis.setPropertyValue(\"maskBullets\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return mask bullets value\r\n\t */\r\n\tpublic get maskBullets(): boolean {\r\n\t\treturn this.getPropertyValue(\"maskBullets\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location of a tooltip.\r\n\t * @default 0.5\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set tooltipLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"tooltipLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Tooltip location value\r\n\t */\r\n\tpublic get tooltipLocation(): number {\r\n\t\treturn this.getPropertyValue(\"tooltipLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Adds color steps in the link gradient.\r\n\t *\r\n\t * @param value  Fill option\r\n\t */\r\n\tprotected setFill(value: Color | Pattern | LinearGradient | RadialGradient) {\r\n\t\tsuper.setFill(value)\r\n\t\tlet gradient = this._gradient;\r\n\r\n\t\tif (gradient && value instanceof Color) {\r\n\t\t\tgradient.stops.clear();\r\n\t\t\tgradient.addColor(value);\r\n\t\t\tgradient.addColor(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates bounding box based on element dimension settings.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic measureElement(): void {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * List of bullets\r\n\t *\r\n\t * @return [description]\r\n\t */\r\n\tpublic get bullets(): ListTemplate<Bullet> {\r\n\t\tif (!this._bullets) {\r\n\t\t\tthis._bullets = new ListTemplate<Bullet>(new Bullet());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._bullets));\r\n\t\t\tthis._disposers.push(this._bullets.template);\r\n\t\t\tthis._bullets.events.on(\"inserted\", (event) => {\r\n\t\t\t\tevent.newValue.events.on(\"propertychanged\", (event) => {\r\n\t\t\t\t\tif (event.property == \"locationX\" || event.property == \"locationY\") {\r\n\t\t\t\t\t\tthis.positionBullet(event.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, undefined, false)\r\n\t\t\t}, undefined, false)\r\n\t\t}\r\n\t\treturn this._bullets;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties from another [[FlowDiagramLink]].\r\n\t *\r\n\t * @param source  Source link\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.bullets.copyFrom(source.bullets);\r\n\t\tlet middleLine = this.middleLine;\r\n\t\tif(middleLine){\r\n\t\t\tif (middleLine instanceof Line && source.middleLine instanceof Line) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\r\n\t\t\tif (middleLine instanceof Polyline && source.middleLine instanceof Polyline) {\r\n\t\t\t\tmiddleLine.copyFrom(source.middleLine);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.link.copyFrom(source.link);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip X (px)\r\n\t */\r\n\tgetTooltipX(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).x;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Tooltip Y (px)\r\n\t */\r\n\tgetTooltipY(): number {\r\n\t\tif (this.middleLine) {\r\n\t\t\treturn this.middleLine.positionToPoint(this.tooltipLocation).y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A gradiend instance that is used to provided colored gradient fills for\r\n\t * the Flow link.\r\n\t */\r\n\tpublic get gradient(){\r\n\t\tif(!this._gradient){\r\n\t\t\tthis._gradient = new LinearGradient();\r\n\t\t}\r\n\t\treturn this._gradient;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagramLink\"] = FlowDiagramLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FlowDiagramLink.ts","/**\r\n * FlowDiagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Chart, IChartProperties, IChartDataFields, IChartAdapters, IChartEvents, ChartDataItem } from \"../Chart\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { FlowDiagramNode } from \"../elements/FlowDiagramNode\";\r\nimport { FlowDiagramLink } from \"../elements/FlowDiagramLink\";\r\nimport { LinearGradientModifier } from \"../../core/rendering/fills/LinearGradientModifier\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { toColor, Color } from \"../../core/utils/Color\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $number from \"../../core/utils/Number\";\r\nimport * as $order from \"../../core/utils/Order\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FlowDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FlowDiagramDataItem extends ChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FlowDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: FlowDiagramLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: FlowDiagramNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagramDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Source node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set fromName(value: string) {\r\n\t\tthis.setProperty(\"fromName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get fromName(): string {\r\n\t\treturn this.properties.fromName;\r\n\t}\r\n\r\n\t/**\r\n\t * Destination node's name.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set toName(value: string) {\r\n\t\tthis.setProperty(\"toName\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return name\r\n\t */\r\n\tpublic get toName(): string {\r\n\t\treturn this.properties.toName;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Node color\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", toColor(value));\r\n\t}\r\n\r\n\t/**\r\n\t * @return color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\treturn this.properties.color;\r\n\t}\r\n\r\n\t/**\r\n\t * Link's value.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\treturn this.values.value.value;\r\n\t}\r\n\r\n\t/**\r\n\t * A visual element, representing link between the source and target nodes.\r\n\t *\r\n\t * Link's actual thickness will be determined by `value` of this link and\r\n\t * `value` of the source node.\r\n\t *\r\n\t * @readonly\r\n\t * @return Link element\r\n\t */\r\n\tpublic get link(): this[\"_link\"] {\r\n\t\tif (!this._link) {\r\n\t\t\tlet link = this.component.links.create();\r\n\t\t\tthis._link = link;\r\n\r\n\t\t\tthis.addSprite(link);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.links.removeValue(link);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn this._link;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramDataFields extends IChartDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n\r\n\t/**\r\n\t * Visibility of a node\r\n\t */\r\n\tvisible?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[FlowDiagram]]\r\n */\r\nexport interface IFlowDiagramProperties extends IChartProperties {\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t */\r\n\tnodePadding?: number;\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort a\r\n\t */\r\n\tsortBy?: \"none\" | \"name\" | \"value\";\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t */\r\n\tminNodeSize: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FlowDiagram]].\r\n */\r\nexport interface IFlowDiagramEvents extends IChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FlowDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFlowDiagramAdapters extends IChartAdapters, IFlowDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Pie chart\r\n * @see {@link IFlowDiagramEvents} for a list of available Events\r\n * @see {@link IFlowDiagramAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class FlowDiagram extends Chart {\r\n\r\n\t/**\r\n\t * A Color Set to use when applying/generating colors for each subsequent\r\n\t * node.\r\n\t */\r\n\tpublic colors: ColorSet = new ColorSet();\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: FlowDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IFlowDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFlowDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFlowDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFlowDiagramEvents;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:FlowDiagramNode;\r\n\r\n\r\n\t/**\r\n\t * A list of chart's FlowDiagram nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tprotected _nodes: DictionaryTemplate<string, this[\"_node\"]>;\r\n\r\n\r\n\t/**\r\n\t */\r\n\tpublic _link:FlowDiagramLink;\r\n\r\n\t/**\r\n\t * A list of FlowDiagram links connecting nodes.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tprotected _links: ListTemplate<this[\"_link\"]>;\r\n\r\n\t/**\r\n\t * A container that holds all of the link elements.\r\n\t */\r\n\tpublic linksContainer: Container;\r\n\r\n\t/**\r\n\t * A container that holds all of the node elements.\r\n\t */\r\n\tpublic nodesContainer: Container;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, FlowDiagramNode]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"FlowDiagram\";\r\n\t\tthis.nodePadding = 20;\r\n\t\tthis.sortBy = \"none\";\r\n\t\tthis.sequencedInterpolation = true;\r\n\r\n\t\tthis.colors.step = 2;\r\n\t\tthis.minNodeSize = 0.02;\r\n\r\n\t\tlet linksContainer = this.chartContainer.createChild(Container);\r\n\t\tlinksContainer.shouldClone = false;\r\n\t\tlinksContainer.layout = \"none\";\r\n\t\tlinksContainer.isMeasured = false;\r\n\t\tthis.linksContainer = linksContainer;\r\n\r\n\t\tlet nodesContainer = this.chartContainer.createChild(Container);\r\n\t\tnodesContainer.shouldClone = false;\r\n\t\tnodesContainer.layout = \"none\";\r\n\t\tnodesContainer.isMeasured = false;\r\n\t\tthis.nodesContainer = nodesContainer;\r\n\r\n\t\t// this data item holds sums, averages, etc\r\n\t\tthis.dataItem = this.createDataItem();\r\n\t\tthis.dataItem.component = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tpublic dispose(): void {\r\n\t\tsuper.dispose();\r\n\t\tthis.dataItem.dispose();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tif(this._parseDataFrom == 0){\r\n\t\t\tthis.nodes.clear();\r\n\t\t}\r\n\r\n\t\tthis.sortNodes();\r\n\r\n\t\tthis.colors.reset();\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tlet sum = 0;\r\n\t\tlet count = 0;\r\n\t\tlet low: number;\r\n\t\tlet high: number;\r\n\r\n\t\t// build blocks\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tlet fromName = dataItem.fromName;\r\n\r\n\t\t\tif (fromName) {\r\n\t\t\t\tlet node = this.nodes.getKey(fromName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(fromName);\r\n\t\t\t\t\tnode.name = fromName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\t\t\t\tdataItem.fromNode = node;\r\n\t\t\t\tdataItem.fromNode.outgoingDataItems.push(dataItem);\r\n\t\t\t}\r\n\t\t\tlet toName = dataItem.toName;\r\n\t\t\tif (toName) {\r\n\t\t\t\tlet node = this.nodes.getKey(toName);\r\n\t\t\t\tif (!node) {\r\n\t\t\t\t\tnode = this.nodes.create(toName);\r\n\t\t\t\t\tnode.name = toName;\r\n\t\t\t\t\tnode.chart = this;\r\n\t\t\t\t\tnode.dataItem = dataItem;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdataItem.toNode = node;\r\n\t\t\t\tdataItem.toNode.incomingDataItems.push(dataItem);\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\tlet strokeModifier = new LinearGradientModifier();\r\n\t\t\t\tstrokeModifier.opacities = [0, 1];\r\n\t\t\t\tdataItem.link.strokeModifier = strokeModifier;\r\n\t\t\t}\r\n\r\n\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\tlet fillModifier = new LinearGradientModifier();\r\n\t\t\t\tfillModifier.opacities = [1, 0];\r\n\t\t\t\tdataItem.link.strokeModifier = fillModifier;\r\n\t\t\t}\r\n\r\n\t\t\tlet value = dataItem.value;\r\n\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\tsum += value;\r\n\t\t\t\tcount++;\r\n\r\n\t\t\t\tif (low > value || !$type.isNumber(low)) {\r\n\t\t\t\t\tlow = value;\r\n\t\t\t\t}\r\n\t\t\t\tif (high < value || !$type.isNumber(high)) {\r\n\t\t\t\t\thigh = value;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet key = \"value\";\r\n\r\n\t\tthis.dataItem.setCalculatedValue(key, high, \"high\");\r\n\t\tthis.dataItem.setCalculatedValue(key, low, \"low\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum, \"sum\");\r\n\t\tthis.dataItem.setCalculatedValue(key, sum / count, \"average\");\r\n\t\tthis.dataItem.setCalculatedValue(key, count, \"count\");\r\n\r\n\r\n\t\t$iter.each(this.nodes.iterator(), (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\r\n\t\t\tif (node.fill instanceof Color) {\r\n\t\t\t\tnode.color = node.fill;\r\n\t\t\t}\r\n\r\n\t\t\tif (node.color == undefined) {\r\n\t\t\t\tnode.color = this.colors.next();\r\n\t\t\t}\r\n\r\n\t\t\tif (node.dataItem.color != undefined) {\r\n\t\t\t\tnode.color = node.dataItem.color;\r\n\t\t\t}\r\n\r\n\t\t\tif(!node.dataItem.visible){\r\n\t\t\t\tnode.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.sortNodes();\r\n\t\tthis.feedLegend();\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?:this[\"_dataItem\"], name?:string): void {\r\n\t\tthis.invalidate();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sorts nodes by either their values or names, based on `sortBy` setting.\r\n\t */\r\n\tprotected sortNodes() {\r\n\t\tif (this.sortBy == \"name\") {\r\n\t\t\tthis._sorted = this.nodes.sortedIterator();\r\n\t\t}\r\n\t\telse if (this.sortBy == \"value\") {\r\n\t\t\tthis._sorted = $iter.sort(this.nodes.iterator(), (x, y) => $order.reverse($number.order(x[1].total, y[1].total)));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._sorted = this.nodes.iterator();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates a cummulative value of the node.\r\n\t *\r\n\t * A node's value is determined by summing values of all of the incoming\r\n\t * links or all of the outgoing links, whichever results in bigger number.\r\n\t *\r\n\t * @param node  Node value\r\n\t */\r\n\tprotected getNodeValue(node: FlowDiagramNode) {\r\n\r\n\t\t// todo: totalIncomming totalOutgoing, total\r\n\r\n\t\tlet incomingTotal = 0;\r\n\t\tlet outgoingTotal = 0;\r\n\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif($type.isNumber(value)){\r\n\t\t\t\tincomingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem: FlowDiagramDataItem) => {\r\n\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\tif($type.isNumber(value)){\r\n\t\t\t\toutgoingTotal += value;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tnode.total = incomingTotal + outgoingTotal;\r\n\t\tnode.totalIncoming = incomingTotal;\r\n\t\tnode.totalOutgoing = outgoingTotal;\r\n\t};\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Flow diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FlowDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Padding for node square in pixels.\r\n\t *\r\n\t * Padding will add extra space around node's name label.\r\n\t *\r\n\t * @param value Padding (px)\r\n\t */\r\n\tpublic set nodePadding(value: number) {\r\n\t\tthis.setPropertyValue(\"nodePadding\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Padding (px)\r\n\t */\r\n\tpublic get nodePadding(): number {\r\n\t\treturn this.getPropertyValue(\"nodePadding\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sort nodes by \"name\" or \"value\" or do not sort at all. If not sorted, nodes will appear in the same order as they are in the data.\r\n\t * @default \"none\"\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set sortBy(value: \"none\" | \"name\" | \"value\") {\r\n\t\tthis.setPropertyValue(\"sortBy\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Node sorting\r\n\t */\r\n\tpublic get sortBy(): \"none\" | \"name\" | \"value\" {\r\n\t\treturn this.getPropertyValue(\"sortBy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sometimes nodes can get very small if their value is little. With this setting you\r\n\t * can set min size of a node (this is relative value from the total size of all nodes)\r\n\t * @default 0.02\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set minNodeSize(value: number) {\r\n\t\tthis.setPropertyValue(\"minNodeSize\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @returns min node size\r\n\t */\r\n\tpublic get minNodeSize(): number {\r\n\t\treturn this.getPropertyValue(\"minNodeSize\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A list of chart's nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, this[\"_node\"]>}\r\n\t */\r\n\tpublic get nodes():DictionaryTemplate<string, this[\"_node\"]>{\r\n\t\tif(!this._nodes){\r\n\t\t\tlet template = this.createNode();\r\n\t\t\ttemplate.events.on(\"hit\", (event)=>{\r\n\t\t\t\tevent.target.handleHit(event);\r\n\t\t\t});\r\n\t\t\tthis._nodes = new DictionaryTemplate<string, this[\"_node\"]>(template);\r\n\t\t\tthis._disposers.push(new DictionaryDisposer(this._nodes));\r\n\t\t}\r\n\t\treturn this._nodes;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new FlowDiagramNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of chart's links.\r\n\t *\r\n\t * @param {ListTemplate<this[\"_link\"]>}\r\n\t */\r\n\tpublic get links():ListTemplate<this[\"_link\"]>{\r\n\t\tif(!this._links){\r\n\t\t\tthis._links = new ListTemplate<this[\"_link\"]>(this.createLink());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._links));\r\n\t\t}\r\n\t\treturn this._links;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new FlowDiagramLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\t\t\tlet legendData: any[] = [];\r\n\r\n\t\t\tthis.nodes.each((key, node)=>{\r\n\t\t\t\tlegendData.push(node);\r\n\t\t\t});\r\n\r\n\t\t\tlegend.data = legendData;\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData(){\r\n\t\tsuper.disposeData();\r\n\t\tthis.nodes.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FlowDiagram\"] = FlowDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/FlowDiagram.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ILabelBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ILabelBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ILabelBulletAdapters extends IBulletAdapters, ILabelBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class LabelBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ILabelBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ILabelBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ILabelBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic label: Label;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"LabelBullet\";\r\n\r\n\t\tlet label = this.createChild(Label);\r\n\t\tlabel.shouldClone = false;\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.truncate = true;\r\n\t\tlabel.hideOversized = false;\r\n\r\n\t\tlabel.maxWidth = 500;\r\n\t\tlabel.maxHeight = 500;\r\n\r\n\t\tlabel.stroke = color();\r\n\t\tlabel.strokeOpacity = 0;\r\n\t\tlabel.fill = new InterfaceColorSet().getFor(\"text\");\r\n\r\n\t\tthis.events.on(\"maxsizechanged\", this.handleMaxSize, this, false);\r\n\r\n\t\tthis.label = label;\r\n\r\n\t\t// not good, as lineSeries will have labels somewhere in the middle.\r\n\t\t//this.locationX = 0.5;\r\n\t\t//this.locationY = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\tprotected handleMaxSize(){\r\n\t\tthis.label.maxWidth = this.maxWidth;\r\n\t\tthis.label.maxHeight = this.maxHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[LabelBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"LabelBullet\"] = LabelBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/LabelBullet.ts","/**\r\n * SankeyNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { SankeyDiagram, SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { LabelBullet } from \"./LabelBullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeProperties extends IFlowDiagramNodeProperties {\r\n\r\n\t/**\r\n\t * A level node is at. (0 - ...)\r\n\t */\r\n\tlevel?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyNode]].\r\n */\r\nexport interface ISankeyNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyNodeAdapters extends IFlowDiagramNodeAdapters, ISankeyNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Sankey Diagram.\r\n *\r\n * A Sankey node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[SankeyLink]] elements.\r\n *\r\n * @see {@link ISankeyNodeEvents} for a list of available events\r\n * @see {@link ISankeyNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyNodeEvents;\r\n\r\n\r\n\t/**\r\n\t * [nextInCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextInCoord: number = 0;\r\n\r\n\t/**\r\n\t * [nextOutCoord description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic nextOutCoord: number = 0;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: SankeyDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[SankeyDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * A label element which shows node's value.\r\n\t */\r\n\tpublic valueLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic nameLabel: LabelBullet;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyNode\";\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tlet nameLabel = this.createChild(LabelBullet);\r\n\t\tnameLabel.shouldClone = false;\r\n\t\t//@should we auto update these locations if position is changed?\r\n\t\tnameLabel.locationX = 1;\r\n\t\tnameLabel.locationY = 0.5;\r\n\t\tnameLabel.label.text = \"{name}\";\r\n\r\n\t\t//nameLabel.label.textElement.hideOversized = false;\r\n\t\tnameLabel.width = 150;\r\n\t\tnameLabel.height = 150;\r\n\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\tnameLabel.label.padding(0, 5, 0, 5);\r\n\t\tthis.nameLabel = nameLabel;\r\n\r\n\t\tlet valueLabel = this.createChild(LabelBullet);\r\n\t\tvalueLabel.shouldClone = false;\r\n\t\tvalueLabel.label.hideOversized = false;\r\n\t\tvalueLabel.locationX = 0.5;\r\n\t\tvalueLabel.locationY = 0.5;\r\n\t\tvalueLabel.width = 150;\r\n\t\tvalueLabel.height = 150;\r\n\t\t//valueLabel.label.text = \"{value}\";\r\n\t\tvalueLabel.label.horizontalCenter = \"middle\";\r\n\t\tthis.valueLabel = valueLabel;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.background.hiddenState.copyFrom(hiddenState);\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\t\tthis.nextInCoord = 0;\r\n\t\tthis.nextOutCoord = 0;\r\n\t\tlet chart = this.chart;\r\n\r\n\t\tif (chart) {\r\n\t\t\tlet orientation = chart.orientation;\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tx = this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.nextInCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\ty = this.pixelY + this.dy;\r\n\t\t\t\t\t\t\tx = this.nextInCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.endX = x;\r\n\t\t\t\t\t\tlink.endY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.fromNode) {\r\n\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = this.pixelX + this.dx - link.maxWidth;\r\n\t\t\t\t\t\t\t\tlink.startY = link.endY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.startX = link.endX;\r\n\t\t\t\t\t\t\t\tlink.startY = this.pixelY + this.dy - link.maxHeight;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// TODO is this needed ?\r\n\t\t\t\t\t\t\t$utils.used(link.gradient);\r\n\r\n\t\t\t\t\t\t\tlink.fill = dataItem.toNode.color;\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(0);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextInCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\tlet x: number;\r\n\t\t\t\t\t\tlet y: number;\r\n\t\t\t\t\t\tlet angle: number;\r\n\r\n\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\tangle = 0;\r\n\t\t\t\t\t\t\tx = this.pixelX + this.pixelWidth + this.dx - 1;\r\n\t\t\t\t\t\t\ty = this.nextOutCoord + this.pixelY + this.dy;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tangle = 90;\r\n\t\t\t\t\t\t\tx = this.nextOutCoord + this.pixelX + this.dx;\r\n\t\t\t\t\t\t\ty = this.pixelY + this.pixelHeight + this.dy - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.startX = x;\r\n\t\t\t\t\t\tlink.startY = y;\r\n\t\t\t\t\t\tlink.startAngle = angle;\r\n\t\t\t\t\t\tlink.endAngle = angle;\r\n\t\t\t\t\t\tlink.gradient.rotation = angle;\r\n\r\n\t\t\t\t\t\tlink.linkWidth = value * this.chart.valueHeight;\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tif (orientation == \"horizontal\") {\r\n\t\t\t\t\t\t\t\tlink.maxWidth = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = this.pixelX + link.maxWidth + this.dx;\r\n\t\t\t\t\t\t\t\tlink.endY = link.startY;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tlink.maxHeight = 200;\r\n\t\t\t\t\t\t\t\tlink.endX = link.startX;\r\n\t\t\t\t\t\t\t\tlink.endY = this.pixelY + link.maxHeight + this.dy;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlink.opacity = this.opacity;\r\n\r\n\t\t\t\t\t\t\tlet stop = link.gradient.stops.getIndex(1);\r\n\t\t\t\t\t\t\tif (stop) {\r\n\t\t\t\t\t\t\t\tif (link.colorMode == \"gradient\") {\r\n\t\t\t\t\t\t\t\t\tstop.color = this.color;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tstop.opacity = 0;\r\n\t\t\t\t\t\t\t\tlink.fill = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.stroke = link.gradient;\r\n\t\t\t\t\t\t\t\tlink.gradient.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//link.validate();\r\n\t\t\t\t\t\tthis.nextOutCoord += link.linkWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.positionBullet(this.nameLabel);\r\n\t\tthis.positionBullet(this.valueLabel);\r\n\t}\r\n\r\n\t/**\r\n\t * Positions the bullet so it is centered within the node element.\r\n\t *\r\n\t * @param bullet  Target bullet\r\n\t */\r\n\tprotected positionBullet(bullet: LabelBullet) {\r\n\t\tif (bullet) {\r\n\t\t\tbullet.x = this.measuredWidth * bullet.locationX;\r\n\t\t\tbullet.y = this.measuredHeight * bullet.locationY;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A level node is displayed at. (0 - ...)\r\n\t *\r\n\t * Levels are measured from left to right.\r\n\t *\r\n\t * The nodes in the left-most column will have `level = 0`.\r\n\t *\r\n\t * Nodes in second column - `level = 1`, etc.\r\n\t *\r\n\t * @param value  Level\r\n\t */\r\n\tpublic set level(value: number) {\r\n\t\tthis.setPropertyValue(\"level\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\treturn this.getPropertyValue(\"level\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[SankeyNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.nameLabel.copyFrom(source.nameLabel);\r\n\t\tthis.valueLabel.copyFrom(source.valueLabel);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyNode\"] = SankeyNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/SankeyNode.ts","/**\r\n * SankeyLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { SankeyDiagramDataItem } from \"../types/SankeyDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Polyspline } from \"../../core/elements/Polyspline\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [tension description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartX?: number;\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tstartY?: number;\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendX?: number;\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tendY?: number;\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tlinkWidth?: number;\r\n\r\n\t/**\r\n\t * [controlPointDistance description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tcontrolPointDistance?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyLink]].\r\n */\r\nexport interface ISankeyLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyLinkAdapters extends IFlowDiagramLinkAdapters, ISankeyLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Sankey Diagram.\r\n *\r\n * @see {@link ISankeyLinkEvents} for a list of available events\r\n * @see {@link ISankeyLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class SankeyLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: Polyspline;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyLink\";\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tnew InterfaceColorSet();\r\n\r\n\t\tthis.tension = 0.8;\r\n\t\tthis.controlPointDistance = 0.2;\r\n\r\n\t\tthis.startAngle = 0;\r\n\t\tthis.endAngle = 0;\r\n\r\n\t\tthis.linkWidth = 0;\r\n\r\n\t\tthis.startX = 0;\r\n\t\tthis.endX = 0;\r\n\r\n\t\tthis.startY = 0;\r\n\t\tthis.endY = 0;\r\n\r\n\t\tthis.middleLine = this.createChild(Polyspline);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\r\n\t\t\tlet x0 = this.startX\r\n\t\t\tlet y0 = this.startY;\r\n\t\t\tlet x1 = this.endX;\r\n\t\t\tlet y1 = this.endY;\r\n\r\n\t\t\tif (!$type.isNumber(x1)) {\r\n\t\t\t\tx1 = x0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNumber(y1)) {\r\n\t\t\t\ty1 = y0;\r\n\t\t\t}\r\n\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet w = this.linkWidth;\r\n\r\n\t\t\tlet path = \"\";\r\n\r\n\t\t\tlet xt0 = x0;\r\n\t\t\tlet yt0 = y0;\r\n\r\n\t\t\tlet xt1 = x1;\r\n\t\t\tlet yt1 = y1;\r\n\r\n\t\t\tlet xb0 = x0 + w * $math.sin(startAngle);\r\n\t\t\tlet xb1 = x1 + w * $math.sin(endAngle);\r\n\r\n\t\t\tlet yb0 = y0 + w * $math.cos(startAngle);\r\n\t\t\tlet yb1 = y1 + w * $math.cos(endAngle);\r\n\r\n\t\t\tlet xm0 = x0 + w / 2 * $math.sin(startAngle);\r\n\t\t\tlet xm1 = x1 + w / 2 * $math.sin(endAngle);\r\n\r\n\t\t\tlet ym0 = y0 + w / 2 * $math.cos(startAngle);\r\n\t\t\tlet ym1 = y1 + w / 2 * $math.cos(endAngle);\r\n\r\n\t\t\tthis.zIndex = this.zIndex || this.dataItem.index;\r\n\r\n\t\t\tlet tensionX = this.tension + (1 - this.tension) * $math.sin(startAngle);\r\n\t\t\tlet tensionY = this.tension + (1 - this.tension) * $math.cos(startAngle);\r\n\r\n\t\t\tthis.middleLine.tensionX = tensionX;\r\n\t\t\tthis.middleLine.tensionY = tensionY;\r\n\r\n\t\t\tif ($type.isNumber(w) && ($type.isNumber(x0) && $type.isNumber(x1) && $type.isNumber(y0) && $type.isNumber(y1))) {\r\n\r\n\t\t\t\t// solves issues with gradient fill of straight lines\r\n\t\t\t\tif ($math.round(xt0, 3) == $math.round(xt1, 3)) {\r\n\t\t\t\t\txt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yt0, 3) == $math.round(yt1, 3)) {\r\n\t\t\t\t\tyt1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(xb0, 3) == $math.round(xb1, 3)) {\r\n\t\t\t\t\txb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($math.round(yb0, 3) == $math.round(yb1, 3)) {\r\n\t\t\t\t\tyb1 += 0.01;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet minX = Math.min(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet minY = Math.min(yb0, yb1, yt0, yt1);\r\n\t\t\t\tlet maxX = Math.max(xb0, xb1, xt0, xt1);\r\n\t\t\t\tlet maxY = Math.max(yb0, yb1, yt0, yt1);\r\n\r\n\t\t\t\tthis._bbox = {\r\n\t\t\t\t\tx: minX,\r\n\t\t\t\t\ty: minY,\r\n\t\t\t\t\twidth: maxX - minX,\r\n\t\t\t\t\theight: maxY - minY\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet cpd = this.controlPointDistance;\r\n\r\n\t\t\t\tlet kxt0 = xt0 + (xt1 - xt0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyt0 = yt0 + (yt1 - yt0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxt1 = xt1 - (xt1 - xt0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyt1 = yt1 - (yt1 - yt0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet kxm0 = xm0 + (xm1 - xm0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kym0 = ym0 + (ym1 - ym0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxm1 = xm1 - (xm1 - xm0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kym1 = ym1 - (ym1 - ym0) * cpd * $math.sin(endAngle);\r\n\r\n\t\t\t\tlet angle = $math.getAngle({ x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 });\r\n\r\n\t\t\t\tlet dx = (w / $math.cos(angle) - w) / $math.tan(angle) * $math.cos(startAngle);\r\n\t\t\t\tlet dy = (w / $math.sin(angle) - w) * $math.tan(angle) * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb0 = -dx / 2 + xb0 + (xb1 - xb0) * cpd * $math.cos(startAngle);\r\n\t\t\t\tlet kyb0 = -dy / 2 + yb0 + (yb1 - yb0) * cpd * $math.sin(startAngle);\r\n\r\n\t\t\t\tlet kxb1 = -dx / 2 + xb1 - (xb1 - xb0) * cpd * $math.cos(endAngle);\r\n\t\t\t\tlet kyb1 = -dy / 2 + yb1 - (yb1 - yb0) * cpd * $math.sin(endAngle);\r\n\r\n\r\n\t\t\t\tthis.middleLine.segments = [[{ x: xm0, y: ym0 }, { x: kxm0, y: kym0 }, { x: kxm1, y: kym1 }, { x: xm1, y: ym1 }]];\r\n\r\n\t\t\t\tkxt0 += dx / 2;\r\n\t\t\t\tkyt0 += dy / 2;\r\n\r\n\t\t\t\tkxt1 += dx / 2;\r\n\t\t\t\tkyt1 += dy / 2;\r\n\r\n\t\t\t\tpath += $path.moveTo({ x: xt0, y: yt0 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xt0, y: yt0 }, { x: kxt0, y: kyt0 }, { x: kxt1, y: kyt1 }, { x: xt1, y: yt1 }]);\r\n\t\t\t\tpath += $path.lineTo({ x: xb1, y: yb1 });\r\n\t\t\t\tpath += new $smoothing.Tension(tensionX, tensionY).smooth([{ x: xb1, y: yb1 }, { x: kxb1, y: kyb1 }, { x: kxb0, y: kyb0 }, { x: xb0, y: yb0 }]);\r\n\t\t\t\tpath += $path.closePath();\r\n\t\t\t}\r\n\r\n\t\t\tthis.link.path = path;\r\n\r\n\t\t\tif (this.maskBullets) {\r\n\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t}\r\n\t\t\tthis.positionBullets();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [startX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start X\r\n\t */\r\n\tpublic set startX(value: number) {\r\n\t\tthis.setPropertyValue(\"startX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start X\r\n\t */\r\n\tpublic get startX(): number {\r\n\t\treturn this.getPropertyValue(\"startX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endX description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  End X\r\n\t */\r\n\tpublic set endX(value: number) {\r\n\t\tthis.setPropertyValue(\"endX\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End X\r\n\t */\r\n\tpublic get endX(): number {\r\n\t\treturn this.getPropertyValue(\"endX\");\r\n\t}\r\n\r\n\t/**\r\n\t * [startY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value  Start Y\r\n\t */\r\n\tpublic set startY(value: number) {\r\n\t\tthis.setPropertyValue(\"startY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start Y\r\n\t */\r\n\tpublic get startY(): number {\r\n\t\treturn this.getPropertyValue(\"startY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [endY description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set endY(value: number) {\r\n\t\tthis.setPropertyValue(\"endY\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get endY(): number {\r\n\t\treturn this.getPropertyValue(\"endY\");\r\n\t}\r\n\r\n\t/**\r\n\t * [linkWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set linkWidth(value: number) {\r\n\t\tthis.setPropertyValue(\"linkWidth\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get linkWidth(): number {\r\n\t\treturn this.getPropertyValue(\"linkWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Distance of control point of a link, defines relative distance from a node at which linke should bend\r\n\t * @default 0.2\r\n\t * @param value\r\n\t */\r\n\tpublic set controlPointDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"controlPointDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return relative control point distance\r\n\t */\r\n\tpublic get controlPointDistance(): number {\r\n\t\treturn this.getPropertyValue(\"controlPointDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Tension of a spline, 1 would make the link to have sharp edges\r\n\t * @default 0.8\r\n\t * @param value\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return tension value\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyLink\"] = SankeyLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/SankeyLink.ts","/**\r\n * Sankey diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SankeyNode } from \"../elements/SankeyNode\";\r\nimport { SankeyLink } from \"../elements/SankeyLink\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $object from \"../../core/utils/Object\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[SankeyDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class SankeyDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: SankeyDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: SankeyNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: SankeyNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[SankeyDiagram]]\r\n */\r\nexport interface ISankeyDiagramProperties extends IFlowDiagramProperties {\r\n\r\n\t/**\r\n\t * Sort nodes by name or value or do not sort at all\r\n\t */\r\n\tnodeAlign?: \"top\" | \"bottom\" | \"middle\";\r\n\r\n\r\n\t/**\r\n\t * Orientation of the chart.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[SankeyDiagram]].\r\n */\r\nexport interface ISankeyDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[SankeyDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ISankeyDiagramAdapters extends IFlowDiagramAdapters, ISankeyDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Sankey Diagram chart.\r\n *\r\n * @see {@link ISankeyDiagramEvents} for a list of available Events\r\n * @see {@link ISankeyDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sankey-diagram/} for documentation\r\n * @important\r\n */\r\nexport class SankeyDiagram extends FlowDiagram {\r\n\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: SankeyDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ISankeyDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ISankeyDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ISankeyDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ISankeyDiagramEvents;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: SankeyLink;\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelSum: { [index: number]: number };\r\n\r\n\t/**\r\n\t * @todo Description\r\n\t */\r\n\tprotected _levelNodesCount: { [index: number]: number };\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node: SankeyNode;\r\n\r\n\t/**\r\n\t * [maxSum description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic maxSum: number;\r\n\r\n\t/**\r\n\t * level with max sum\r\n\t */\r\n\tprotected _maxSumLevel: number;\r\n\r\n\t/**\r\n\t * [valueHeight description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tprotected _valueHeight: number;\r\n\r\n\t/**\r\n\t * A total number of levels, present on this chart.\r\n\t */\r\n\tprotected _levelCount: number;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, this[\"_node\"]]>;\r\n\r\n\tprotected _heightAnimation: Animation;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"SankeyDiagram\";\r\n\t\tthis.orientation = \"horizontal\";\r\n\t\tthis.nodeAlign = \"middle\";\r\n\r\n\t\tthis.nodesContainer.width = percent(100);\r\n\t\tthis.nodesContainer.height = percent(100);\r\n\r\n\t\tthis.linksContainer.width = percent(100);\r\n\t\tthis.linksContainer.height = percent(100);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates chart's data, effectively causing the chart to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\t\tsuper.validateData();\r\n\r\n\t\tthis._levelCount = 0;\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tnode.level = this.getNodeLevel(node, 0);\r\n\t\t\tthis._levelCount = $math.max(this._levelCount, node.level);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Returns node's highest level.\r\n\t *\r\n\t * @param node   Node\r\n\t * @param level  Current level\r\n\t * @return New level\r\n\t */\r\n\tprotected getNodeLevel(node: this[\"_node\"], level: number): number {\r\n\t\t//@todo solve circular so\r\n\t\tlet levels: number[] = [level];\r\n\t\t$iter.each(node.incomingDataItems.iterator(), (link) => {\r\n\t\t\tif (link.fromNode) {\r\n\t\t\t\tlevels.push(this.getNodeLevel(link.fromNode, level + 1));\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn Math.max(...levels);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Calculates relation between pixel height and total value.\r\n\t *\r\n\t * In Sankey the actual thickness of links and height of nodes will depend\r\n\t * on their values.\r\n\t */\r\n\tprotected calculateValueHeight() {\r\n\t\t// calculate sums of each level\r\n\t\tthis._levelSum = {};\r\n\t\tthis._levelNodesCount = {};\r\n\t\tthis.maxSum = 0;\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t});\r\n\r\n\t\tthis.nodes.each((key, node) => {\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelSum[level])) {\r\n\t\t\t\tthis._levelSum[level] += value;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelSum[level] = value;\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.isNumber(this._levelNodesCount[level])) {\r\n\t\t\t\tthis._levelNodesCount[level]++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis._levelNodesCount[level] = 1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\t\tlet availableHeight: number;\r\n\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\tavailableHeight = this.chartContainer.maxHeight - 1;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tavailableHeight = this.chartContainer.maxWidth - 1;\r\n\t\t}\r\n\r\n\r\n\t\tlet maxSumLevel: number;\r\n\r\n\t\t$object.each(this._levelSum, (key, value) => {\r\n\t\t\tlet realValue = value;\r\n\t\t\tvalue = value * availableHeight / (availableHeight - (this._levelNodesCount[key] - 1) * this.nodePadding);\r\n\r\n\t\t\tif (this.maxSum < value) {\r\n\t\t\t\tthis.maxSum = realValue;\r\n\t\t\t\tmaxSumLevel = $type.toNumber(key);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis._maxSumLevel = maxSumLevel;\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet valueHeight = (availableHeight - (maxSumLevelNodeCount - 1) * this.nodePadding) / this.maxSum;\r\n\r\n\t\tif (!$type.isNumber(this.valueHeight)) {\r\n\t\t\tthis.valueHeight = valueHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet finalHeight;\r\n\t\t\ttry {\r\n\t\t\t\tfinalHeight = this._heightAnimation.animationOptions[0].to;\r\n\t\t\t}\r\n\t\t\tcatch (err) {\r\n\r\n\t\t\t}\r\n\t\t\t// without animations it will be non-smooth as maxValue jumps from one column to another\r\n\t\t\tif (finalHeight != valueHeight) {\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tduration = this.nodes.template.states.getKey(\"active\").transitionDuration;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (err) {\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis._heightAnimation = new Animation(this, { property: \"valueHeight\", from: this.valueHeight, to: valueHeight }, duration, this.interpolationEasing).start();\r\n\t\t\t\tthis._disposers.push(this._heightAnimation);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\r\n\t\tthis.calculateValueHeight();\r\n\r\n\t\tlet container = this.nodesContainer;\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\tlet maxSumLevelNodeCount = this._levelNodesCount[this._maxSumLevel];\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\t\t\tlet levelCoordinate: number = 0;\r\n\r\n\t\t\tlet nodeCount = this._levelNodesCount[level];\r\n\r\n\t\t\tswitch (this.nodeAlign) {\r\n\t\t\t\tcase \"bottom\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight - (nodeCount - maxSumLevelNodeCount) * this.nodePadding;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"middle\":\r\n\t\t\t\t\tlevelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2 - (nodeCount - maxSumLevelNodeCount) * this.nodePadding / 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tnode.parent = container;\r\n\r\n\t\t\tlet delta: number;\r\n\t\t\tlet x: number;\r\n\t\t\tlet y: number;\r\n\r\n\t\t\tlet value = Math.max(node.totalIncoming, node.totalOutgoing);\r\n\r\n\t\t\tif (value / total < this.minNodeSize) {\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tdelta = (this.innerWidth - node.pixelWidth) / this._levelCount;\r\n\r\n\t\t\t\tx = delta * node.level;\r\n\t\t\t\ty = nextCoordinate[level] || levelCoordinate;\r\n\r\n\t\t\t\tlet h = value * this.valueHeight;\r\n\r\n\t\t\t\tnode.height = h;\r\n\t\t\t\tnode.minX = x;\r\n\t\t\t\tnode.maxX = x;\r\n\t\t\t\tnextCoordinate[level] = y + h + this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdelta = (this.innerHeight - node.pixelHeight) / this._levelCount;\r\n\r\n\t\t\t\tx = nextCoordinate[level] || levelCoordinate;\r\n\t\t\t\ty = delta * node.level;\r\n\r\n\t\t\t\tlet w = value * this.valueHeight;\r\n\r\n\t\t\t\tnode.width = w;\r\n\t\t\t\tnode.minY = y;\r\n\t\t\t\tnode.maxY = y;\r\n\t\t\t\tnextCoordinate[level] = x + w + this.nodePadding;\r\n\t\t\t}\r\n\t\t\tnode.x = x;\r\n\t\t\tnode.y = y;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Performs actual operations to reveal this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param duration Fade in duration (ms)\r\n\t * @return Fade in duration (ms)\r\n\t */\r\n\tprotected showReal(duration?: number): $type.Optional<Animation> {\r\n\r\n\t\tif (this.interpolationDuration > 0) {\r\n\t\t\tlet container = this.nodesContainer;\r\n\r\n\t\t\tlet i: number = 0;\r\n\r\n\t\t\t$iter.each(this.links.iterator(), (link) => {\r\n\t\t\t\tlink.hide(0);\r\n\t\t\t})\r\n\r\n\t\t\t$iter.each(this._sorted, (strNode) => {\r\n\r\n\t\t\t\tlet node = strNode[1];\r\n\r\n\t\t\t\tlet property: \"dx\" | \"dy\";\r\n\r\n\t\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\t\tnode.dx = -(container.pixelWidth - node.pixelWidth) / this._levelCount;\r\n\t\t\t\t\tproperty = \"dx\";\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.dy = -(container.pixelHeight - node.pixelHeight) / this._levelCount;\r\n\t\t\t\t\tproperty = \"dy\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet delay = 0;\r\n\t\t\t\tlet duration = this.interpolationDuration;\r\n\t\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\t\tdelay = this.sequencedInterpolationDelay * i + duration * i / $iter.length(this.nodes.iterator());\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.opacity = 0;\r\n\t\t\t\tnode.invalidateLinks();\r\n\r\n\t\t\t\tnode.animate([{ property: \"opacity\", from: 0, to: 1 }, { property: property, to: 0 }], this.interpolationDuration, this.interpolationEasing).delay(delay);\r\n\r\n\t\t\t\t$iter.each(node.outgoingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\t$iter.each(node.incomingDataItems.iterator(), (dataItem) => {\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlet animation = dataItem.link.show(this.interpolationDuration);\r\n\t\t\t\t\t\tif (animation && !animation.isFinished()) {\r\n\t\t\t\t\t\t\tanimation.delay(delay);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\r\n\t\t\t\ti++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn super.showReal();\r\n\t}\r\n\r\n\t/**\r\n\t * Changes the sort type of the nodes.\r\n\t *\r\n\t * This will actually reshuffle nodes using nice animation.\r\n\t */\r\n\tprotected changeSorting() {\r\n\t\tthis.sortNodes();\r\n\r\n\t\tlet nextCoordinate: { [index: number]: number } = {};\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet level = node.level;\r\n\r\n\t\t\tlet levelCoordinate = (this.maxSum - this._levelSum[level]) * this.valueHeight / 2;\r\n\r\n\t\t\tlet property: \"x\" | \"y\";\r\n\t\t\tlet nodeHeight: number;\r\n\t\t\tif (this.orientation == \"horizontal\") {\r\n\t\t\t\tproperty = \"y\";\r\n\t\t\t\tnodeHeight = node.pixelHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tproperty = \"x\";\r\n\t\t\t\tnodeHeight = node.pixelWidth;\r\n\t\t\t}\r\n\r\n\t\t\tnode.animate({ property: property, to: nextCoordinate[level] || levelCoordinate }, this.interpolationDuration, this.interpolationEasing);\r\n\t\t\tnextCoordinate[level] = (nextCoordinate[level] || levelCoordinate) + nodeHeight + this.nodePadding;\r\n\r\n\t\t\tnode.invalidateLinks();\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Sankey diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new SankeyDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * How to align nodes. In case layout is vertical, top means left and bottom means right\r\n\t *\r\n\t * @param value  Node sorting\r\n\t */\r\n\tpublic set nodeAlign(value: \"top\" | \"middle\" | \"bottom\") {\r\n\t\tthis.setPropertyValue(\"nodeAlign\", value);\r\n\t\tthis.changeSorting();\r\n\t}\r\n\r\n\t/**\r\n\t * @returns Returns nodeAlign value\r\n\t */\r\n\tpublic get nodeAlign(): \"top\" | \"middle\" | \"bottom\" {\r\n\t\treturn this.getPropertyValue(\"nodeAlign\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the chart: \"horizontal\" or \"vertical\";\r\n\t *\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t\tlet nameLabel = this.nodes.template.nameLabel;\r\n\r\n\t\tif (value == \"vertical\") {\r\n\t\t\tthis.nodes.template.width = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"middle\";\r\n\t\t\tnameLabel.locationX = 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.nodes.template.height = undefined;\r\n\t\t\tnameLabel.label.horizontalCenter = \"left\";\r\n\t\t\tnameLabel.locationX = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode(): this[\"_node\"] {\r\n\t\tlet node = new SankeyNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink(): this[\"_link\"] {\r\n\t\tlet link = new SankeyLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get valueHeight(): number {\r\n\t\treturn this._valueHeight;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic set valueHeight(value: number) {\r\n\t\tif (value != this._valueHeight) {\r\n\t\t\tthis._valueHeight = value;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tdisposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis._sorted = this.nodes.iterator();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"SankeyDiagram\"] = SankeyDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/SankeyDiagram.ts","/**\r\n * ChordNode module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagramNode, IFlowDiagramNodeAdapters, IFlowDiagramNodeEvents, IFlowDiagramNodeProperties } from \"./FlowDiagramNode\";\r\nimport { ChordDiagram, ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { List } from \"../../core/utils/List\";\r\nimport { AxisLabelCircular } from \"../axes/AxisLabelCircular\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordNode]].\r\n */\r\nexport interface IChordNodeProperties extends IFlowDiagramNodeProperties { }\r\n\r\n/**\r\n * Defines events for [[ChordNode]].\r\n */\r\nexport interface IChordNodeEvents extends IFlowDiagramNodeEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordNode]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordNodeAdapters extends IFlowDiagramNodeAdapters, IChordNodeProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a node in a Chord Diagram.\r\n *\r\n * A Chord node is a block with a value, which represents its size on the\r\n * diagram.\r\n *\r\n * Nodes are connected via [[ChordLink]] elements.\r\n *\r\n * @see {@link IChordNodeEvents} for a list of available events\r\n * @see {@link IChordNodeAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordNode extends FlowDiagramNode {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordNodeProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordNodeAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordNodeEvents;\r\n\r\n\t/**\r\n\t * A list of data items of the items coming in from another node, one level\r\n\t * up.\r\n\t *\r\n\t * These are what ingoing links are build out of.\r\n\t */\r\n\tprotected _incomingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A list of data items of the items going out of the node.\r\n\t *\r\n\t * These are what outgoing links are build out of.\r\n\t */\r\n\tprotected _outgoingDataItems: List<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of incoming items.\r\n\t */\r\n\tprotected _incomingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * Sorted list of outgoing items.\r\n\t */\r\n\tprotected _outgoingSorted: $iter.Iterator<ChordDiagramDataItem>;\r\n\r\n\t/**\r\n\t * A chart instance this node is added to.\r\n\t */\r\n\tpublic chart: ChordDiagram;\r\n\r\n\r\n\t/**\r\n\t * Defines the type of the [[ChordDiagramDataItem]] used in the class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\r\n\t/**\r\n\t * Slice sprite of a node\r\n\t */\r\n\tpublic slice: Slice;\r\n\r\n\t/**\r\n\t * A label element which shows node's name.\r\n\t */\r\n\tpublic label: AxisLabelCircular;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic nextAngle: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic trueStartAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordNode\";\r\n\r\n\t\tlet label = this.createChild(AxisLabelCircular);\r\n\t\tlabel.location = 0.5;\r\n\t\tlabel.radius = 5;\r\n\t\tlabel.text = \"{name}\";\r\n\t\tlabel.zIndex = 1;\r\n\t\tlabel.shouldClone = false;\r\n\t\tthis.label = label;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.events.on(\"positionchanged\", this.updateRotation, this, false);\r\n\r\n\t\tthis.isMeasured = false;\r\n\t\tthis.slice = this.createChild(Slice);\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tlet hiddenState = this.hiddenState;\r\n\t\thiddenState.properties.fill = new InterfaceColorSet().getFor(\"disabledBackground\");\r\n\t\thiddenState.properties.opacity = 0.5;\r\n\t\thiddenState.properties.visible = true;\r\n\r\n\t\tthis.setStateOnChildren = false;\r\n\r\n\t\tthis.slice.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.adapter.add(\"tooltipX\", (tooltipX, target)=>{\r\n\t\t    return target.slice.ix * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\r\n\t\tthis.adapter.add(\"tooltipY\", (tooltipY, target)=>{\r\n\t\t    return target.slice.iy * (target.slice.radius - (target.slice.radius - target.slice.pixelInnerRadius) / 2);\r\n\t\t})\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Invalidates all links, attached to this node.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic invalidateLinks(): void {\r\n\t\tsuper.invalidateLinks();\r\n\r\n\t\tlet label = this.label;\r\n\t\tlet slice = this.slice;\r\n\t\tlet chart = this.chart;\r\n\t\tif (chart && slice) {\r\n\r\n\t\t\tlet sum = this.total;\r\n\t\t\tlet arc = slice.arc;\r\n\t\t\tlet sliceStartAngle = slice.startAngle;\r\n\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tif (child instanceof Bullet) {\r\n\t\t\t\t\tlet locationX = child.locationX;\r\n\t\t\t\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\t\t\t\tlocationX = 0.5;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet locationY = child.locationY;\r\n\t\t\t\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\t\t\t\tlocationY = 1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlet childAngle = sliceStartAngle + arc * locationX;\r\n\t\t\t\t\tlet childRadius = locationY * slice.radius;\r\n\r\n\t\t\t\t\tchild.x = childRadius * $math.cos(childAngle);\r\n\t\t\t\t\tchild.y = childRadius * $math.sin(childAngle);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\r\n\t\t\tlet labelAngle = sliceStartAngle + arc * label.location;\r\n\t\t\tlet startAngle = sliceStartAngle + (1 - sum / this.adjustedTotal) * arc * 0.5; // if value of a node is > then sum of the links, add to center link\r\n\r\n\t\t\tif ($type.isNaN(startAngle)) {\r\n\t\t\t\tstartAngle = sliceStartAngle;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.fixPosition(labelAngle, slice.radius);\r\n\r\n\t\t\tthis.nextAngle = startAngle;\r\n\r\n\t\t\tif (this._outgoingSorted) {\r\n\r\n\t\t\t\t$iter.each(this._outgoingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\t\t\t\t\tlink.parent = this.chart.linksContainer;\r\n\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\t\t\t\tif ($type.isNumber(value)) {\r\n\r\n\t\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\t\tlink.startAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle;\r\n\t\t\t\t\t\t\tlink.startAngle = this.nextAngle;\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (!dataItem.toNode) {\r\n\t\t\t\t\t\t\tlink.endAngle = link.startAngle;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tif (this._incomingSorted) {\r\n\t\t\t\t$iter.each(this._incomingSorted, (dataItem) => {\r\n\t\t\t\t\tlet link = dataItem.link;\r\n\r\n\t\t\t\t\tlink.radius = slice.pixelInnerRadius;\r\n\r\n\t\t\t\t\tif (chart.nonRibbon) {\r\n\t\t\t\t\t\tlet percentWidth = link.percentWidth;\r\n\t\t\t\t\t\tif (!$type.isNumber(percentWidth)) {\r\n\t\t\t\t\t\t\tpercentWidth = 5;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tpercentWidth = percentWidth / 100;\r\n\r\n\t\t\t\t\t\tlink.endAngle = sliceStartAngle + arc / 2 - arc / 2 * percentWidth;\r\n\t\t\t\t\t\tlink.arc = arc * percentWidth;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tlink.endAngle = this.nextAngle;\r\n\t\t\t\t\t\tlet value = dataItem.getWorkingValue(\"value\");\r\n\t\t\t\t\t\tif ($type.isNumber(value)) {\r\n\t\t\t\t\t\t\tlink.arc = value * chart.valueAngle; // yes, this is needed\r\n\t\t\t\t\t\t\tthis.nextAngle += link.arc;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!dataItem.fromNode) {\r\n\t\t\t\t\t\tlink.startAngle = link.endAngle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//link.validate();\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * updates slice start angle so that when we drag a node it would face the center\r\n\t */\r\n\tprotected updateRotation() {\r\n\t\tlet slice = this.slice;\r\n\t\tlet mAngle = this.trueStartAngle + slice.arc / 2;\r\n\t\tlet radius = slice.radius;\r\n\r\n\t\tlet tx = radius * $math.cos(mAngle);\r\n\t\tlet ty = radius * $math.sin(mAngle);\r\n\r\n\t\tlet angle = $math.getAngle({ x: tx + this.pixelX, y: ty + this.pixelY });\r\n\r\n\t\tslice.startAngle = this.trueStartAngle + (angle - mAngle);\r\n\r\n\t\tthis.dx = - this.pixelX;\r\n\t\tthis.dy = - this.pixelY;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Copies properties and labels from another [[ChordNode]].\r\n\t *\r\n\t * @param source  Source node\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.label.copyFrom(source.label);\r\n\t\tthis.slice.copyFrom(source.slice);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordNode\"] = ChordNode;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordNode.ts","/**\r\n * Functionality for drawing quadratic curves.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Line, ILineProperties, ILineAdapters, ILineEvents } from \"./Line\";\r\nimport { IPoint, IOrientationPoint } from \"../defs/IPoint\";\r\nimport { color } from \"../utils/Color\";\r\nimport * as $path from \"../rendering/Path\";\r\nimport * as $math from \"../utils/Math\";\r\nimport * as $type from \"../utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines available properties for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveProperties extends ILineProperties {\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t */\r\n\tcpx?: number;\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t */\r\n\tcpy?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[QuadraticCurve]].\r\n */\r\nexport interface IQuadraticCurveEvents extends ILineEvents { }\r\n\r\n/**\r\n * Defines adapters for [[QuadraticCurve]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IQuadraticCurveAdapters extends ILineAdapters, IQuadraticCurveProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws a waved line.\r\n *\r\n * @see {@link IQuadraticCurveEvents} for a list of available events\r\n * @see {@link IQuadraticCurveAdapters} for a list of available Adapters\r\n */\r\nexport class QuadraticCurve extends Line {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IQuadraticCurveProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IQuadraticCurveAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IQuadraticCurveEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"QuadraticCurve\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis.pixelPerfect = false;\r\n\r\n\t\tthis.fill = color();\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the waved line.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\t//super.draw();\r\n\t\tif($type.isNumber(this.x1 + this.x2 + this.y1 + this.y2 + this.cpx + this.cpy )){\r\n\r\n\t\t\tlet p1: IPoint = { x: this.x1, y: this.y1 };\r\n\t\t\tlet p2: IPoint = { x: this.x2, y: this.y2 };\r\n\t\t\tlet cp: IPoint = { x: this.cpx, y: this.cpy };\r\n\r\n\t\t\tlet d: string = $path.moveTo(p1) + $path.quadraticCurveTo(p2, cp);\r\n\r\n\t\t\tthis.path = d;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * X coordinate of control point.\r\n\t *\r\n\t * @param value X\r\n\t */\r\n\tpublic set cpx(value: number) {\r\n\t\tthis.setPropertyValue(\"cpx\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get cpx(): number {\r\n\t\treturn this.getPropertyValue(\"cpx\");\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate of control point.\r\n\t *\r\n\t * @param value Y\r\n\t */\r\n\tpublic set cpy(value: number) {\r\n\t\tthis.setPropertyValue(\"cpy\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get cpy(): number {\r\n\t\treturn this.getPropertyValue(\"cpy\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts relative position along the line (0-1) into pixel coordinates.\r\n\t *\r\n\t * @param position  Position (0-1)\r\n\t * @return Coordinates\r\n\t */\r\n\tpublic positionToPoint(position: number): IOrientationPoint {\r\n\t\tlet p1 = {x:this.x1, y:this.y1};\r\n\t\tlet cp = {x:this.cpx, y:this.cpy};\r\n\t\tlet p2 = {x:this.x2, y:this.y2};\r\n\r\n\t\tlet point1 = $math.getPointOnQuadraticCurve(p1, p2, cp, position);\r\n\t\tlet point2 = $math.getPointOnQuadraticCurve(p1, p2, cp, position + 0.001);\r\n\r\n\t\treturn {x:point1.x, y:point1.y, angle:$math.getAngle(point1, point2)};\r\n\t}\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/core/elements/QuadraticCurve.ts","/**\r\n * ChordLink module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ChordDiagramDataItem } from \"../types/ChordDiagram\";\r\nimport { FlowDiagramLink, IFlowDiagramLinkAdapters, IFlowDiagramLinkEvents, IFlowDiagramLinkProperties } from \"./FlowDiagramLink\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { QuadraticCurve } from \"../../core/elements/QuadraticCurve\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ChordLink]].\r\n */\r\nexport interface IChordLinkProperties extends IFlowDiagramLinkProperties {\r\n\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tradius?: number;\r\n\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tarc?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordLink]].\r\n */\r\nexport interface IChordLinkEvents extends IFlowDiagramLinkEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordLink]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordLinkAdapters extends IFlowDiagramLinkAdapters, IChordLinkProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * This class creates a link (waved color-filled line) between two nodes in a\r\n * Chord Diagram.\r\n *\r\n * @see {@link IChordLinkEvents} for a list of available events\r\n * @see {@link IChordLinkAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class ChordLink extends FlowDiagramLink {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordLinkProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordLinkAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordLinkEvents;\r\n\r\n\t/**\r\n\t * Defines a type of data item used by this class.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Spline which goes through the middle of a link, used to calculate bullet and tooltip positions, invisible by default\r\n     */\r\n\tpublic middleLine: QuadraticCurve;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordLink\";\r\n\r\n\t\tthis.middleLine = this.createChild(QuadraticCurve);\r\n\t\tthis.middleLine.shouldClone = false;\r\n\t\tthis.middleLine.strokeOpacity = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates (redraws) the link.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\r\n\t\tif (!this.isTemplate) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\r\n\t\t\tlet arc = this.arc;\r\n\t\t\tlet radius = this.radius;\r\n\r\n\t\t\tlet fromNode = this.dataItem.fromNode;\r\n\t\t\tlet toNode = this.dataItem.toNode;\r\n\r\n\t\t\tlet fromX = 0;\r\n\t\t\tlet fromY = 0;\r\n\r\n\t\t\tif (fromNode) {\r\n\t\t\t\tfromX = fromNode.pixelX + fromNode.dx;\r\n\t\t\t\tfromY = fromNode.pixelY + fromNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tlet toX = 0;\r\n\t\t\tlet toY = 0;\r\n\r\n\t\t\tif (toNode) {\r\n\t\t\t\ttoX = toNode.pixelX + toNode.dx;\r\n\t\t\t\ttoY = toNode.pixelY + toNode.dy;\r\n\t\t\t}\r\n\r\n\t\t\tif (radius > 0) {\r\n\t\t\t\tlet x1 = radius * $math.cos(startAngle) + fromX;\r\n\t\t\t\tlet y1 = radius * $math.sin(startAngle) + fromY;\r\n\t\t\t\tlet x2 = radius * $math.cos(endAngle) + toX;\r\n\t\t\t\tlet y2 = radius * $math.sin(endAngle) + toY;\r\n\r\n\t\t\t\t//let cpAngle = startAngle + arc + (endAngle - startAngle - arc) / 2;\r\n\t\t\t\t//let arcWidth = $math.getDistance({x:x1, y:y1}, {x:x4, y:y4});\r\n\r\n\t\t\t\t//let cpx = (arcWidth) * $math.cos(cpAngle);\r\n\t\t\t\t//let cpy = (arcWidth) * $math.sin(cpAngle);\r\n\r\n\t\t\t\tlet cp = { x: 0, y: 0 };\r\n\t\t\t\tlet path = $path.moveTo({ x: x1, y: y1 });\r\n\r\n\t\t\t\tpath += $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x2, y: y2 }, cp);\r\n\t\t\t\tpath += $path.arcTo(endAngle, arc, radius);\r\n\t\t\t\tpath += $path.quadraticCurveTo({ x: x1, y: y1 }, cp);\r\n\r\n\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\tthis.link.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.link.path = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.maskBullets) {\r\n\t\t\t\t\tthis.bulletsMask.path = path;\r\n\t\t\t\t\tthis.bulletsContainer.mask = this.bulletsMask;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet mAngle1 = startAngle + arc / 2;\r\n\t\t\t\tlet mAngle2 = endAngle + arc / 2;\r\n\r\n\t\t\t\tlet middleLine = this.middleLine;\r\n\r\n\t\t\t\tmiddleLine.x1 = radius * $math.cos(mAngle1) + fromX;\r\n\t\t\t\tmiddleLine.y1 = radius * $math.sin(mAngle1) + fromY;\r\n\t\t\t\tmiddleLine.x2 = radius * $math.cos(mAngle2) + toX;\r\n\t\t\t\tmiddleLine.y2 = radius * $math.sin(mAngle2) + toY;\r\n\r\n\t\t\t\tmiddleLine.cpx = 0;\r\n\t\t\t\tmiddleLine.cpy = 0;\r\n\r\n\t\t\t\tmiddleLine.stroke = this.fill;\r\n\r\n\t\t\t\tthis.positionBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * [radius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value End Y\r\n\t */\r\n\tpublic set radius(value: number) {\r\n\t\tthis.setPropertyValue(\"radius\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End Y\r\n\t */\r\n\tpublic get radius(): number {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * [arc description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set arc(value: number) {\r\n\t\tthis.setPropertyValue(\"arc\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return [description]\r\n\t */\r\n\tpublic get arc(): number {\r\n\t\treturn this.getPropertyValue(\"arc\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordLink\"] = ChordLink;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ChordLink.ts","/**\r\n * Chord diagram module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { FlowDiagram, FlowDiagramDataItem, IFlowDiagramAdapters, IFlowDiagramDataFields, IFlowDiagramEvents, IFlowDiagramProperties } from \"./FlowDiagram\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport { DictionaryTemplate } from \"../../core/utils/Dictionary\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { ChordNode } from \"../elements/ChordNode\";\r\nimport { ChordLink } from \"../elements/ChordLink\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo rearange notes after dragged\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ChordDiagram]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ChordDiagramDataItem extends FlowDiagramDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ChordDiagram;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * An origin node.\r\n\t */\r\n\tpublic fromNode: ChordNode;\r\n\r\n\t/**\r\n\t * A destination node.\r\n\t */\r\n\tpublic toNode: ChordNode;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagramDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramDataFields extends IFlowDiagramDataFields {\r\n\r\n\t/**\r\n\t * Name of the source node.\r\n\t */\r\n\tfromName?: string;\r\n\r\n\t/**\r\n\t * Name of the target node.\r\n\t */\r\n\ttoName?: string;\r\n\r\n\t/**\r\n\t * Value of the link between two nodes.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * Color of a from node\r\n\t */\r\n\tcolor?: string;\r\n}\r\n\r\n/**\r\n * Defines properties for [[ChordDiagram]]\r\n */\r\nexport interface IChordDiagramProperties extends IFlowDiagramProperties {\r\n\t/**\r\n\t * Radius of the Chord. Absolute or relative.\r\n\t */\r\n\tradius?: number | Percent;\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes. Absolute or relative. Negative value means that the inner radius will be calculated from the radius, not from the center.\r\n\t */\r\n\tinnerRadius?: number | Percent;\r\n\r\n\t/**\r\n\t * An angle radar face starts on. (degrees)\r\n\t *\r\n\t * @default -90\r\n\t */\r\n\tstartAngle?: number;\r\n\r\n\t/**\r\n\t * An angle radar face ends on. (degrees)\r\n\t *\r\n\t * @default 270\r\n\t */\r\n\tendAngle?: number;\r\n\r\n\r\n\t/**\r\n\t * If you set this to true, all the lines will be of the same width.\r\n\t *\r\n\t * @default false\r\n\t */\r\n\tnonRibbon?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[ChordDiagram]].\r\n */\r\nexport interface IChordDiagramEvents extends IFlowDiagramEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ChordDiagram]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IChordDiagramAdapters extends IFlowDiagramAdapters, IChordDiagramProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a Chord Diagram chart.\r\n *\r\n * @see {@link IChordDiagramEvents} for a list of available Events\r\n * @see {@link IChordDiagramAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/chord-diagram/} for documentation\r\n * @important\r\n */\r\nexport class ChordDiagram extends FlowDiagram {\r\n\r\n\t/**\r\n\t * Defines a type for the DataItem.\r\n\t */\r\n\tpublic _dataItem: ChordDiagramDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IChordDiagramDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IChordDiagramProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IChordDiagramAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IChordDiagramEvents;\r\n\r\n\t/**\r\n\t * A list of chart's Chord nodes.\r\n\t *\r\n\t * @param {DictionaryTemplate<string, ChordNode>}\r\n\t */\r\n\tpublic nodes: DictionaryTemplate<string, ChordNode>;\r\n\r\n\t/**\r\n\t * An a link element, connecting two nodes.\r\n\t */\r\n\tpublic _link: ChordLink;\r\n\r\n\t/**\r\n\t * Sorted nodes iterator.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _sorted: $iter.Iterator<[string, ChordNode]>;\r\n\r\n\t/**\r\n\t * [valueAngle description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic valueAngle: number = 0;\r\n\r\n\t/**\r\n\t * A container for chord elemens.\r\n\t */\r\n\tpublic chordContainer:Container;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _node:ChordNode;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"ChordDiagram\";\r\n\r\n\t\tthis.startAngle = -90;\r\n\t\tthis.endAngle = 270;\r\n\r\n\t\tthis.radius = percent(80);\r\n\r\n\t\tthis.innerRadius = - 15;\r\n\r\n\t\tthis.nodePadding = 5;\r\n\r\n\t\tlet chordContainer = this.chartContainer.createChild(Container);\r\n\t\tchordContainer.align = \"center\";\r\n\t\tchordContainer.valign = \"middle\";\r\n\t\tchordContainer.shouldClone = false;\r\n\t\tchordContainer.layout = \"absolute\";\r\n\t\tthis.chordContainer = chordContainer;\r\n\r\n\t\tthis.nodesContainer.parent = chordContainer;\r\n\t\tthis.linksContainer.parent = chordContainer;\r\n\r\n\t\tthis.chartContainer.events.on(\"maxsizechanged\", this.invalidate, this, false);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Redraws the chart.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tlet chartContainer = this.chartContainer;\r\n\r\n\t\tlet endAngle = this.endAngle;\r\n\t\tlet startAngle = this.startAngle + this.nodePadding / 2;\r\n\r\n\t\tlet rect = $math.getArcRect(this.startAngle, this.endAngle, 1);\r\n\t\tlet innerRect: IRectangle = { x: 0, y: 0, width: 0, height: 0 };\r\n\r\n\t\trect = $math.getCommonRectangle([rect, innerRect]);\r\n\r\n\t\tlet maxRadius = Math.min(chartContainer.innerWidth / rect.width, chartContainer.innerHeight / rect.height);\r\n\r\n\t\tif(!$type.isNumber(maxRadius)){\r\n\t\t\tmaxRadius = 0;\r\n\t\t}\r\n\r\n\t\tlet radius = $utils.relativeRadiusToValue(this.radius, maxRadius);\r\n\t\tlet pixelInnerRadius = $utils.relativeRadiusToValue(this.innerRadius, radius, true);\r\n\r\n\t\tlet total = this.dataItem.values.value.sum;\r\n\t\tlet count = 0;\r\n\r\n\t\tlet newTotal = 0;\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tthis.getNodeValue(node);\r\n\t\t\tcount++;\r\n\t\t\tlet value = node.total;\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\t\t\tnewTotal += value;\r\n\t\t});\r\n\r\n\t\tthis.valueAngle = (endAngle - this.startAngle - this.nodePadding * count) / newTotal;\r\n\r\n\t\t$iter.each(this._sorted, (strNode) => {\r\n\t\t\tlet node = strNode[1];\r\n\t\t\tlet slice = node.slice;\r\n\r\n\t\t\tslice.radius = radius;\r\n\t\t\tslice.innerRadius = pixelInnerRadius;\r\n\r\n\t\t\tlet value = node.total;\r\n\r\n\t\t\tif(node.total / total < this.minNodeSize){\r\n\t\t\t\tvalue = total * this.minNodeSize;\r\n\t\t\t}\r\n\r\n\t\t\tnode.adjustedTotal = value;\r\n\r\n\t\t\tlet arc: number;\r\n\t\t\tif (this.nonRibbon) {\r\n\t\t\t\tarc = (endAngle - this.startAngle) / count - this.nodePadding;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tarc = this.valueAngle * value;\r\n\t\t\t}\r\n\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.startAngle = startAngle;\r\n\t\t\tnode.trueStartAngle = startAngle;\r\n\t\t\tnode.parent = this.nodesContainer;\r\n\t\t\tnode.validate(); // otherwise flickers - nodes are already created, but not yet positioned etc.\r\n\t\t\tstartAngle += arc + this.nodePadding;\r\n\t\t})\r\n\r\n\t\tthis.chordContainer.definedBBox = { x: radius * rect.x, y: radius * rect.y, width: radius * rect.width, height: radius * rect.height };\r\n\t\tthis.chordContainer.invalidateLayout();\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Chord diagram\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new data item.\r\n\t *\r\n\t * @return Data item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ChordDiagramDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face begins (the radial axis is drawn) at the\r\n\t * top center. (at -90 degrees)\r\n\t *\r\n\t * You can use `startAngle` to change this setting.\r\n\t *\r\n\t * E.g. setting this to 0 will make the radial axis start horizontally to\r\n\t * the right, as opposed to vertical.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  Start angle (degrees)\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle (degrees)\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the Radar face. (degrees)\r\n\t *\r\n\t * Normally, a circular radar face ends (the radial axis is drawn) exactly\r\n\t * where it has started, forming a full 360 circle. (at 270 degrees)\r\n\t *\r\n\t * You can use `endAngle` to end the circle somewhere else.\r\n\t *\r\n\t * E.g. setting this to 180 will make the radar face end at horizontal line\r\n\t * to the left off the center.\r\n\t *\r\n\t * For a perfect circle the absolute sum of `startAngle` and `endAngle`\r\n\t * needs to be 360.\r\n\t *\r\n\t * However, it's **not** necessary to do so. You can set those to lesser\r\n\t * numbers, to create semi-circles.\r\n\t *\r\n\t * E.g. `startAngle = -90` with `endAngle = 0` will create a radar face that\r\n\t * looks like a quarter of a circle.\r\n\t *\r\n\t * @default -90\r\n\t * @param value  End angle (degrees)\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle (degrees)\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the Radar face.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the Chord nodes.\r\n\t *\r\n\t * This can either be in absolute pixel value, or relative [[Percent]].\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * If you set this to true, all the lines will be of the same width. This is done by making middleLine of a ChordLink visible.\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set nonRibbon(value: boolean) {\r\n\t\tthis.setPropertyValue(\"nonRibbon\", value, true);\r\n\t\tthis.links.template.middleLine.strokeOpacity = 1;\r\n\t\tthis.links.template.link.fillOpacity = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Non-ribbon\r\n\t */\r\n\tpublic get nonRibbon(): boolean {\r\n\t\treturn this.getPropertyValue(\"nonRibbon\");\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createNode():this[\"_node\"]{\r\n\t\tlet node = new ChordNode();\r\n\t\tthis._disposers.push(node);\r\n\t\treturn node;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic createLink():this[\"_link\"]{\r\n\t\tlet link = new ChordLink();\r\n\t\tthis._disposers.push(link);\r\n\t\treturn link;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ChordDiagram\"] = ChordDiagram;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/ChordDiagram.ts","/**\r\n * Module that defines everything related to building Columns.\r\n * It is a container which has column element which is a RoundedRectangle.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport { IRectangle } from \"../../core/defs/IRectangle\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column]].\r\n */\r\nexport interface IColumnProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Column]].\r\n */\r\nexport interface IColumnEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnAdapters extends IContainerAdapters, IColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Columns.\r\n *\r\n * @see {@link IColumnEvents} for a list of available events\r\n * @see {@link IColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnEvents;\r\n\r\n\t/**\r\n\t * column element\r\n\t */\r\n\tpublic column: RoundedRectangle;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realWidth: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realHeight: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realX: number;\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic realY: number;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column\";\r\n\r\n\t\tthis.width = percent(80);\r\n\t\tthis.height = percent(80);\r\n\r\n\t\t//this.isMeasured = true; // for correct position of the tooltip\r\n\t\tthis.applyOnClones = true;\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tthis.layout = \"none\";\r\n\r\n\t\tthis.createAssets();\r\n\r\n\t\t// otherwise users will have to set layout themselves if they'll want to align, scale etc children\r\n\t\tthis.events.on(\"childadded\", this.handleKidAdded, this, false);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected handleKidAdded() {\r\n\t\tif (this.layout == \"none\") {\r\n\t\t\tthis.layout = \"absolute\";\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column = this.createChild(RoundedRectangle);\r\n\t\tthis.column.shouldClone = false;\r\n\t\tthis.column.cornerRadius(0, 0, 0, 0);\r\n\t\tthis._disposers.push(this.column);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tlet column = this.column;\r\n\t\tif (column) {\r\n\t\t\tcolumn.width = $math.min(this.pixelWidth, this.maxWidth);\r\n\t\t\tcolumn.height = $math.min(this.pixelHeight, this.maxHeight);\r\n\t\t\tif(column.invalid){\r\n\t\t\t\tcolumn.validate(); // important!\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Copies all parameters from another [[Column]].\r\n\t *\r\n\t * @param source Source Column\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.column) {\r\n\t\t\tthis.column.copyFrom(source.column);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns bounding box (square) for this element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get bbox(): IRectangle {\r\n\t\tif (this.definedBBox) {\r\n\t\t\treturn this.definedBBox;\r\n\t\t}\r\n\t\tif (this.column) {\r\n\t\t\treturn { x: 0, y: 0, width: this.column.measuredWidth, height: this.column.measuredHeight };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn { x: 0, y: 0, width: $math.min(this.pixelWidth, this.maxWidth), height: $math.min(this.pixelHeight, this.maxHeight) };\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column\"] = Column;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column.ts","/**\r\n * Column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYSeries, IXYSeriesDataFields, XYSeriesDataItem, IXYSeriesProperties, IXYSeriesAdapters, IXYSeriesEvents } from \"./XYSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { SpriteState } from \"../../core/SpriteState\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Dictionary } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { CategoryAxis } from \"../axes/CategoryAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { Column } from \"../elements/Column\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ColumnSeriesDataItem extends XYSeriesDataItem {\r\n\r\n\t/**\r\n\t * A Column Element\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Indicates if this data items close value is lower than its open value.\r\n\t */\r\n\tpublic droppedFromOpen: boolean;\r\n\r\n\t/**\r\n\t * Indicates if this items value is lower than previous data item's value.\r\n\t */\r\n\tpublic droppedFromPrevious: boolean;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t */\r\n\tpublic _component!: ColumnSeries;\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tprotected _rangesColumns: Dictionary<string, this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\r\n\t\tthis.locations[\"dateX\"] = 0.5;\r\n\t\tthis.locations[\"dateY\"] = 0.5;\r\n\r\n\t\tthis.locations[\"categoryX\"] = 0.5;\r\n\t\tthis.locations[\"categoryY\"] = 0.5;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A column used to draw a column for this data item.\r\n\t *\r\n\t * @param column\r\n\t */\r\n\tpublic set column(column: this[\"_column\"]) {\r\n\t\tthis.setColumn(column);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Column\r\n\t */\r\n\tpublic get column(): this[\"_column\"] {\r\n\t\treturn this._column;\r\n\t}\r\n\r\n\tprotected setColumn(column: this[\"_column\"]) {\r\n\t\tif (this._column && column != this._column) {\r\n\t\t\t$array.remove(this.sprites, this._column);\r\n\t\t}\r\n\t\tthis._column = column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet prevDataItem: ColumnSeriesDataItem = <any>column.dataItem;\r\n\t\t\tif (prevDataItem && prevDataItem != this) {\r\n\t\t\t\tprevDataItem.column = undefined;\r\n\t\t\t}\r\n\t\t\tthis.addSprite(column);\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\t// TODO investigate why component is undefined\r\n\t\t\t\t// https://codepen.io/team/amcharts/pen/dac4be245d658233a6d7e5597df2208b?editors=0010\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.columns.removeValue(column);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * A dictionary storing axes ranges columns by axis uid\r\n\t */\r\n\tpublic get rangesColumns(): Dictionary<string, this[\"_column\"]> {\r\n\t\tif (!this._rangesColumns) {\r\n\t\t\tthis._rangesColumns = new Dictionary<string, this[\"_column\"]>();\r\n\t\t}\r\n\t\treturn this._rangesColumns;\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesDataFields extends IXYSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesProperties extends IXYSeriesProperties {\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tclustered?: boolean;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries]].\r\n */\r\nexport interface IColumnSeriesEvents extends IXYSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeriesAdapters extends IXYSeriesAdapters, IColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a column graph.\r\n *\r\n * @see {@link IColumnSeriesEvents} for a list of available Events\r\n * @see {@link IColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries extends XYSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * A list of column elements.\r\n\t */\r\n\tprotected _columns: ListTemplate<this[\"_column\"]>;\r\n\r\n\t/**\r\n\t * Container to put column elements in.\r\n\t */\r\n\tprotected _columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Start location within cell for columns.\r\n\t */\r\n\tprotected _startLocation: number = 0;\r\n\r\n\t/**\r\n\t * End location within cell for columns.\r\n\t */\r\n\tprotected _endLocation: number = 1;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t */\r\n\tprotected _dropFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t */\r\n\tprotected _dropFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t */\r\n\tprotected _riseFromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t */\r\n\tprotected _riseFromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.strokeOpacity = 0;\r\n\t\tthis.fillOpacity = 1;\r\n\r\n\t\tthis.clustered = true;\r\n\r\n\t\tlet columnsContainer = this.mainContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis._columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\r\n\t\tthis.tooltipColorSource = this.columns.template;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A container that columns are created in.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic get columnsContainer() {\r\n\t\treturn this._columnsContainer;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Column Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new ColumnSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\t//@todo Check if we can do better than use `instanceof`\r\n\t\t// find start/end locations based on clustered/stacked settings\r\n\t\t// go through chart series instead of base axis series, because axis series doesn't maintain order\r\n\t\tlet baseAxisSeries = this.chart.series;\r\n\t\tlet clusterCount: number = 0;\r\n\t\tlet index: number = 0;\r\n\r\n\t\t$iter.each(baseAxisSeries.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries) {\r\n\t\t\t\tif (this.baseAxis == series.baseAxis) {\r\n\t\t\t\t\tif ((!series.stacked && series.clustered) || clusterCount === 0) {\r\n\t\t\t\t\t\tclusterCount++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (series == this) {\r\n\t\t\t\t\t\tindex = clusterCount - 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet renderer = this.baseAxis.renderer;\r\n\r\n\t\tlet cellStartLocation: number = renderer.cellStartLocation;\r\n\t\tlet cellEndLocation: number = renderer.cellEndLocation;\r\n\r\n\t\tthis._startLocation = cellStartLocation + (index / clusterCount) * (cellEndLocation - cellStartLocation);\r\n\t\tthis._endLocation = cellStartLocation + (index + 1) / clusterCount * (cellEndLocation - cellStartLocation);\r\n\r\n\t\tsuper.validate();\r\n\r\n\t\tfor (let i = 0; i < this.startIndex; i++) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tfor (let i = this.dataItems.length - 1; i > this.endIndex; i--) {\r\n\t\t\tlet dataItem = this.dataItems.getIndex(i);\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\t// important oder here, first real, then super. we need this to know size\r\n\t\tthis.validateDataElementReal(dataItem);\r\n\t\tsuper.validateDataElement(dataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative start location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getStartLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet startLocation = this._startLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tstartLocation += dataItem.locations[this.xOpenField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tstartLocation += dataItem.locations[this.yOpenField] - 0.5;\r\n\t\t}\r\n\t\treturn startLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemWorkingValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (this.simplifiedProcessing) {\r\n\t\t\tthis.validateDataElement(dataItem);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsuper.handleDataItemWorkingValueChange(dataItem, name);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns relative end location for the data item.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t * @return Location (0-1)\r\n\t */\r\n\tprotected getEndLocation(dataItem: this[\"_dataItem\"]): number {\r\n\t\tlet endLocation = this._endLocation;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tendLocation += dataItem.locations[this.xField] - 0.5;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tendLocation += dataItem.locations[this.yField] - 0.5;\r\n\t\t}\r\n\t\treturn endLocation;\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\t//\tif (dataItem.hasValue([this.xField, this.yField])) { // todo: this doesn't work with categories, think of a better way\r\n\t\tlet l: number;\r\n\t\tlet r: number;\r\n\t\tlet t: number;\r\n\t\tlet b: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet xField = this.xField;\r\n\t\tlet xOpenField = this.xOpenField;\r\n\t\tlet yField = this.yField;\r\n\t\tlet yOpenField = this.yOpenField;\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\t\tlet percentHeight: number = template.percentHeight;\r\n\r\n\t\tlet pixelWidth: number = template.pixelWidth;\r\n\t\tlet pixelHeight: number = template.pixelHeight;\r\n\r\n\t\tlet maxWidth: number = template.maxWidth;\r\n\t\tlet maxHeight: number = template.maxHeight;\r\n\r\n\t\tlet paddingLeft: number = template.pixelPaddingLeft;\r\n\t\tlet paddingRight: number = template.pixelPaddingRight;\r\n\t\tlet paddingTop: number = template.pixelPaddingTop;\r\n\t\tlet paddingBottom: number = template.pixelPaddingBottom;\r\n\r\n\t\tlet outOfBounds: boolean = false;\r\n\r\n\t\t// two category axes\r\n\t\tif ((this.xAxis instanceof CategoryAxis) && (this.yAxis instanceof CategoryAxis)) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields) || !dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tstartLocation = 0;\r\n\t\t\tendLocation = 1;\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case max width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb += offset;\r\n\t\t\t\tt -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\t\t}\r\n\t\telse if (this.baseAxis == this.xAxis) {\r\n\r\n\t\t\tif (!dataItem.hasValue(this._yValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in percent\r\n\t\t\tif (!$type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, startLocation);\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, endLocation);\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - pixelWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case width is set in pixels\r\n\t\t\tif (!$type.isNaN(maxWidth)) {\r\n\t\t\t\tlet offset: number = ((r - l) - maxWidth) / 2;\r\n\t\t\t\tl += offset;\r\n\t\t\t\tr -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomLocation = dataItem.locations[yOpenField];\r\n\t\t\tlet topLocation = dataItem.locations[yField];\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.yAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.yField] != (<any>this.dataFields)[this.yOpenField]) {\r\n\t\t\t\t\tbottomLocation = 0;\r\n\t\t\t\t\ttopLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tb = this.yAxis.getY(dataItem, yOpenField, bottomLocation);\r\n\t\t\tt = this.yAxis.getY(dataItem, yField, topLocation);\r\n\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[xField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.yAxis.axisLength);\r\n\r\n\t\t\tif ((t < 0 && b < 0) || (t > axisLenght && b > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.fixVerticalCoordinate(t);\r\n\t\t\tb = this.fixVerticalCoordinate(b);\r\n\r\n\t\t\tif (Math.abs(r - l) - paddingLeft - paddingRight == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// horizontal bars\r\n\t\telse {\r\n\t\t\tif (!dataItem.hasValue(this._xValueFields)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (!$type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentHeight / 100) / 2, 5);\r\n\t\t\t\tstartLocation += offset;\r\n\t\t\t\tendLocation -= offset;\r\n\t\t\t}\r\n\r\n\t\t\tt = this.yAxis.getY(dataItem, yOpenField, startLocation);\r\n\t\t\tb = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif ($type.isNaN(percentHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - pixelHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\t// in case height is set in pixels\r\n\t\t\tif (!$type.isNaN(maxHeight)) {\r\n\t\t\t\tlet offset: number = ((b - t) - maxHeight) / 2;\r\n\t\t\t\tb -= offset;\r\n\t\t\t\tt += offset;\r\n\t\t\t}\r\n\r\n\t\t\tlet rightLocation = dataItem.locations[xField];\r\n\t\t\tlet leftLocation = dataItem.locations[xOpenField];\r\n\r\n\t\t\t// otherwise gantt chart will start items in the middle of a cell\r\n\t\t\tif (this.xAxis instanceof ValueAxis) {\r\n\t\t\t\tif ((<any>this.dataFields)[this.xField] != (<any>this.dataFields)[this.xOpenField]) {\r\n\t\t\t\t\trightLocation = 0;\r\n\t\t\t\t\tleftLocation = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tr = this.xAxis.getX(dataItem, xField, rightLocation);\r\n\t\t\tl = this.xAxis.getX(dataItem, xOpenField, leftLocation);\r\n\t\t\t// used to save location for bullets, but it's not a good approach\r\n\t\t\t// dataItem.locations[yField] = startLocation + (endLocation - startLocation) / 2;\r\n\r\n\t\t\tlet axisLenght = Math.ceil(this.xAxis.axisLength);\r\n\r\n\t\t\tif ((r < 0 && l < 0) || (r > axisLenght && l > axisLenght)) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\r\n\t\t\tr = this.fixHorizontalCoordinate(r);\r\n\t\t\tl = this.fixHorizontalCoordinate(l);\r\n\r\n\t\t\tif (Math.abs(t - b) - paddingTop - paddingBottom == 0) {\r\n\t\t\t\toutOfBounds = true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet w: number = Math.abs(r - l);\r\n\t\tlet h: number = Math.abs(b - t);\r\n\r\n\t\tlet x: number = Math.min(l, r);\r\n\t\tlet y: number = Math.min(t, b);\r\n\r\n\t\tif (!outOfBounds) {\r\n\t\t\tlet column: this[\"_column\"];\r\n\t\t\tif (!dataItem.column) {\r\n\t\t\t\tcolumn = this.columns.create();\r\n\t\t\t\t//$object.forceCopyProperties(this.columns.template, column, visualProperties);\r\n\t\t\t\t$object.copyProperties(this, column, visualProperties); // need this because 3d columns are not in the same container\r\n\t\t\t\t$object.copyProperties(this.columns.template, column, visualProperties); // second time, no force, so that columns.template would override series properties\r\n\t\t\t\tdataItem.addSprite(column);\r\n\r\n\t\t\t\tdataItem.column = column;\r\n\t\t\t\tcolumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\r\n\t\t\t\t// accessibility\r\n\t\t\t\tif (this.itemsFocusable()) {\r\n\t\t\t\t\tcolumn.role = \"menuitem\";\r\n\t\t\t\t\tcolumn.focusable = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tcolumn.role = \"listitem\";\r\n\t\t\t\t\tcolumn.focusable = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (column.focusable) {\r\n\t\t\t\t\tcolumn.events.on(\"focus\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"blur\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t\tif (column.hoverable) {\r\n\t\t\t\t\tcolumn.events.on(\"over\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = this.populateString(this.itemReaderText, dataItem);\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t\tcolumn.events.on(\"out\", (ev) => {\r\n\t\t\t\t\t\tcolumn.readerTitle = \"\";\r\n\t\t\t\t\t}, undefined, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn = dataItem.column;\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.width = w;\r\n\t\t\tcolumn.height = h;\r\n\r\n\t\t\tcolumn.x = x;\r\n\t\t\tcolumn.y = y;\r\n\r\n\t\t\tcolumn.realX = l;\r\n\t\t\tcolumn.realY = t;\r\n\r\n\t\t\tcolumn.realWidth = r - l;\r\n\t\t\tcolumn.realHeight = b - t;\r\n\r\n\t\t\tcolumn.parent = this.columnsContainer;\r\n\t\t\tcolumn.virtualParent = this;\r\n\r\n\t\t\tthis.setColumnStates(column);\r\n\r\n\t\t\tif (column.invalid) {\r\n\t\t\t\tcolumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t}\r\n\r\n\t\t\tcolumn.__disabled = false;\r\n\t\t\t//column.returnAfterTemp();\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: this[\"_column\"] = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t//$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, <Column>rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\r\n\t\t\t\trangeColumn.width = w;\r\n\t\t\t\trangeColumn.height = h;\r\n\t\t\t\trangeColumn.x = x;\r\n\t\t\t\trangeColumn.y = y;\r\n\r\n\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\r\n\t\t\t\tif (rangeColumn.invalid) {\r\n\t\t\t\t\trangeColumn.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\t//rangeColumn.returnAfterTemp();\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\r\n\t\tdataItem.itemWidth = w;\r\n\t\tdataItem.itemHeight = h;\r\n\t}\r\n\r\n\r\n\tdisableUnusedColumns(dataItem: ColumnSeriesDataItem) {\r\n\t\tif (dataItem) {\r\n\t\t\tif (dataItem.column) {\r\n\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\tdataItem.column.width = 0;\r\n\t\t\t\tdataItem.column.height = 0;\r\n\t\t\t\tdataItem.column.__disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn: Sprite = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\t// otherwise might flicker when enabling\r\n\t\t\t\t\trangeColumn.width = 0;\r\n\t\t\t\t\trangeColumn.height = 0;\r\n\t\t\t\t\trangeColumn.__disabled = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Apply different state/coloring to columns based on the change value.\r\n\t *\r\n\t * @param sprite  Sprite to apply state to\r\n\t * @todo Do not apply accessibility to wicks of the candlesticks\r\n\t */\r\n\tprotected setColumnStates(sprite: Sprite): void {\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>sprite.dataItem;\r\n\r\n\t\tif (this.xAxis instanceof ValueAxis || this.yAxis instanceof ValueAxis) {\r\n\t\t\tlet open: number;\r\n\t\t\tlet value: number;\r\n\t\t\tlet change: number;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tif (this.xOpenField && this.xField && this.xAxis instanceof ValueAxis) {\r\n\t\t\t\t\topen = dataItem.getValue(this.xOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.xField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.xAxis.axisFieldName + \"X\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this.yOpenField && this.yField && this.yAxis instanceof ValueAxis) {\r\n\t\t\t\t\topen = dataItem.getValue(this.yOpenField);\r\n\t\t\t\t\tvalue = dataItem.getValue(this.yField);\r\n\t\t\t\t\tchange = dataItem.getValue(this.yAxis.axisFieldName + \"Y\", \"previousChange\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (value < open) {\r\n\t\t\t\tdataItem.droppedFromOpen = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromOpenState)\r\n\t\t\t\tsprite.setState(this._dropFromOpenState, 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromOpen = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromOpenState)\r\n\t\t\t\tsprite.setState(this._riseFromOpenState, 0);\r\n\t\t\t}\r\n\r\n\t\t\tif (change < 0) {\r\n\t\t\t\tdataItem.droppedFromPrevious = true;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._dropFromPreviousState)\r\n\t\t\t\tsprite.setState((this._dropFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdataItem.droppedFromPrevious = false;\r\n\t\t\t\tsprite.defaultState.copyFrom(this._riseFromPreviousState)\r\n\t\t\t\tsprite.setState((this._riseFromPreviousState), 0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A list of column elements in the series.\r\n\t *\r\n\t * @return Columns\r\n\t */\r\n\tpublic get columns(): ListTemplate<this[\"_column\"]> {\r\n\t\tif (!this._columns) {\r\n\t\t\tthis._columns = new ListTemplate<this[\"_column\"]>(this.createColumnTemplate());\r\n\t\t\tthis._disposers.push(new ListDisposer(this._columns));\r\n\t\t\tthis._disposers.push(this._columns.template);\r\n\t\t}\r\n\t\treturn this._columns;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a column element to use as a template.\r\n\t *\r\n\t * @return Column template\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column();\r\n\t}\r\n\r\n\t/**\r\n\t * Cluster this series columns?\r\n\t *\r\n\t * Setting to `false` will make columns overlap with other series.\r\n\t *\r\n\t * @default true\r\n\t * @param value  Clustered?\r\n\t */\r\n\tpublic set clustered(value: boolean) {\r\n\t\tthis.setPropertyValue(\"clustered\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Clustered?\r\n\t */\r\n\tpublic get clustered(): boolean {\r\n\t\treturn this.getPropertyValue(\"clustered\");\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is lower than open value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromOpenState) {\r\n\t\t\tthis._dropFromOpenState = this.states.create(\"dropFromOpenState\");\r\n\t\t}\r\n\t\treturn this._dropFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is lower value of a previous\r\n\t * column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get dropFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._dropFromPreviousState) {\r\n\t\t\tthis._dropFromPreviousState = this.states.create(\"dropFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._dropFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when close value is same or higher than open\r\n\t * value.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * NOTE: this will work only if at least one axis is [[ValueAxis]].\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromOpenState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromOpenState) {\r\n\t\t\tthis._riseFromOpenState = this.states.create(\"riseFromOpenState\");\r\n\t\t}\r\n\t\treturn this._riseFromOpenState;\r\n\t}\r\n\r\n\t/**\r\n\t * A state to apply to a column when its value is same or higher than value\r\n\t * of a previous column.\r\n\t *\r\n\t * Can be used to differentiate appearance based on value relations.\r\n\t *\r\n\t * @readonly You can modify state object, but can't overwrite it\r\n\t * @return State\r\n\t */\r\n\tpublic get riseFromPreviousState(): SpriteState<this[\"_properties\"], this[\"_adapter\"]> {\r\n\t\tif (!this._riseFromPreviousState) {\r\n\t\t\tthis._riseFromPreviousState = this.states.create(\"riseFromPreviousState\");\r\n\t\t}\r\n\t\treturn this._riseFromPreviousState;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates value of the related legend item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic updateLegendValue(dataItem?: this[\"_dataItem\"], notRange?: boolean) {\r\n\t\tsuper.updateLegendValue(dataItem, notRange);\r\n\r\n\t\tif (this.legendDataItem) {\r\n\t\t\tlet marker: Container = this.legendDataItem.marker;\r\n\t\t\tlet fromOpenState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\t\t\tlet fromPreviousState: SpriteState<this[\"_properties\"], this[\"_adapter\"]>;\r\n\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tif (dataItem.droppedFromOpen) {\r\n\t\t\t\t\tfromOpenState = this._dropFromOpenState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromOpenState = this._riseFromOpenState;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (dataItem.droppedFromPrevious) {\r\n\t\t\t\t\tfromPreviousState = this._dropFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tfromPreviousState = this._riseFromPreviousState;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(marker.children.iterator(), (child) => {\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tchild.setState(fromPreviousState);\r\n\t\t\t\t\tchild.setState(fromOpenState);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// todo: think what to do here, maybe apply above states based on totals?\r\n\t\t\t\t\tchild.setState(this._riseFromPreviousState);\r\n\t\t\t\t\tchild.setState(this._riseFromOpenState);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = this.fill;\r\n\t\tlegendDataItem.colorOrig = this.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties from another instance of [[ColumnSeries]].\r\n\t *\r\n\t * @param source  Source series\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.columns.template.copyFrom(source.columns.template);\r\n\t}\r\n\r\n\t/**\r\n\t* returns bullet x location\r\n\t* @ignore\r\n\t*/\r\n\r\n\tprotected getBulletLocationX(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet bulletLocationX = bullet.locationX;\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\r\n\t\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationX(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t* returns bullet y location\r\n\t* @ignore\r\n\t*/\r\n\tprotected getBulletLocationY(bullet: Bullet, field: string): number {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet bulletLocationY = bullet.locationY;\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\t\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getBulletLocationY(bullet, field);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getAdjustedXLocation(dataItem: this[\"_dataItem\"], field: string) {\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet bulletLocationX = 0.5;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationX = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(bulletLocationX)) {\r\n\t\t\t\tbulletLocationX = 0.5;\r\n\t\t\t}\r\n\t\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationX;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getAdjustedXLocation(dataItem, field);\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getAdjustedYLocation(dataItem: this[\"_dataItem\"], field: string) {\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet bulletLocationY = 0.5;\r\n\t\t\tif (dataItem) {\r\n\t\t\t\tbulletLocationY = dataItem.locations[field];\r\n\t\t\t}\r\n\t\t\tif (!$type.isNumber(bulletLocationY)) {\r\n\t\t\t\tbulletLocationY = 0.5;\r\n\t\t\t}\r\n\t\t\treturn this._endLocation - (this._endLocation - this._startLocation) * bulletLocationY;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn super.getAdjustedXLocation(dataItem, field);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixVerticalCoordinate(coordinate: number): number {\r\n\t\tlet paddingBottom = this.columns.template.pixelPaddingBottom;\r\n\t\tlet paddingTop = this.columns.template.pixelPaddingTop;\r\n\r\n\t\tlet minY: number = -paddingTop;\r\n\t\tlet maxY: number = this.yAxis.axisLength + paddingBottom;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minY, maxY);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected fixHorizontalCoordinate(coordinate: number): number {\r\n\t\tlet paddingLeft = this.columns.template.pixelPaddingLeft;\r\n\t\tlet paddingRight = this.columns.template.pixelPaddingRight;\r\n\r\n\t\tlet minX: number = -paddingLeft;\r\n\t\tlet maxX: number = this.xAxis.axisLength + paddingRight;\r\n\r\n\t\treturn $math.fitToRange(coordinate, minX, maxX);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\t\tsuper.disposeData();\r\n\t\tthis.columns.clear();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries\"] = ColumnSeries;\r\nregistry.registeredClasses[\"ColumnSeriesDataItem\"] = ColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries.ts","/**\r\n * TreeMap series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { TreeMap, TreeMapDataItem } from \"../types/TreeMap\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { RoundedRectangle } from \"../../core/elements/RoundedRectangle\";\r\nimport { Container } from \"../../core/Container\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMapSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Data for the this particular item.\r\n\t *\r\n\t * @param value  Item's data\r\n\t */\r\n\t//public set dataContext(value: Object) {\r\n\t//\tthis._dataContext = value;\r\n\t//}\r\n\r\n\r\n\r\n\t/**\r\n\t * @return Item's data\r\n\t */\r\n\t/*\r\n   public get dataContext(): Object {\r\n\t   // It's because data of tree series is TreeMapDataItems.\r\n\t   if (this._dataContext) {\r\n\t\t   return (<any>this._dataContext).dataContext;\r\n\t   }\r\n   }*/\r\n\r\n\t/**\r\n\t * The name of the item's parent item.\r\n\t *\r\n\t * @return Parent name\r\n\t */\r\n\tpublic get parentName(): string {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem && treeMapDataItem.parent) {\r\n\t\t\treturn treeMapDataItem.parent.name;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's numeric value.\r\n\t *\r\n\t * @readonly\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\treturn treeMapDataItem.value;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A corresponding data item from the tree map.\r\n\t *\r\n\t * @readonly\r\n\t * @return Data item\r\n\t */\r\n\tpublic get treeMapDataItem(): TreeMapDataItem {\r\n\t\treturn <TreeMapDataItem>this._dataContext;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.hide(duration);\r\n\t\t}\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tlet treeMapDataItem = this.treeMapDataItem;\r\n\t\tif (treeMapDataItem) {\r\n\t\t\ttreeMapDataItem.show(duration, delay, fields);\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Name of the field in data that holds numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[TreeMapSeries]].\r\n */\r\nexport interface ITreeMapSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMapSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapSeriesAdapters extends IColumnSeriesAdapters, ITreeMapSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines Series for a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapSeriesEvents} for a list of available Events\r\n * @see {@link ITreeMapSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class TreeMapSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ITreeMapSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapSeriesEvents;\r\n\r\n\t/**\r\n\t * The level in treemap hierarchy series is at.\r\n\t */\r\n\tpublic level: number;\r\n\r\n\t/**\r\n\t * Type of the data item used by series.\r\n\t */\r\n\tpublic _dataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: TreeMap;\r\n\r\n\t/**\r\n\t * Parent data item of a series.\r\n\t */\r\n\tpublic parentDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"TreeMapSeries\";\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.fillOpacity = 1;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.minBulletDistance = 0;\r\n\t\tthis.columns.template.tooltipText = \"{parentName} {name}: {value}\"; //@todo add format number?\r\n\t\tthis.columns.template.configField = \"config\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tthis.stroke = interfaceColors.getFor(\"background\");\r\n\t\tthis.dataFields.openValueX = \"x0\";\r\n\t\tthis.dataFields.valueX = \"x1\";\r\n\t\tthis.dataFields.openValueY = \"y0\";\r\n\t\tthis.dataFields.valueY = \"y1\";\r\n\r\n\t\tthis.sequencedInterpolation = false;\r\n\r\n\t\tthis.showOnInit = false;\r\n\r\n\t\t// otherwise nodes don't stack nicely to each other\r\n\t\tthis.columns.template.pixelPerfect = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes data item.\r\n\t *\r\n\t * @param dataItem     Data item\r\n\t * @param dataContext  Raw data\r\n\t * @param index        Index of the data item\r\n\t */\r\n\tprotected processDataItem(dataItem: this[\"_dataItem\"], dataContext?: Object): void {\r\n\t\t(<TreeMapDataItem>dataContext).seriesDataItem = dataItem; // save a reference here. dataContext is TreeMapDataItem and we need to know dataItem sometimes\r\n\t\tsuper.processDataItem(dataItem, dataContext);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Shows series.\r\n\t *\r\n\t * @param duration  Duration of fade in (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", dataItem.treeMapDataItem.values.value.value);\r\n\t\t\tdataItem.show(duration);\r\n\t\t})\r\n\r\n\t\treturn super.showReal(interpolationDuration);\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of fade out (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet animation = super.hideReal(interpolationDuration);\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\t//dataItem.treeMapDataItem.setWorkingValue(\"value\", 0);\r\n\t\t\tdataItem.hide(duration);\r\n\t\t})\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Process values.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic processValues() {\r\n\r\n\t\t// Just overriding so that inherited method does not kick in.\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic dataChangeUpdate() {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Add empty data fields if the they are not set, so that XYSeries\r\n\t\t\t// dataField check does not result in error.\r\n\t\t\tif (!$type.hasValue(config.dataFields) || !$type.isObject(config.dataFields)) {\r\n\t\t\t\tconfig.dataFields = {};\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container) {\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: RoundedRectangle = marker.createChild(RoundedRectangle);\r\n\t\tcolumn.shouldClone = false;\r\n\t\t$object.copyProperties(this, column, visualProperties);\r\n\r\n\t\t//column.copyFrom(<any>this.columns.template);\r\n\t\tcolumn.padding(0, 0, 0, 0); // if columns will have padding (which is often), legend marker will be very narrow\r\n\t\tcolumn.width = w;\r\n\t\tcolumn.height = h;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMapSeries\"] = TreeMapSeries;\r\nregistry.registeredClasses[\"TreeMapSeriesDataItem\"] = TreeMapSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/TreeMapSeries.ts","/**\r\n * TreeMap chart module.\r\n *\r\n * Parts of the functionality used in this module are taken from D3.js library\r\n * (https://d3js.org/)\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { DictionaryTemplate, DictionaryDisposer } from \"../../core/utils/Dictionary\";\r\nimport { ValueAxis } from \"../axes/ValueAxis\";\r\nimport { OrderedListTemplate } from \"../../core/utils/SortedList\";\r\nimport { TreeMapSeries } from \"../series/TreeMapSeries\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { TreeMapSeriesDataItem } from \"../series/TreeMapSeries\";\r\nimport { NavigationBar } from \"../elements/NavigationBar\";\r\nimport { ColorSet } from \"../../core/utils/ColorSet\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport { Export } from \"../../core/export/Export\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $array from \"../../core/utils/Array\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[TreeMap]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class TreeMapDataItem extends XYChartDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: TreeMap;\r\n\r\n\t/**\r\n\t * A treemap level this data item is displayed at.\r\n\t */\r\n\tprotected _level: number;\r\n\r\n\t/**\r\n\t * Series of children data items.\r\n\t */\r\n\tprotected _series: TreeMapSeries;\r\n\r\n\t/**\r\n\t * Related series data item.\r\n\t */\r\n\tpublic seriesDataItem: TreeMapSeriesDataItem;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rows: TreeMapDataItem[] = [];\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic rowsRatio: number;\r\n\r\n\t/**\r\n\t * Required for squarify functionality.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic dice: boolean;\r\n\r\n\t/**\r\n\t * A reference to a corresponding legend data item.\r\n\t */\r\n\tprotected _legendDataItem: LegendDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMapDataItem\";\r\n\r\n\t\tthis.values.value = {};\r\n\r\n\t\tthis.values.x0 = {};\r\n\r\n\t\tthis.values.y0 = {};\r\n\r\n\t\tthis.values.x1 = {};\r\n\r\n\t\tthis.values.y1 = {};\r\n\r\n\t\tthis.hasChildren.children = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A legend's data item, that corresponds to this data item.\r\n\t *\r\n\t * @param value  Legend data item\r\n\t */\r\n\tpublic set legendDataItem(value: LegendDataItem) {\r\n\t\tthis._legendDataItem = value;\r\n\t\tif (value.label) {\r\n\t\t\tvalue.label.dataItem = this;\r\n\t\t}\r\n\t\tif (value.valueLabel) {\r\n\t\t\tvalue.valueLabel.dataItem = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Legend data item\r\n\t */\r\n\tpublic get legendDataItem(): LegendDataItem {\r\n\t\treturn this._legendDataItem;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a duration (ms) the Data Item should take to animate from one\r\n\t * value to another.\r\n\t *\r\n\t * If the duration is not specified via parameter, this method will try to\r\n\t * request a default duration from the related `Component`.\r\n\t *\r\n\t * @param duration  Default duration (ms)\r\n\t * @return Duration (ms)\r\n\t */\r\n\tpublic getDuration(): number {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Numeric value of the item.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set value(value: number) {\r\n\t\tthis.setValue(\"value\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get value(): number {\r\n\r\n\t\tlet value = 0;\r\n\t\tif (!this.children || this.children.length == 0) {\r\n\t\t\tvalue = this.values[\"value\"].workingValue;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\tlet childValue = child.value;\r\n\t\t\t\tif ($type.isNumber(childValue)) {\r\n\t\t\t\t\tvalue += childValue;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\t\t/*\r\n\t\tlet value = this.values[\"value\"].workingValue;\r\n\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = 0;\r\n\t\t\tif (this.children) {\r\n\t\t\t\t$iter.each(this.children.iterator(), (child) => {\r\n\t\t\t\t\tif ($type.isNumber(child.value)) {\r\n\t\t\t\t\t\tvalue += child.value;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn value;*/\r\n\t}\r\n\r\n\tpublic get percent(): number {\r\n\t\tif (this.parent) {\r\n\t\t\treturn this.value / this.parent.value * 100;\r\n\t\t}\r\n\t\treturn 100;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x0(value: number) {\r\n\t\tthis.setValue(\"x0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x0(): number {\r\n\t\treturn this.values.x0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's X position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  X\r\n\t */\r\n\tpublic set x1(value: number) {\r\n\t\tthis.setValue(\"x1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return X\r\n\t */\r\n\tpublic get x1(): number {\r\n\t\treturn this.values.x1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y0(value: number) {\r\n\t\tthis.setValue(\"y0\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y0(): number {\r\n\t\treturn this.values.y0.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's Y position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description (review)\r\n\t * @param value  Y\r\n\t */\r\n\tpublic set y1(value: number) {\r\n\t\tthis.setValue(\"y1\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y\r\n\t */\r\n\tpublic get y1(): number {\r\n\t\treturn this.values.y1.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Item's name.\r\n\t *\r\n\t * @param name  Name\r\n\t */\r\n\tpublic set name(name: string) {\r\n\t\tthis.setProperty(\"name\", name);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties.name;\r\n\t}\r\n\r\n\t/**\r\n\t * A list of item's sub-children.\r\n\t *\r\n\t * Having children means that the TreeMap chat will automatically be\r\n\t * \"drillable\". Clicking on an item with children will zoom to the item, then\r\n\t * display its children.\r\n\t *\r\n\t * Treemap can have any level of nesting.\r\n\t *\r\n\t * @param children  Item's children\r\n\t */\r\n\tpublic set children(children: OrderedListTemplate<TreeMapDataItem>) {\r\n\t\tthis.setProperty(\"children\", children);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Item's children\r\n\t */\r\n\tpublic get children(): OrderedListTemplate<TreeMapDataItem> {\r\n\t\treturn this.properties.children;\r\n\t}\r\n\r\n\t/**\r\n\t * Depth level in the treemap hierarchy.\r\n\t *\r\n\t * The top-level item will have level set at 0. Its children will have\r\n\t * level 1, and so on.\r\n\t *\r\n\t * @readonly\r\n\t * @return Level\r\n\t */\r\n\tpublic get level(): number {\r\n\t\tif (!this.parent) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this.parent.level + 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Item's color.\r\n\t *\r\n\t * If not set, will use parent's color, or, if that is not set either,\r\n\t * automatically assigned color from chart's color set. (`chart.colors`)\r\n\t *\r\n\t * @param value  Color\r\n\t */\r\n\tpublic set color(value: Color) {\r\n\t\tthis.setProperty(\"color\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t * For the legend to work properly\r\n\t */\r\n\tpublic get fill(): Color {\r\n\t\treturn this.color;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Color\r\n\t */\r\n\tpublic get color(): Color {\r\n\t\tlet color = this.properties.color;\r\n\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.parent) {\r\n\t\t\t\tcolor = this.parent.color;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (color == undefined) {\r\n\t\t\tif (this.component) {\r\n\t\t\t\tcolor = this.component.colors.getIndex(this.component.colors.step * this.index);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\r\n\t/**\r\n\t * Series of children data items\r\n\t * @todo: proper descrition\r\n\t */\r\n\tpublic set series(series: TreeMapSeries) {\r\n\t\tif (series != this._series) {\r\n\t\t\tif (this._series) {\r\n\t\t\t\tthis.component.series.removeValue(this._series);\r\n\t\t\t\tthis._series.dispose();\r\n\t\t\t}\r\n\t\t\tthis._series = series;\r\n\t\t\tthis._disposers.push(series);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get series(): TreeMapSeries {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param toValue   A value to set to `fields` when hiding\r\n\t * @param fields    A list of data fields to set value to `toValue`\r\n\t */\r\n\tpublic hide(duration?: number, delay?: number, toValue?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", 0);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.hide(duration, delay, toValue, fields);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\treturn super.hide(duration, delay, toValue, fields);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows the Data Item and related visual elements.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t * @param delay     Delay animation (ms)\r\n\t * @param fields    A list of fields to set values of\r\n\t */\r\n\tpublic show(duration?: number, delay?: number, fields?: string[]): $type.Optional<Animation> {\r\n\t\tthis.setWorkingValue(\"value\", this.values.value.value);\r\n\t\tif (this.children) {\r\n\t\t\tthis.children.each((child) => {\r\n\t\t\t\tchild.show(duration, delay, fields);\r\n\t\t\t})\r\n\t\t}\r\n\t\treturn super.show(duration, delay, fields);\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[TreeMap]].\r\n */\r\nexport interface ITreeMapDataFields extends IXYChartDataFields {\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's numeric value.\r\n\t */\r\n\tvalue?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's sub-items.\r\n\t */\r\n\tchildren?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's name.\r\n\t */\r\n\tname?: string;\r\n\r\n\t/**\r\n\t * A name of the field in data that holds item's color.\r\n\t *\r\n\t * If not set, a new color will be automatically assigned to each item as\r\n\t * defined by theme.\r\n\t */\r\n\tcolor?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[TreeMap]].\r\n */\r\nexport interface ITreeMapProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t */\r\n\tmaxLevels?: number;\r\n\r\n\t/**\r\n\t * Current drill-down level the treemap is at.\r\n\t */\r\n\tcurrentLevel?: number;\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * @default \"descending\"\r\n\t */\r\n\tsorting?: \"none\" | \"ascending\" | \"descending\";\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[TreeMap]].\r\n */\r\nexport interface ITreeMapEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[TreeMap]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ITreeMapAdapters extends IXYChartAdapters, ITreeMapProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a TreeMap chart.\r\n *\r\n * @see {@link ITreeMapEvents} for a list of available Events\r\n * @see {@link ITreeMapAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/} for documentation\r\n */\r\nexport class TreeMap extends XYChart {\r\n\r\n\t/**\r\n\t * Defines a type of the data item used for this chart.\r\n\t */\r\n\tpublic _dataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ITreeMapDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ITreeMapProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ITreeMapAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ITreeMapEvents;\r\n\r\n\t/**\r\n\t * A horizontal value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic xAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * A vertical value axis.\r\n\t *\r\n\t * TreeMap chart is basically an XY chart, which means it has vertical and\r\n\t * horizontal value axes.\r\n\t *\r\n\t * As with any XY-based chart, it can be zoomed.\r\n\t */\r\n\tpublic yAxis: ValueAxis;\r\n\r\n\t/**\r\n\t * An algorithm used to divide area into squares based on their value.\r\n\t *\r\n\t * Available options: squarify (default), binaryTree, slice, dice, sliceDice.\r\n\t *\r\n\t * ```TypeScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * chart.layoutAlgorithm = chart.sliceDice;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"layoutAlgorithm\": \"sliceDice\",\r\n\t *   // ...\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/chart-types/treemap/#Area_division_methods} For more info and examples.\r\n\t * @default squarify\r\n\t */\r\n\tpublic layoutAlgorithm: (parent: TreeMapDataItem) => void = this.squarify;\r\n\r\n\t/**\r\n\t * Defines a type of series that this chart uses.\r\n\t */\r\n\tpublic _seriesType: TreeMapSeries;\r\n\r\n\t/**\r\n\t * [_homeDataItem description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _homeDataItem: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * [_tempSeries description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _tempSeries: TreeMapSeries[];\r\n\r\n\t/**\r\n\t * A text dispalyed on the home button in breadcurmb nav control.\r\n\t */\r\n\tprotected _homeText: string;\r\n\r\n\t/**\r\n\t * A set of colors to be applied automatically to each new chart item, if\r\n\t * not explicitly set.\r\n\t */\r\n\tpublic colors: ColorSet;\r\n\r\n\t/**\r\n\t * Holds series object for each TreeMap level.\r\n\t *\r\n\t * \"0\" is the top-level series.\r\n\t * \"1\" is the second level.\r\n\t * Etc.\r\n\t *\r\n\t * @todo Description\r\n\t * @param Templates for each level\r\n\t */\r\n\tpublic seriesTemplates: DictionaryTemplate<string, this[\"_seriesType\"]>;\r\n\r\n\t/**\r\n\t * Is the chart zoomable?\r\n\t *\r\n\t * If the chart is `zoomable`, and items have sub-items, the chart will\r\n\t * drill-down to sub-items when click on their parent item.\r\n\t *\r\n\t * @default true\r\n\t */\r\n\tpublic zoomable: boolean = true;\r\n\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tprotected _navigationBar: NavigationBar;\r\n\r\n\t/**\r\n\t * Currently selected data item.\r\n\t * @readonly\r\n\t */\r\n\tpublic currentlyZoomed: TreeMapDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"TreeMap\";\r\n\r\n\t\tthis.maxLevels = 2;\r\n\t\tthis.currentLevel = 0;\r\n\r\n\t\tthis.colors = new ColorSet();\r\n\t\tthis.sorting = \"descending\";\r\n\r\n\t\t// create two value axes for the chart\r\n\t\tlet xAxis = this.xAxes.push(new ValueAxis<any>());\r\n\t\txAxis.title.disabled = true;\r\n\t\txAxis.strictMinMax = true;\r\n\r\n\t\tlet xRenderer = xAxis.renderer;\r\n\t\txRenderer.inside = true;\r\n\t\txRenderer.labels.template.disabled = true;\r\n\t\txRenderer.ticks.template.disabled = true;\r\n\t\txRenderer.grid.template.disabled = true;\r\n\t\txRenderer.axisFills.template.disabled = true;\r\n\t\txRenderer.minGridDistance = 100;\r\n\t\txRenderer.line.disabled = true;\r\n\t\txRenderer.baseGrid.disabled = true;\r\n\t\t//xRenderer.inversed = true;\r\n\r\n\t\tlet yAxis = this.yAxes.push(new ValueAxis<any>());\r\n\t\tyAxis.title.disabled = true;\r\n\t\tyAxis.strictMinMax = true;\r\n\r\n\t\tlet yRenderer = yAxis.renderer;\r\n\t\tyRenderer.inside = true;\r\n\t\tyRenderer.labels.template.disabled = true;\r\n\t\tyRenderer.ticks.template.disabled = true;\r\n\t\tyRenderer.grid.template.disabled = true;\r\n\t\tyRenderer.axisFills.template.disabled = true;\r\n\t\tyRenderer.minGridDistance = 100;\r\n\t\tyRenderer.line.disabled = true;\r\n\t\tyRenderer.baseGrid.disabled = true;\r\n\t\tyRenderer.inversed = true;\r\n\r\n\t\t// shortcuts\r\n\t\tthis.xAxis = xAxis;\r\n\t\tthis.yAxis = yAxis;\r\n\r\n\t\tconst template = new TreeMapSeries();\r\n\t\tthis.seriesTemplates = new DictionaryTemplate<string, this[\"_seriesType\"]>(template);\r\n\t\tthis._disposers.push(new DictionaryDisposer(this.seriesTemplates));\r\n\t\tthis._disposers.push(template);\r\n\r\n\t\tthis.zoomOutButton.events.on(\"hit\", () => {\r\n\t\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t\t}, undefined, false)\r\n\r\n\t\tthis.seriesTemplates.events.on(\"insertKey\", (event) => {\r\n\t\t\tevent.newValue.isTemplate = true;\r\n\t\t}, undefined, false)\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * A navigation bar used to show \"breadcrumb\" control, indicating current\r\n\t * drill-down path.\r\n\t */\r\n\tpublic set navigationBar(navigationBar: NavigationBar) {\r\n\t\tif (this._navigationBar != navigationBar) {\r\n\t\t\tthis._navigationBar = navigationBar;\r\n\t\t\tnavigationBar.parent = this;\r\n\t\t\tnavigationBar.toBack();\r\n\t\t\tnavigationBar.links.template.events.on(\"hit\", (event) => {\r\n\t\t\t\tlet dataItem = <TreeMapDataItem>event.target.dataItem.dataContext;\r\n\t\t\t\tif (!dataItem.isDisposed()) {\r\n\t\t\t\t\tthis.zoomToChartDataItem(dataItem);\r\n\t\t\t\t\tthis.createTreeSeries(dataItem);\r\n\t\t\t\t}\r\n\t\t\t}, undefined, true);\r\n\r\n\t\t\tthis._disposers.push(navigationBar);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns navigationBar if it is added to a chart\r\n\t */\r\n\tpublic get navigationBar(): NavigationBar {\r\n\t\treturn this._navigationBar;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * (Re)validates chart's data.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateData(): void {\r\n\r\n\t\tthis.series.clear();\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tsuper.validateData();\r\n\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.dispose();\r\n\t\t}\r\n\r\n\t\tlet homeDataItem = this.dataItems.template.clone(); // cant' use createDataItem here!\r\n\r\n\t\tthis._homeDataItem = homeDataItem;\r\n\r\n\t\t$iter.each(this.dataItems.iterator(), (dataItem) => {\r\n\t\t\tdataItem.parent = homeDataItem;\r\n\t\t});\r\n\r\n\t\thomeDataItem.children = this.dataItems;\r\n\r\n\t\thomeDataItem.x0 = 0;\r\n\t\thomeDataItem.y0 = 0;\r\n\t\thomeDataItem.name = this._homeText;\r\n\r\n\t\tlet maxX = 1000;\r\n\t\tlet maxY = Math.round((maxX * this.pixelHeight / this.pixelWidth) / 10) * 10 || 1000;\r\n\r\n\t\thomeDataItem.x1 = maxX;\r\n\t\thomeDataItem.y1 = maxY;\r\n\r\n\t\tthis.xAxis.min = 0;\r\n\t\tthis.xAxis.max = maxX;\r\n\t\tthis.xAxis.getMinMax();\r\n\r\n\t\tthis.yAxis.min = 0;\r\n\t\tthis.yAxis.max = maxY;\r\n\t\tthis.yAxis.getMinMax();\r\n\r\n\t\tthis.layoutItems(homeDataItem);\r\n\r\n\t\tthis.createTreeSeries(homeDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Layouts and sizes all items according to their value and\r\n\t * `layoutAlgorithm`.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Parent data item\r\n\t */\r\n\tpublic layoutItems(parent: TreeMapDataItem, sorting?: \"none\" | \"ascending\" | \"descending\"): void {\r\n\t\tif (parent) {\r\n\t\t\tlet children = parent.children;\r\n\r\n\t\t\tif (!sorting) {\r\n\t\t\t\tsorting = this.sorting;\r\n\t\t\t}\r\n\r\n\t\t\tif (sorting == \"ascending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn a.value - b.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (sorting == \"descending\") {\r\n\t\t\t\tchildren.values.sort((a, b) => {\r\n\t\t\t\t\treturn b.value - a.value;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis._updateDataItemIndexes(0);\r\n\r\n\t\t\tthis.layoutAlgorithm(parent);\r\n\r\n\t\t\tfor (let i = 0, len = children.length; i < len; i++) {\r\n\r\n\t\t\t\tlet node = children.getIndex(i);\r\n\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tthis.layoutItems(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates and returns a new treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Data item to create series out of\r\n\t */\r\n\tprotected createTreeSeries(dataItem: TreeMapDataItem) {\r\n\t\tthis._tempSeries = [];\r\n\r\n\t\tlet navigationData = [dataItem];\r\n\r\n\t\t// create parent series and navigation data\r\n\t\tlet parentDataItem = dataItem.parent;\r\n\t\twhile (parentDataItem != undefined) {\r\n\t\t\tthis.initSeries(parentDataItem);\r\n\t\t\tnavigationData.push(parentDataItem);\r\n\t\t\tparentDataItem = parentDataItem.parent;\r\n\t\t}\r\n\r\n\t\tnavigationData.reverse();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.data = navigationData;\r\n\t\t}\r\n\r\n\t\t// create series and children series\r\n\t\tthis.createTreeSeriesReal(dataItem);\r\n\r\n\t\t// add those which are not in the list\r\n\t\t$array.each(this._tempSeries, (series) => {\r\n\t\t\tif (this.series.indexOf(series) == -1) {\r\n\t\t\t\tthis.series.push(series);\r\n\t\t\t}\r\n\t\t\tseries.zIndex = series.level;\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * [createTreeSeriesReal description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected createTreeSeriesReal(dataItem: TreeMapDataItem) {\r\n\t\tif (dataItem.children) {\r\n\t\t\tlet level = dataItem.level;\r\n\r\n\t\t\tif (level < this.currentLevel + this.maxLevels) {\r\n\r\n\t\t\t\tthis.initSeries(dataItem);\r\n\r\n\t\t\t\tfor (let i = 0; i < dataItem.children.length; i++) {\r\n\t\t\t\t\tlet child = dataItem.children.getIndex(i);\r\n\t\t\t\t\tif (child.children) {\r\n\t\t\t\t\t\tthis.createTreeSeriesReal(child);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprotected setData(value: any[]) {\r\n\t\tthis.currentLevel = 0;\r\n\t\tthis.currentlyZoomed = undefined;\r\n\t\tthis.xAxis.start = 0;\r\n\t\tthis.xAxis.end = 1;\r\n\t\tthis.yAxis.start = 0;\r\n\t\tthis.yAxis.end = 1;\r\n\t\tsuper.setData(value);\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t * Overriding, as tree map series are created on the fly all the time\r\n\t */\r\n\tprotected seriesAppeared(): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Initializes the treemap series.\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  Chart data item\r\n\t */\r\n\tprotected initSeries(dataItem: TreeMapDataItem) {\r\n\t\tif (!dataItem.series) {\r\n\t\t\tlet series: TreeMapSeries;\r\n\r\n\t\t\tlet template = this.seriesTemplates.getKey(dataItem.level.toString());\r\n\t\t\tif (template) {\r\n\t\t\t\tseries = template.clone();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tseries = this.series.create();\r\n\t\t\t}\r\n\t\t\t// for the legend to get {value}\r\n\t\t\tseries.dataItem.dataContext = dataItem;\r\n\r\n\t\t\tseries.name = dataItem.name;\r\n\t\t\tseries.parentDataItem = dataItem;\r\n\t\t\tdataItem.series = series;\r\n\r\n\t\t\tlet level = dataItem.level;\r\n\t\t\tseries.level = level;\r\n\r\n\t\t\tlet dataContext: any = dataItem.dataContext;\r\n\t\t\tif (dataContext) {\r\n\t\t\t\tseries.config = dataContext.config;\r\n\t\t\t}\r\n\r\n\t\t\tthis.dataUsers.removeValue(series); // series do not use data directly, that's why we remove it\r\n\t\t\tseries.data = dataItem.children.values;\r\n\t\t\tseries.fill = dataItem.color;\r\n\r\n\t\t\tseries.columnsContainer.hide(0);\r\n\t\t\tseries.bulletsContainer.hide(0);\r\n\r\n\t\t\tseries.columns.template.adapter.add(\"fill\", (fill, target) => {\r\n\t\t\t\tlet dataItem = <TreeMapSeriesDataItem>target.dataItem;\r\n\t\t\t\tif (dataItem) {\r\n\t\t\t\t\tlet treeMapDataItem = dataItem.treeMapDataItem;\r\n\t\t\t\t\tif (treeMapDataItem) {\r\n\t\t\t\t\t\ttarget.fill = treeMapDataItem.color;\r\n\t\t\t\t\t\ttarget.adapter.remove(\"fill\"); //@todo: make it possible adapters applied once?\r\n\t\t\t\t\t\treturn treeMapDataItem.color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif (this.zoomable && (dataItem.level > this.currentLevel || (dataItem.children && dataItem.children.length > 0))) {\r\n\t\t\t\tseries.columns.template.cursorOverStyle = MouseCursorStyle.pointer;\r\n\t\t\t\tif (this.zoomable) {\r\n\t\t\t\t\tseries.columns.template.events.on(\"hit\", (event) => {\r\n\t\t\t\t\t\tlet seriesDataItem = <TreeMapSeriesDataItem>event.target.dataItem;\r\n\r\n\t\t\t\t\t\tif (dataItem.level > this.currentLevel) {\r\n\t\t\t\t\t\t\tthis.zoomToChartDataItem(seriesDataItem.treeMapDataItem.parent);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.zoomToSeriesDataItem(seriesDataItem);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}, this, undefined);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis._tempSeries.push(dataItem.series);\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles bullets so that labels that belong to current drill level are\r\n\t * shown.\r\n\t *\r\n\t * @param duration  Animation duration (ms)\r\n\t */\r\n\tprotected toggleBullets(duration?: number): void {\r\n\t\t// hide all series which are not in tempSeries\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (this._tempSeries.indexOf(series) == - 1) {\r\n\t\t\t\t//series.hideReal(duration);\r\n\t\t\t\tseries.columnsContainer.hide();\r\n\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t//series.showReal(duration);\r\n\t\t\t\tseries.columnsContainer.show();\r\n\t\t\t\tseries.bulletsContainer.show(duration);\r\n\r\n\t\t\t\tif (series.level < this.currentLevel) {\r\n\t\t\t\t\tseries.bulletsContainer.hide(duration);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item in series.\r\n\t *\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToSeriesDataItem(dataItem: TreeMapSeriesDataItem): void {\r\n\t\tthis.zoomToChartDataItem(dataItem.treeMapDataItem);\r\n\t}\r\n\r\n\t/**\r\n\t * Zooms to particular item.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic zoomToChartDataItem(dataItem: TreeMapDataItem): void {\r\n\t\tlet zoomOutButton = this.zoomOutButton;\r\n\t\t// this is needed because if there is only one fist level, it wont' be shown\r\n\t\tif(zoomOutButton){\r\n\t\t\tif (dataItem != this._homeDataItem) {\r\n\t\t\t\tzoomOutButton.show();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tzoomOutButton.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (dataItem && dataItem.children) {\r\n\t\t\tthis.xAxis.zoomToValues(dataItem.x0, dataItem.x1);\r\n\t\t\tthis.yAxis.zoomToValues(dataItem.y0, dataItem.y1);\r\n\r\n\t\t\tthis.currentLevel = dataItem.level;\r\n\t\t\tthis.currentlyZoomed = dataItem;\r\n\r\n\t\t\tthis.createTreeSeries(dataItem);\r\n\r\n\t\t\tlet rangeChangeAnimation = this.xAxis.rangeChangeAnimation || this.yAxis.rangeChangeAnimation;\r\n\r\n\t\t\tif (rangeChangeAnimation && !rangeChangeAnimation.isDisposed() && !rangeChangeAnimation.isFinished()) {\r\n\t\t\t\tthis._dataDisposers.push(rangeChangeAnimation);\r\n\r\n\t\t\t\trangeChangeAnimation.events.once(\"animationended\", () => {\r\n\t\t\t\t\tthis.toggleBullets();\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.toggleBullets();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\r\n\t\tsuper.applyInternalDefaults();\r\n\r\n\t\t// Add a default screen reader title for accessibility\r\n\t\t// This will be overridden in screen reader if there are any `titles` set\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"TreeMap chart\");\r\n\t\t}\r\n\t\t//this.homeText = this.language.translate(\"Home\");\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new TreeMapDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Maximum number of levels the chart will display initially.\r\n\t *\r\n\t * @default 2\r\n\t * @param value  Maximum drill-down level\r\n\t */\r\n\tpublic set maxLevels(value: number) {\r\n\t\tthis.setPropertyValue(\"maxLevels\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Maximum drill-down level\r\n\t */\r\n\tpublic get maxLevels(): number {\r\n\t\treturn this.getPropertyValue(\"maxLevels\");\r\n\t}\r\n\r\n\t/**\r\n\t * Current drill-down level the chart is at.\r\n\t *\r\n\t * @param value  Current level\r\n\t */\r\n\tpublic set currentLevel(value: number) {\r\n\t\tthis.setPropertyValue(\"currentLevel\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Current level\r\n\t */\r\n\tpublic get currentLevel(): number {\r\n\t\treturn this.getPropertyValue(\"currentLevel\");\r\n\t}\r\n\r\n\t/**\r\n\t * Sorting direction of treemap items.\r\n\t *\r\n\t * Available options: \"none\", \"ascending\", and \"descending\" (default).\r\n\t *\r\n\t * @default \"descending\"\r\n\t * @param value [description]\r\n\t */\r\n\tpublic set sorting(value: \"none\" | \"ascending\" | \"descending\") {\r\n\t\tthis.setPropertyValue(\"sorting\", value, true);\r\n\t}\r\n\r\n\tpublic get sorting(): \"none\" | \"ascending\" | \"descending\" {\r\n\t\treturn this.getPropertyValue(\"sorting\");\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a new series of the suitable type.\r\n\t *\r\n\t * @return new series\r\n\t */\r\n\tprotected createSeries(): this[\"_seriesType\"] {\r\n\t\treturn new TreeMapSeries();\r\n\t}\r\n\r\n\t/**\r\n\t * A text displayed on the \"home\" button which is used to go back to level 0\r\n\t * after drill into sub-items.\r\n\t *\r\n\t * @param value  Home text\r\n\t */\r\n\tpublic set homeText(value: string) {\r\n\t\tthis._homeText = value;\r\n\t\tif (this._homeDataItem) {\r\n\t\t\tthis._homeDataItem.name = this._homeText;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Home text\r\n\t */\r\n\tpublic get homeText(): string {\r\n\t\treturn this._homeText;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Instantiate layout algorithm\r\n\t\t\tif ($type.hasValue(config[\"layoutAlgorithm\"]) && $type.isString(config[\"layoutAlgorithm\"])) {\r\n\t\t\t\tswitch (config[\"layoutAlgorithm\"]) {\r\n\t\t\t\t\tcase \"squarify\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.squarify;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"binaryTree\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.binaryTree;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"slice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.slice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"dice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.dice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"sliceDice\":\r\n\t\t\t\t\t\tconfig[\"layoutAlgorithm\"] = this.sliceDice;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tdelete config[\"layoutAlgorithm\"];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Set type for navigation bar\r\n\t\t\tif ($type.hasValue(config.navigationBar) && !$type.hasValue(config.navigationBar.type)) {\r\n\t\t\t\tconfig.navigationBar.type = \"NavigationBar\";\r\n\t\t\t}\r\n\r\n\t\t\tsuper.processConfig(config);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the size of container and informs its children of how much size\r\n\t * they can occupy, by setting their relative `maxWidth` and `maxHeight`\r\n\t * properties.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.layoutItems(this.currentlyZoomed);\r\n\t}\r\n\r\n\t/**\r\n\t * Validates (processes) data items.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataItems() {\r\n\t\tsuper.validateDataItems();\r\n\t\tthis.layoutItems(this._homeDataItem);\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tseries.validateRawData();\r\n\t\t});\r\n\r\n\t\tthis.zoomToChartDataItem(this._homeDataItem);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * ==========================================================================\r\n\t * TREEMAP LAYOUT FUNCTIONS\r\n\t * ==========================================================================\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * The functions below are from D3.js library (https://d3js.org/)\r\n\t *\r\n\t * --------------------------------------------------------------------------\r\n\t * Copyright 2017 Mike Bostock\r\n\t *\r\n\t * Redistribution and use in source and binary forms, with or without\r\n\t * modification, are permitted provided that the following conditions are met:\r\n\t *\r\n\t * 1. Redistributions of source code must retain the above copyright notice,\r\n\t *    this list of conditions and the following disclaimer.\r\n\t *\r\n\t * 2. Redistributions in binary form must reproduce the above copyright\r\n\t *    notice,this list of conditions and the following disclaimer in the\r\n\t *    documentation and/or other materials provided with the distribution.\r\n\t *\r\n\t * 3. Neither the name of the copyright holder nor the names of its\r\n\t *    contributors may be used to endorse or promote products derived from\r\n\t *    this software without specific prior written permission.\r\n\t *\r\n\t * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n\t * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n\t * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n\t * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\r\n\t * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n\t * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n\t * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n\t * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n\t * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n\t * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n\t * POSSIBILITY OF SUCH DAMAGE.\r\n\t * --------------------------------------------------------------------------\r\n\t * @hidden\r\n\t */\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: binaryTree.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic binaryTree(parent: TreeMapDataItem): void {\r\n\t\tlet nodes = parent.children,\r\n\t\t\ti, n = nodes.length,\r\n\t\t\tsum, sums = new Array(n + 1);\r\n\r\n\t\tfor (sums[0] = sum = i = 0; i < n; ++i) {\r\n\t\t\tsums[i + 1] = sum += nodes.getIndex(i).value;\r\n\t\t}\r\n\r\n\t\tpartition(0, n, parent.value, parent.x0, parent.y0, parent.x1, parent.y1);\r\n\r\n\t\tfunction partition(i: number, j: number, value: number, x0: number, y0: number, x1: number, y1: number) {\r\n\t\t\tif (i >= j - 1) {\r\n\t\t\t\tlet node = nodes.getIndex(i);\r\n\t\t\t\tnode.x0 = x0;\r\n\t\t\t\tnode.y0 = y0;\r\n\t\t\t\tnode.x1 = x1;\r\n\t\t\t\tnode.y1 = y1;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueOffset = sums[i],\r\n\t\t\t\tvalueTarget = (value / 2) + valueOffset,\r\n\t\t\t\tk = i + 1,\r\n\t\t\t\thi = j - 1;\r\n\r\n\t\t\twhile (k < hi) {\r\n\t\t\t\tlet mid = k + hi >>> 1;\r\n\t\t\t\tif (sums[mid] < valueTarget) {\r\n\t\t\t\t\tk = mid + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\thi = mid;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) {\r\n\t\t\t\t--k;\r\n\t\t\t}\r\n\r\n\t\t\tlet valueLeft = sums[k] - valueOffset,\r\n\t\t\t\tvalueRight = value - valueLeft;\r\n\r\n\t\t\tif ((x1 - x0) > (y1 - y0)) {\r\n\t\t\t\tlet xk = (x0 * valueRight + x1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, xk, y1);\r\n\t\t\t\tpartition(k, j, valueRight, xk, y0, x1, y1);\r\n\t\t\t} else {\r\n\t\t\t\tlet yk = (y0 * valueRight + y1 * valueLeft) / value;\r\n\t\t\t\tpartition(i, k, valueLeft, x0, y0, x1, yk);\r\n\t\t\t\tpartition(k, j, valueRight, x0, yk, x1, y1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic slice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet node;\r\n\t\tlet i = -1;\r\n\t\tlet n = nodes.length;\r\n\t\tlet k = parent.value && (y1 - y0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tnode.x1 = x1;\r\n\t\t\tnode.y0 = y0;\r\n\t\t\ty0 += node.value * k;\r\n\t\t\tnode.y1 = y0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: dice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic dice(parent: TreeMapDataItem): void {\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children,\r\n\t\t\tnode,\r\n\t\t\ti = -1,\r\n\t\t\tn = nodes.length,\r\n\t\t\tk = parent.value && (x1 - x0) / parent.value;\r\n\r\n\t\twhile (++i < n) {\r\n\t\t\tnode = nodes.getIndex(i);\r\n\t\t\tnode.y0 = y0;\r\n\t\t\tnode.y1 = y1;\r\n\t\t\tnode.x0 = x0;\r\n\t\t\tx0 += node.value * k;\r\n\t\t\tnode.x1 = x0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: slideDice.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic sliceDice(parent: TreeMapDataItem): void {\r\n\t\tif (parent.level & 1) {\r\n\t\t\tthis.slice(parent);\r\n\t\t} else {\r\n\t\t\tthis.dice(parent);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Treemap layout algorithm: squarify.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param parent  Data item\r\n\t */\r\n\tpublic squarify(parent: TreeMapDataItem): void {\r\n\t\tlet ratio = (1 + Math.sqrt(5)) / 2;\r\n\r\n\t\tlet x0 = parent.x0;\r\n\t\tlet x1 = parent.x1;\r\n\t\tlet y0 = parent.y0;\r\n\t\tlet y1 = parent.y1;\r\n\r\n\t\tlet nodes = parent.children;\r\n\t\tlet nodeValue;\r\n\t\tlet i0 = 0;\r\n\t\tlet i1 = 0;\r\n\t\tlet n = nodes.length;\r\n\t\tlet dx;\r\n\t\tlet dy;\r\n\t\tlet value = parent.value;\r\n\t\tlet sumValue;\r\n\t\tlet minValue;\r\n\t\tlet maxValue;\r\n\t\tlet newRatio;\r\n\t\tlet minRatio;\r\n\t\tlet alpha;\r\n\t\tlet beta;\r\n\r\n\t\twhile (i0 < n) {\r\n\t\t\tdx = x1 - x0;\r\n\t\t\tdy = y1 - y0;\r\n\r\n\t\t\t// Find the next non-empty node.\r\n\t\t\tdo {\r\n\t\t\t\tsumValue = nodes.getIndex(i1++).value;\r\n\t\t\t} while (!sumValue && i1 < n);\r\n\r\n\t\t\tminValue = maxValue = sumValue;\r\n\t\t\talpha = Math.max(dy / dx, dx / dy) / (value * ratio);\r\n\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\tminRatio = Math.max(maxValue / beta, beta / minValue);\r\n\r\n\t\t\t// Keep adding nodes while the aspect ratio maintains or improves.\r\n\t\t\tfor (; i1 < n; ++i1) {\r\n\t\t\t\tsumValue += nodeValue = nodes.getIndex(i1).value;\r\n\t\t\t\tif (nodeValue < minValue) {\r\n\t\t\t\t\tminValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tif (nodeValue > maxValue) {\r\n\t\t\t\t\tmaxValue = nodeValue;\r\n\t\t\t\t}\r\n\t\t\t\tbeta = sumValue * sumValue * alpha;\r\n\t\t\t\tnewRatio = Math.max(maxValue / beta, beta / minValue);\r\n\t\t\t\tif (newRatio > minRatio) {\r\n\t\t\t\t\tsumValue -= nodeValue; break;\r\n\t\t\t\t}\r\n\t\t\t\tminRatio = newRatio;\r\n\t\t\t}\r\n\r\n\t\t\t// Position and record the row orientation.\r\n\t\t\tlet row = this.dataItems.template.clone();\r\n\t\t\trow.value = sumValue;\r\n\t\t\trow.dice = dx < dy;\r\n\t\t\trow.children = nodes.slice(i0, i1);\r\n\t\t\trow.x0 = x0;\r\n\t\t\trow.y0 = y0;\r\n\t\t\trow.x1 = x1;\r\n\t\t\trow.y1 = y1;\r\n\r\n\t\t\tif (row.dice) {\r\n\t\t\t\trow.y1 = value ? (y0 += (dy * sumValue) / value) : y1;\r\n\t\t\t\tthis.dice(row);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trow.x1 = value ? (x0 += (dx * sumValue) / value) : x1;\r\n\t\t\t\tthis.slice(row);\r\n\t\t\t}\r\n\t\t\tvalue -= sumValue;\r\n\t\t\ti0 = i1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [handleDataItemValueChange description]\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleDataItemValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic handleDataItemWorkingValueChange(dataItem?: this[\"_dataItem\"], name?: string): void {\r\n\t\tif (name == \"value\") {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected getLegendLevel(dataItem: TreeMapDataItem): TreeMapDataItem {\r\n\t\tif (!dataItem) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (!dataItem.children) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (dataItem.children.length > 1) {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t\telse if (dataItem.children.length == 1) {\r\n\t\t\treturn this.getLegendLevel(dataItem.children.getIndex(0));\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn dataItem;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Setups the legend to use the chart's data.\r\n\t * @ignore\r\n\t */\r\n\tpublic feedLegend(): void {\r\n\t\tlet legend = this.legend;\r\n\t\tif (legend) {\r\n\r\n\t\t\tlegend.dataFields.name = \"name\";\r\n\r\n\t\t\tlet legendParent = this.getLegendLevel(this._homeDataItem);\r\n\t\t\tif (legendParent) {\r\n\t\t\t\tlet legendData: Array<this[\"_dataItem\"]> = [];\r\n\r\n\t\t\t\tlegendParent.children.each((dataItem) => {\r\n\t\t\t\t\t//if (!dataItem.hiddenInLegend) {\r\n\t\t\t\t\tlegendData.push(dataItem);\r\n\t\t\t\t\t//}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tlegend.data = legendData;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic disposeData() {\r\n\r\n\t\tsuper.disposeData();\r\n\r\n\t\tthis._homeDataItem = undefined;\r\n\r\n\t\tthis.series.clear();\r\n\r\n\t\tif (this.navigationBar) {\r\n\t\t\tthis.navigationBar.disposeData();\r\n\t\t}\r\n\r\n\t\tthis.xAxis.disposeData();\r\n\t\tthis.yAxis.disposeData();\r\n\t}\r\n\r\n\t/**\r\n\t * Since this chart uses hierarchical data, we need to remove childrent\r\n\t * dataField from export of non-hierarchical formats such as CSV and XSLX.\r\n\t *\r\n\t * @return Export\r\n\t */\r\n\tprotected getExporting(): Export {\r\n\t\tconst exporting = super.getExporting();\r\n\t\texporting.adapter.add(\"formatDataFields\", (info) => {\r\n\t\t\tif (info.format == \"csv\" || info.format == \"xlsx\") {\r\n\t\t\t\tif ($type.hasValue(this.dataFields.children)) {\r\n\t\t\t\t\tdelete info.dataFields[this.dataFields.children];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn info;\r\n\t\t})\r\n\t\treturn exporting;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"TreeMap\"] = TreeMap;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/TreeMap.ts","/**\r\n * Module, defining Axis Renderer for horizontal 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererX, IAxisRendererXProperties, IAxisRendererXAdapters, IAxisRendererXEvents } from \"../axes/AxisRendererX\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DProperties extends IAxisRendererXProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererX3D]].\r\n */\r\nexport interface IAxisRendererX3DEvents extends IAxisRendererXEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererX3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererX3DAdapters extends IAxisRendererXAdapters, IAxisRendererX3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for horizontal 3D axis.\r\n *\r\n * @see {@link IAxisRendererX3DEvents} for a list of available events\r\n * @see {@link IAxisRendererX3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererX3D extends AxisRendererX {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IAxisRendererX3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IAxisRendererX3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererX3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererX3D\";\r\n\r\n\t\tthis._disposers.push(this._chart);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number) {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet h: number = this.getHeight();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: dx, y: h + dy }) + $path.lineTo({ x: 0, y: h });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement() {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet h = this.getHeight();\r\n\t\tlet dx = this.chart.dx3D || 0;\r\n\t\tlet dy = this.chart.dy3D || 0;\r\n\t\tthis.baseGrid.path =  $path.moveTo({ x: dx, y: dy }) + $path.lineTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: h });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"AxisRendererX3D\"] = AxisRendererX3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererX3D.ts","/**\r\n * Module, defining Axis Renderer for vertical 3D axes.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { AxisRendererY, IAxisRendererYProperties, IAxisRendererYAdapters, IAxisRendererYEvents } from \"../axes/AxisRendererY\";\r\nimport { Sprite, ISpriteEvents, AMEvent } from \"../../core/Sprite\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Grid } from \"../axes/Grid\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { MutableValueDisposer } from \"../../core/utils/Disposer\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DProperties extends IAxisRendererYProperties { }\r\n\r\n/**\r\n * Defines events for [[AxisRendererY3D]].\r\n */\r\nexport interface IAxisRendererY3DEvents extends IAxisRendererYEvents { }\r\n\r\n/**\r\n * Defines adapters for [[AxisRendererY3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IAxisRendererY3DAdapters extends IAxisRendererYAdapters, IAxisRendererY3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Renderer for vertical 3D axis.\r\n *\r\n * @see {@link IAxisRendererY3DEvents} for a list of available events\r\n * @see {@link IAxisRendererY3DAdapters} for a list of available Adapters\r\n */\r\nexport class AxisRendererY3D extends AxisRendererY {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IAxisRendererY3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IAxisRendererY3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IAxisRendererY3DEvents;\r\n\r\n\t/**\r\n\t * A related chart.\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _chart = new MutableValueDisposer<XYChart3D>();\r\n\r\n\t/**\r\n\t * Constructor.\r\n\t *\r\n\t * @param axis Related axis\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"AxisRendererY3D\";\r\n\t\tthis._disposers.push(this._chart);\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions a grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param grid         Grid element\r\n\t * @param position     Starting position\r\n\t * @param endPosition  End position\r\n\t */\r\n\tpublic updateGridElement(grid: Grid, position: number, endPosition: number): void {\r\n\t\tposition = position + (endPosition - position) * grid.location;\r\n\r\n\t\tlet point: IPoint = this.positionToPoint(position);\r\n\t\tif (grid.element) {\r\n\r\n\t\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\t\tlet w: number = this.getWidth();\r\n\r\n\t\t\tgrid.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy });\r\n\t\t}\r\n\t\tthis.positionItem(grid, point);\r\n\r\n\t\tthis.toggleVisibility(grid, position, 0, 1);\r\n\t}\r\n\r\n\t/**\r\n\t * Updates and positions the base grid element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateBaseGridElement(): void {\r\n\t\tsuper.updateBaseGridElement();\r\n\r\n\t\tlet dx: number = this.chart.dx3D || 0;\r\n\t\tlet dy: number = this.chart.dy3D || 0;\r\n\r\n\t\tlet w: number = this.getWidth();\r\n\t\tthis.baseGrid.path = $path.moveTo({ x: 0, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w, y: 0 })\r\n\t\t\t+ $path.lineTo({ x: w + dx, y: dy });\r\n\t}\r\n\r\n\t/**\r\n\t * Chart, associated with the Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(chart: XYChart3D) {\r\n\t\tif (chart) {\r\n\t\t\tthis._chart.set(chart, chart.events.on(\"propertychanged\", this.handle3DChanged, this, false));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): XYChart3D {\r\n\t\treturn this._chart.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Invoked when 3D-related settings change, like depth or angle.\r\n\t *\r\n\t * @param event Event\r\n\t */\r\n\tprotected handle3DChanged(event: AMEvent<Sprite, ISpriteEvents>[\"propertychanged\"]): void {\r\n\t\tif (event.property == \"depth\" || event.property == \"angle\") {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/AxisRendererY3D.ts","/**\r\n * Module that defines everything related to building 3D Columns.\r\n * It is a container which has column3D element which is a Rectangle3D.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Rectangle3D } from \"../../core/elements/3d/Rectangle3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { Color } from \"../../core/utils/Color\";\r\nimport { RadialGradient } from \"../../core/rendering/fills/RadialGradient\";\r\nimport { LinearGradient } from \"../../core/rendering/fills/LinearGradient\";\r\nimport { Pattern } from \"../../core/rendering/fills/Pattern\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Column3D]].\r\n */\r\nexport interface IColumn3DProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Column3D]].\r\n */\r\nexport interface IColumn3DEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Column3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumn3DAdapters extends IColumnAdapters, IColumn3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Column3Ds.\r\n *\r\n * @see {@link IColumn3DEvents} for a list of available events\r\n * @see {@link IColumn3DAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Column3D extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumn3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumn3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumn3DEvents;\r\n\r\n\r\n\t/**\r\n\t * column3D element\r\n\t */\r\n\tpublic column3D: Rectangle3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Column3D\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.column3D = this.createChild(Rectangle3D);\r\n\t\tthis.column3D.shouldClone = false;\r\n\t\tthis.column3D.strokeOpacity = 0;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.column3D;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate() {\r\n\t\tsuper.validate();\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.width = this.pixelWidth;\r\n\t\t\tthis.column3D.height = this.pixelHeight;\r\n\t\t\tif(this.column3D.invalid){\r\n\t\t\t\tthis.column3D.validate();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Column3D]].\r\n\t *\r\n\t * @param source Source Column3D\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.column3D) {\r\n\t\t\tthis.column3D.copyFrom(source.column3D);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets actual `fill` property on the SVG element, including applicable color\r\n\t * modifiers.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Fill\r\n\t */\r\n\tprotected setFill(value: $type.Optional<Color | Pattern | LinearGradient | RadialGradient>): void {\r\n\t\tsuper.setFill(value);\r\n\t\tthis.column.fill = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Column3D\"] = Column3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Column3D.ts","/**\r\n * 3D column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { XYChart3D } from \"../types/XYChart3D\";\r\nimport { Column3D } from \"../elements/Column3D\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\nexport class ColumnSeries3DDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeries3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DProperties extends IColumnSeriesProperties {\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[ColumnSeries3D]].\r\n */\r\nexport interface IColumnSeries3DEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ColumnSeries3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IColumnSeries3DAdapters extends IColumnSeriesAdapters, IColumnSeries3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IColumnSeries3DEvents} for a list of available Events\r\n * @see {@link IColumnSeries3DAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ColumnSeries3D extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: ColumnSeries3DDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: Column3D;\r\n\r\n\t/**\r\n\t * Defines the type for data fields.\r\n\t */\r\n\tpublic _dataFields: IColumnSeries3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IColumnSeries3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IColumnSeries3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IColumnSeries3DEvents;\r\n\r\n\t/**\r\n\t * Specifies how deep in 3d space columns should be drawn.\r\n\t *\r\n\t * Internal use only.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic depthIndex: number;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: XYChart3D;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ColumnSeries3D\";\r\n\r\n\t\tthis.columns.template.column3D.applyOnClones = true;\r\n\t\tthis.columns.template.hiddenState.properties.visible = true;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tpublic get columnsContainer(): Container {\r\n\t\tif (this.chart && this.chart.columnsContainer) {\r\n\t\t\treturn this.chart.columnsContainer;\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn this._columnsContainer;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tif(dataItem.column){\r\n\t\t\tdataItem.column.dx = this.dx;\r\n\t\t\tdataItem.column.dy = this.dy;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tsuper.validateDataElements();\r\n\t\tif(this.chart){\r\n\t\t\tthis.chart.invalidateLayout();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for 3D bar.\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Column3D();\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * Depth (height) of the slices in the series in pixels.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value, true);\r\n\t\tlet template = this.columns.template; // todo: Cone is not Rectangle3D, maybe we should do some I3DShape?\r\n\t\ttemplate.column3D.depth = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle of view for the slices in series. (0-360)\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param value  Angle (0-360)\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tlet template = this.columns.template;\r\n\t\ttemplate.column3D.angle = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore Exclude from docs\r\n\t * @return Angle (0-360)\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ColumnSeries3D\"] = ColumnSeries3D;\r\nregistry.registeredClasses[\"ColumnSeries3DDataItem\"] = ColumnSeries3DDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ColumnSeries3D.ts","/**\r\n * Module for building 3D serial charts.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * Imports\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { XYChart, IXYChartProperties, IXYChartDataFields, IXYChartAdapters, IXYChartEvents, XYChartDataItem } from \"./XYChart\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { AxisRendererX3D } from \"../axes/AxisRendererX3D\";\r\nimport { AxisRendererY3D } from \"../axes/AxisRendererY3D\";\r\nimport { ColumnSeries3D } from \"../series/ColumnSeries3D\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[XYChart3D]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class XYChart3DDataItem extends XYChartDataItem {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3DDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DDataFields extends IXYChartDataFields { }\r\n\r\n/**\r\n * Defines available properties for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DProperties extends IXYChartProperties {\r\n\r\n\t/**\r\n\t * Depths of the chart in pixels.\r\n\t */\r\n\tdepth?: number;\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t */\r\n\tangle?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[XYChart3D]].\r\n */\r\nexport interface IXYChart3DEvents extends IXYChartEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYChart3D]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYChart3DAdapters extends IXYChartAdapters, IXYChart3DProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a 3D XY chart.\r\n *\r\n * @see {@link IXYChart3DEvents} for a list of available Events\r\n * @see {@link IXYChart3DAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/xy-chart/} for documentation\r\n * @important\r\n */\r\nexport class XYChart3D extends XYChart {\r\n\r\n\t/**\r\n\t * Available data fields.\r\n\t */\r\n\tpublic _dataFields: IXYChart3DDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYChart3DProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IXYChart3DAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYChart3DEvents;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for X axes.\r\n\t */\r\n\tprotected _axisRendererX: typeof AxisRendererX3D = AxisRendererX3D;\r\n\r\n\t/**\r\n\t * Type of the axis renderer to use for Y axes.\r\n\t */\r\n\tprotected _axisRendererY: typeof AxisRendererY3D = AxisRendererY3D;\r\n\r\n\t/**\r\n\t * A container to add 3D column elements to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic columnsContainer: Container;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYChart3D\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.depth = 30;\r\n\t\tthis.angle = 30;\r\n\r\n\t\t// Creeate container for columns\r\n\t\tlet columnsContainer = this.seriesContainer.createChild(Container);\r\n\t\tcolumnsContainer.shouldClone = false;\r\n\t\tcolumnsContainer.isMeasured = false;\r\n\t\tcolumnsContainer.layout = \"none\";\r\n\t\tthis.columnsContainer = columnsContainer;\r\n\r\n\t\tthis.columnsContainer.mask = this.createChild(Sprite);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is done because for some reason IE doesn't change mask if path of a\r\n\t * mask changes.\r\n\t */\r\n\tprotected updateSeriesMasks(): void {\r\n\t\tsuper.updateSeriesMasks();\r\n\t\tif ($utils.isIE()) {\r\n\t\t\tlet columnsContainer = this.columnsContainer;\r\n\t\t\tlet mask = columnsContainer.mask;\r\n\t\t\tcolumnsContainer.mask = undefined;\r\n\t\t\tcolumnsContainer.mask = mask;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Depth of the 3D chart / columns in pixels.\r\n\t *\r\n\t * @param value  Depth (px)\r\n\t */\r\n\tpublic set depth(value: number) {\r\n\t\tthis.setPropertyValue(\"depth\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Depth (px)\r\n\t */\r\n\tpublic get depth(): number {\r\n\t\treturn this.getPropertyValue(\"depth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Angle the chart is viewed at.\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param value  Angle\r\n\t */\r\n\tpublic set angle(value: number) {\r\n\t\tthis.setPropertyValue(\"angle\", value);\r\n\t\tthis.fixLayout();\r\n\t\tthis.invalidateDataUsers();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Angle\r\n\t */\r\n\tpublic get angle(): number {\r\n\t\treturn this.getPropertyValue(\"angle\");\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated horizontal 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dx3D(): number {\r\n\t\treturn $math.cos(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * A calculated vertical 3D offset (px).\r\n\t *\r\n\t * @readonly\r\n\t * @return Offset (px)\r\n\t */\r\n\tpublic get dy3D(): number {\r\n\t\treturn -$math.sin(this.angle) * this.depth;\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates layout\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateLayout() {\r\n\t\tsuper.validateLayout();\r\n\t\tthis.fixColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the layout (padding and scrollbar positions) to accommodate for\r\n\t * 3D depth and angle.\r\n\t */\r\n\tprotected fixLayout(): void {\r\n\r\n\t\tthis.chartContainer.marginTop = -this.dy3D;\r\n\t\tthis.chartContainer.paddingRight = this.dx3D;\r\n\r\n\t\tif (this.scrollbarX) {\r\n\t\t\tthis.scrollbarX.dy = this.dy3D;\r\n\t\t\tthis.scrollbarX.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tif (this.scrollbarY) {\r\n\t\t\tthis.scrollbarY.dy = this.dy3D;\r\n\t\t\tthis.scrollbarY.dx = this.dx3D;\r\n\t\t}\r\n\r\n\t\tthis.fixColumns();\r\n\r\n\t\tsuper.fixLayout();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates column positions, offset and dimensions based on chart's angle\r\n\t * and depth.\r\n\t */\r\n\tprotected fixColumns(): void {\r\n\t\tlet count: number = 1;\r\n\t\tlet i = 0;\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tif (!series.clustered && i > 0) {\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tseries.depthIndex = count - 1;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet s: number = 0;\r\n\r\n\t\t$iter.each(this.series.iterator(), (series) => {\r\n\t\t\tif (series instanceof ColumnSeries3D) {\r\n\r\n\t\t\t\tseries.depth = this.depth / (count);\r\n\t\t\t\tseries.angle = this.angle;\r\n\t\t\t\tseries.dx = this.depth / (count) * $math.cos(this.angle) * (series.depthIndex);\r\n\t\t\t\tseries.dy = -this.depth / (count) * $math.sin(this.angle) * (series.depthIndex);\r\n\r\n\t\t\t\tlet inversed = false;\r\n\t\t\t\tif ((series.baseAxis == series.xAxis && series.xAxis.renderer.inversed) || (series.baseAxis == series.yAxis && series.yAxis.renderer.inversed)) {\r\n\t\t\t\t\tinversed = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet i: number = 1;\r\n\t\t\t\tseries.columns.each((column) => {\r\n\t\t\t\t\tif (inversed) {\r\n\t\t\t\t\t\tcolumn.zIndex = 1000 * (1000 - i) + s - series.depthIndex * 100;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tcolumn.zIndex = 1000 * i + s - series.depthIndex * 100;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ti++;\r\n\t\t\t\t});\r\n\t\t\t\tif(inversed){\r\n\t\t\t\t\ts--;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\ts++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.maskColumns();\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up series\r\n\t\t\tif ($type.hasValue(config.series) && $type.isArray(config.series)) {\r\n\t\t\t\tfor (let i = 0, len = config.series.length; i < len; i++) {\r\n\t\t\t\t\tconfig.series[i].type = config.series[i].type || \"ColumnSeries3D\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\tprotected maskColumns() {\r\n\t\tlet w: number = this.plotContainer.pixelWidth;\r\n\t\tlet h: number = this.plotContainer.pixelHeight;\r\n\r\n\t\tlet dx: number = this.dx3D;\r\n\t\tlet dy: number = this.dy3D;\r\n\r\n\t\tlet path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: dx, y: dy }) + $path.lineTo({ x: w + dx, y: dy }) + $path.lineTo({ x: w + dx, y: h + dy }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: w, y: h }) + $path.lineTo({ x: 0, y: h }) + $path.closePath();\r\n\r\n\t\tlet columnsContainer = this.columnsContainer;\r\n\t\tif (columnsContainer && columnsContainer.mask) {\r\n\t\t\tcolumnsContainer.mask.path = path;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYChart3D\"] = XYChart3D;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/types/XYChart3D.ts","/**\r\n * Module that defines everything related to building Candlesticks.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Candlestick]].\r\n */\r\nexport interface ICandlestickProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[Candlestick]].\r\n */\r\nexport interface ICandlestickEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[Candlestick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickAdapters extends IColumnAdapters, ICandlestickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates Candlesticks.\r\n *\r\n * @see {@link ICandlestickEvents} for a list of available events\r\n * @see {@link ICandlestickAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class Candlestick extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickEvents;\r\n\r\n\t/**\r\n\t * Low line element\r\n\t */\r\n\tpublic lowLine: Line;\r\n\r\n\t/**\r\n\t * High line element\r\n\t */\r\n\tpublic highLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"Candlestick\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tsuper.createAssets();\r\n\r\n\t\tthis.lowLine = this.createChild(Line);\r\n\t\tthis.lowLine.shouldClone = false;\r\n\r\n\t\tthis.highLine = this.createChild(Line);\r\n\t\tthis.highLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Candlestick]].\r\n\t *\r\n\t * @param source Source Candlestick\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.lowLine) {\r\n\t\t\tthis.lowLine.copyFrom(source.lowLine);\r\n\t\t}\r\n\t\tif (this.highLine) {\r\n\t\t\tthis.highLine.copyFrom(source.highLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Candlestick\"] = Candlestick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/Candlestick.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, ColumnSeriesDataItem, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents } from \"./ColumnSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { Candlestick } from \"../elements/Candlestick\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\nimport { CalculatedValue } from \"../../core/Component\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CandlestickSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CandlestickSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: CandlestickSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.values.lowValueX = {};\r\n\t\tthis.values.lowValueY = {};\r\n\t\tthis.values.highValueX = {};\r\n\t\tthis.values.highValueY = {};\r\n\r\n\t\tthis.className = \"CandlestickSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueX(value: number) {\r\n\t\tthis.setValue(\"lowValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueX(): number {\r\n\t\treturn this.values.lowValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Low value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set lowValueY(value: number) {\r\n\t\tthis.setValue(\"lowValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get lowValueY(): number {\r\n\t\treturn this.values.lowValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for horizontal axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueX(value: number) {\r\n\t\tthis.setValue(\"highValueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueX(): number {\r\n\t\treturn this.values.highValueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * High value for vertical axis.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set highValueY(value: number) {\r\n\t\tthis.setValue(\"highValueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get highValueY(): number {\r\n\t\treturn this.values.highValueY.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for horizontal axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueX(value: number) {\r\n\t\tthis.setValue(\"valueX\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueX(): number {\r\n\t\treturn this.values.valueX.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Close value for vertical axis.\r\n\t *\r\n\t * This is an alias for `valueX` added for convenience only.\r\n\t *\r\n\t * @param value  Value\r\n\t */\r\n\tpublic set closeValueY(value: number) {\r\n\t\tthis.setValue(\"valueY\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Value\r\n\t */\r\n\tpublic get closeValueY(): number {\r\n\t\treturn this.values.valueY.value;\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesDataFields extends IColumnSeriesDataFields {\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for horizontal axis.\r\n\t */\r\n\tlowValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\tlowValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high numeric value for horizontal axis.\r\n\t */\r\n\thighValueX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low numeric value for vertical axis.\r\n\t */\r\n\thighValueY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for horizontal axis.\r\n\t */\r\n\tlowDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds low date for vertical axis.\r\n\t */\r\n\tlowDateY?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for horizontal axis.\r\n\t */\r\n\thighDateX?: string;\r\n\r\n\t/**\r\n\t * Field name in data which holds high date for vertical axis.\r\n\t */\r\n\thighDateY?: string;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a horizontal axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueXShow?: CalculatedValue;\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis low value for\r\n\t * the item.\r\n\t */\r\n\tlowValueYShow?: CalculatedValue;\t\r\n\r\n\t/**\r\n\t * Which calculated field to use to use as a vertical axis high value for\r\n\t * the item.\r\n\t */\r\n\thighValueYShow?: CalculatedValue;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CandlestickSeries]].\r\n */\r\nexport interface ICandlestickSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CandlestickSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICandlestickSeriesAdapters extends IColumnSeriesAdapters, ICandlestickSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link ICandlestickSeriesEvents} for a list of available Events\r\n * @see {@link ICandlestickSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class CandlestickSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: CandlestickSeriesDataItem;\r\n\r\n\t/**\r\n\t * Sets type of the column.\r\n\t */\r\n\tpublic _column: Candlestick;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: ICandlestickSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICandlestickSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICandlestickSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICandlestickSeriesEvents;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t */\r\n\tprotected _xLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t */\r\n\tprotected _yLowField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t */\r\n\tprotected _xHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t */\r\n\tprotected _yHighField: $type.Keyof<this[\"_dataFields\"]>;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CandlestickSeries\";\r\n\r\n\t\tthis.strokeOpacity = 1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\t\tlet positiveColor = interfaceColors.getFor(\"positive\");\r\n\t\tlet negativeColor = interfaceColors.getFor(\"negative\");\r\n\r\n\t\tthis.dropFromOpenState.properties.fill = negativeColor;\r\n\t\tthis.dropFromOpenState.properties.stroke = negativeColor;\r\n\r\n\t\tthis.riseFromOpenState.properties.fill = positiveColor;\r\n\t\tthis.riseFromOpenState.properties.stroke = positiveColor;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Candlestick Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new CandlestickSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tthis.validateCandlestick(dataItem);\r\n\t}\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"dataItem\"]) {\r\n\t\tlet column: Candlestick = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet lowLine = column.lowLine;\r\n\t\t\tlet highLine = column.highLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\r\n\t\t\t\tlowLine.x = x;\r\n\t\t\t\thighLine.x = x;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\tlowLine.y1 = yLow - pixelY;\r\n\t\t\t\thighLine.y1 = yHigh - pixelY;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.y2 = yOpen - pixelY;\r\n\t\t\t\t\thighLine.y2 = yClose - pixelY;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.y2 = yClose - pixelY;\r\n\t\t\t\t\thighLine.y2 = yOpen - pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\tlowLine.y = y;\r\n\t\t\t\thighLine.y = y;\r\n\r\n\t\t\t\tlet open = dataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tlet close = dataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\tlowLine.x1 = xLow - pixelX;\r\n\t\t\t\thighLine.x1 = xHigh - pixelX;\r\n\r\n\t\t\t\tif (open < close) {\r\n\t\t\t\t\tlowLine.x2 = xOpen - pixelX;\r\n\t\t\t\t\thighLine.x2 = xClose - pixelX;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tlowLine.x2 = xClose - pixelX;\r\n\t\t\t\t\thighLine.x2 = xOpen - pixelX;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\t// LOW LINE\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeLowLine = rangeColumn.lowLine;\r\n\t\t\t\t\trangeLowLine.x = lowLine.x;\r\n\t\t\t\t\trangeLowLine.y = lowLine.y;\r\n\t\t\t\t\trangeLowLine.x1 = lowLine.x1;\r\n\t\t\t\t\trangeLowLine.x2 = lowLine.x2;\r\n\t\t\t\t\trangeLowLine.y1 = lowLine.y1;\r\n\t\t\t\t\trangeLowLine.y2 = lowLine.y2;\r\n\r\n\t\t\t\t\t// HIGH LINE\r\n\t\t\t\t\tlet rangehighLine = rangeColumn.highLine;\r\n\t\t\t\t\trangehighLine.x = highLine.x;\r\n\t\t\t\t\trangehighLine.y = highLine.y;\r\n\t\t\t\t\trangehighLine.x1 = highLine.x1;\r\n\t\t\t\t\trangehighLine.x2 = highLine.x2;\r\n\t\t\t\t\trangehighLine.y1 = highLine.y1;\r\n\t\t\t\t\trangehighLine.y2 = highLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xLowField(): string {\r\n\t\treturn this._xLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"low\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yLowField(): string {\r\n\t\treturn this._yLowField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for horizontal axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get xHighField(): string {\r\n\t\treturn this._xHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * A data field to look for \"high\" value for vertical axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Field name\r\n\t */\r\n\tpublic get yHighField(): string {\r\n\t\treturn this._yHighField;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up which data fields to use for data access.\r\n\t */\r\n\tprotected defineFields() {\r\n\t\tsuper.defineFields();\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\tlet yAxisFieldName: string = $utils.capitalize(this.yAxis.axisFieldName);\r\n\t\t\tthis._yLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + yAxisFieldName + \"Y\");\r\n\t\t\tthis._yHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + yAxisFieldName + \"Y\");\r\n\t\t}\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tlet xAxisFieldName: string = $utils.capitalize(this.xAxis.axisFieldName);\r\n\t\t\tthis._xLowField = <$type.Keyof<this[\"_dataFields\"]>>(\"low\" + xAxisFieldName + \"X\");\r\n\t\t\tthis._xHighField = <$type.Keyof<this[\"_dataFields\"]>>(\"high\" + xAxisFieldName + \"X\");\r\n\t\t}\r\n\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xLowField);\r\n\t\tthis.addValueField(this.xAxis, <any>this._xValueFields, <any>this._xHighField);\r\n\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yLowField);\r\n\t\tthis.addValueField(this.yAxis, <any>this._yValueFields, <any>this._yHighField);\r\n\t}\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: Candlestick = marker.createChild(Candlestick);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet highLine: Line = column.lowLine;\r\n\t\tlet lowLine: Line = column.highLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLine.y = h / 2;\r\n\t\t\tlowLine.y = h / 2;\r\n\r\n\t\t\thighLine.x2 = w / 3;\r\n\t\t\tlowLine.x2 = w / 3;\r\n\t\t\tlowLine.x = w / 3 * 2;\r\n\t\t\tcolumn.column.x = w / 3;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\t\t\thighLine.x = w / 2;\r\n\t\t\tlowLine.x = w / 2;\r\n\r\n\t\t\thighLine.y2 = h / 3;\r\n\t\t\tlowLine.y2 = h / 3;\r\n\t\t\tlowLine.y = h / 3 * 2;\r\n\t\t\tcolumn.column.y = h / 3;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\t\tcolumn.fill = column.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.fill;\r\n\t\tlegendDataItem.colorOrig = column.fill;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new Candlestick();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CandlestickSeries\"] = CandlestickSeries;\r\nregistry.registeredClasses[\"CandlestickSeriesDataItem\"] = CandlestickSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CandlestickSeries.ts","/**\r\n * Module that defines everything related to building OHLCs.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Candlestick, ICandlestickProperties, ICandlestickAdapters, ICandlestickEvents } from \"./Candlestick\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[OHLC]].\r\n */\r\nexport interface IOHLCProperties extends ICandlestickProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLC]].\r\n */\r\nexport interface IOHLCEvents extends ICandlestickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLC]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCAdapters extends ICandlestickAdapters, IOHLCProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates OHLCs.\r\n *\r\n * @see {@link IOHLCEvents} for a list of available events\r\n * @see {@link IOHLCAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class OHLC extends Candlestick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCEvents;\r\n\r\n\r\n\t/**\r\n\t * Open line element\r\n\t */\r\n\tpublic openLine: Line;\r\n\r\n\t/**\r\n\t * Close line element\r\n\t */\r\n\tpublic closeLine: Line;\r\n\r\n\t/**\r\n\t * High-low line element\r\n\t */\r\n\tpublic highLowLine: Line;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLC\";\r\n\t\tthis.layout = \"none\";\r\n\t}\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\t//super.createAssets();\r\n\r\n\t\tthis.openLine = this.createChild(Line);\r\n\t\tthis.openLine.shouldClone = false;\r\n\r\n\t\tthis.highLowLine = this.createChild(Line);\r\n\t\tthis.highLowLine.shouldClone = false;\r\n\r\n\t\tthis.closeLine = this.createChild(Line);\r\n\t\tthis.closeLine.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[OHLC]].\r\n\t *\r\n\t * @param source Source OHLC\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.openLine) {\r\n\t\t\tthis.openLine.copyFrom(source.openLine);\r\n\t\t}\r\n\t\tif (this.highLowLine) {\r\n\t\t\tthis.highLowLine.copyFrom(source.highLowLine);\r\n\t\t}\r\n\t\tif (this.closeLine) {\r\n\t\t\tthis.closeLine.copyFrom(source.closeLine);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLC\"] = OHLC;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/OHLC.ts","/**\r\n * Candlestick Series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { CandlestickSeries, CandlestickSeriesDataItem, ICandlestickSeriesDataFields, ICandlestickSeriesProperties, ICandlestickSeriesAdapters, ICandlestickSeriesEvents } from \"./CandlestickSeries\";\r\nimport { visualProperties } from \"../../core/Sprite\";\r\nimport { Line } from \"../../core/elements/Line\";\r\nimport { Container } from \"../../core/Container\";\r\nimport { OHLC } from \"../elements/OHLC\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { LegendDataItem } from \"../../charts/Legend\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[OHLCSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class OHLCSeriesDataItem extends CandlestickSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the OHLC elements.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for\r\n\t * @todo Disabled to work around TS bug (see if we can re-enable it again)\r\n\t */\r\n\t//public _component!: OHLCSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"OHLCSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesDataFields extends ICandlestickSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesProperties extends ICandlestickSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[OHLCSeries]].\r\n */\r\nexport interface IOHLCSeriesEvents extends ICandlestickSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[OHLCSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IOHLCSeriesAdapters extends ICandlestickSeriesAdapters, IOHLCSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a candlestick graph.\r\n *\r\n * @see {@link IOHLCSeriesEvents} for a list of available Events\r\n * @see {@link IOHLCSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class OHLCSeries extends CandlestickSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: OHLCSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: OHLC;\r\n\r\n\t/**\r\n\t * Defines available data fields.\r\n\t */\r\n\tpublic _dataFields: IOHLCSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IOHLCSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IOHLCSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IOHLCSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"OHLCSeries\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"OHLC Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new OHLCSeriesDataItem();\r\n\t}\r\n\r\n\r\n\tprotected validateCandlestick(dataItem: this[\"_dataItem\"]) {\r\n\t\tlet column: OHLC = dataItem.column;\r\n\t\tif (column) {\r\n\t\t\tlet openLine = column.openLine;\r\n\t\t\tlet highLowLine = column.highLowLine;\r\n\t\t\tlet closeLine = column.closeLine;\r\n\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tlet x: number = column.pixelWidth / 2;\r\n\t\t\t\thighLowLine.x = x;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.yOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.yField);\r\n\r\n\t\t\t\tlet yOpen = this.yAxis.getY(dataItem, this.yOpenField);\r\n\t\t\t\tlet yClose = this.yAxis.getY(dataItem, this.yField);\r\n\t\t\t\tlet yLow = this.yAxis.getY(dataItem, this.yLowField);\r\n\t\t\t\tlet yHigh = this.yAxis.getY(dataItem, this.yHighField);\r\n\r\n\t\t\t\tlet pixelY = column.pixelY;\r\n\r\n\t\t\t\topenLine.y1 = yOpen - pixelY;\r\n\t\t\t\topenLine.y2 = yOpen - pixelY;\r\n\t\t\t\topenLine.x1 = 0;\r\n\t\t\t\topenLine.x2 = x;\r\n\r\n\t\t\t\tcloseLine.y1 = yClose - pixelY;\r\n\t\t\t\tcloseLine.y2 = yClose - pixelY;\r\n\t\t\t\tcloseLine.x1 = x;\r\n\t\t\t\tcloseLine.x2 = 2 * x;\r\n\r\n\t\t\t\thighLowLine.y1 = yHigh - pixelY;\r\n\t\t\t\thighLowLine.y2 = yLow - pixelY;\r\n\r\n\t\t\t}\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tlet y: number = column.pixelHeight / 2;\r\n\r\n\t\t\t\thighLowLine.y = y;\r\n\r\n\t\t\t\t// TODO can these be removed ?\r\n\t\t\t\tdataItem.getWorkingValue(this.xOpenField);\r\n\t\t\t\tdataItem.getWorkingValue(this.xField);\r\n\r\n\t\t\t\tlet xOpen = this.xAxis.getX(dataItem, this.xOpenField);\r\n\t\t\t\tlet xClose = this.xAxis.getX(dataItem, this.xField);\r\n\t\t\t\tlet xLow = this.xAxis.getX(dataItem, this.xLowField);\r\n\t\t\t\tlet xHigh = this.xAxis.getX(dataItem, this.xHighField);\r\n\r\n\t\t\t\tlet pixelX = column.pixelX;\r\n\r\n\t\t\t\topenLine.x1 = xOpen - pixelX;\r\n\t\t\t\topenLine.x2 = xOpen - pixelX;\r\n\t\t\t\topenLine.y1 = y;\r\n\t\t\t\topenLine.y2 = 2 * y;\r\n\r\n\t\t\t\tcloseLine.x1 = xClose - pixelX;\r\n\t\t\t\tcloseLine.x2 = xClose - pixelX;\r\n\t\t\t\tcloseLine.y1 = 0;\r\n\t\t\t\tcloseLine.y2 = y;\r\n\r\n\t\t\t\thighLowLine.x1 = xHigh - pixelX;\r\n\t\t\t\thighLowLine.x2 = xLow - pixelX;\r\n\t\t\t}\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (rangeColumn) {\r\n\t\t\t\t\tlet rangeOpenLine = rangeColumn.openLine;\r\n\t\t\t\t\trangeOpenLine.x = openLine.x;\r\n\t\t\t\t\trangeOpenLine.y = openLine.y;\r\n\t\t\t\t\trangeOpenLine.x1 = openLine.x1;\r\n\t\t\t\t\trangeOpenLine.x2 = openLine.x2;\r\n\t\t\t\t\trangeOpenLine.y1 = openLine.y1;\r\n\t\t\t\t\trangeOpenLine.y2 = openLine.y2;\r\n\r\n\t\t\t\t\tlet rangeCloseLine = rangeColumn.closeLine;\r\n\t\t\t\t\trangeCloseLine.x = closeLine.x;\r\n\t\t\t\t\trangeCloseLine.y = closeLine.y;\r\n\t\t\t\t\trangeCloseLine.x1 = closeLine.x1;\r\n\t\t\t\t\trangeCloseLine.x2 = closeLine.x2;\r\n\t\t\t\t\trangeCloseLine.y1 = closeLine.y1;\r\n\t\t\t\t\trangeCloseLine.y2 = closeLine.y2;\r\n\r\n\t\t\t\t\tlet rangeHighLowLine = rangeColumn.highLowLine;\r\n\t\t\t\t\trangeHighLowLine.x = highLowLine.x;\r\n\t\t\t\t\trangeHighLowLine.y = highLowLine.y;\r\n\t\t\t\t\trangeHighLowLine.x1 = highLowLine.x1;\r\n\t\t\t\t\trangeHighLowLine.x2 = highLowLine.x2;\r\n\t\t\t\t\trangeHighLowLine.y1 = highLowLine.y1;\r\n\t\t\t\t\trangeHighLowLine.y2 = highLowLine.y2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Creates elements in related legend container, that mimics the look of this\r\n\t * Series.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param marker  Legend item container\r\n\t */\r\n\tpublic createLegendMarker(marker: Container): void {\r\n\r\n\t\tlet w: number = marker.pixelWidth;\r\n\t\tlet h: number = marker.pixelHeight;\r\n\r\n\t\tmarker.removeChildren();\r\n\r\n\t\tlet column: OHLC = marker.createChild(OHLC);\r\n\t\tcolumn.shouldClone = false;\r\n\t\tcolumn.copyFrom(<any>this.columns.template);\r\n\r\n\t\tlet cw: number;\r\n\t\tlet ch: number;\r\n\r\n\t\tlet openLine: Line = column.openLine;\r\n\t\tlet closeLine: Line = column.closeLine;\r\n\t\tlet highLowLine: Line = column.highLowLine;\r\n\r\n\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\tcw = w / 3;\r\n\t\t\tch = h;\r\n\r\n\t\t\thighLowLine.y = h / 2;\r\n\t\t\thighLowLine.x2 = w;\r\n\r\n\t\t\topenLine.x = w / 3 * 2;\r\n\t\t\topenLine.y2 = h / 2;\r\n\r\n\t\t\tcloseLine.x = w / 3;\r\n\t\t\tcloseLine.y2 = h;\r\n\t\t\tcloseLine.y1 = h / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tcw = w;\r\n\t\t\tch = h / 3;\r\n\r\n\t\t\thighLowLine.x = w / 2;\r\n\t\t\thighLowLine.y2 = h;\r\n\r\n\t\t\topenLine.y = h / 3 * 2;\r\n\t\t\topenLine.x2 = w / 2;\r\n\r\n\t\t\tcloseLine.y = h / 3;\r\n\t\t\tcloseLine.x2 = w;\r\n\t\t\tcloseLine.x1 = w / 2;\r\n\t\t}\r\n\t\tcolumn.width = cw;\r\n\t\tcolumn.height = ch;\r\n\r\n\t\t$object.copyProperties(this, marker, visualProperties);\r\n\t\t$object.copyProperties(this.columns.template, column, visualProperties);\r\n\r\n\t\tcolumn.stroke = this.riseFromOpenState.properties.stroke;\r\n\r\n\t\tlet legendDataItem = <LegendDataItem>marker.dataItem;\r\n\t\tlegendDataItem.color = column.stroke;\r\n\t\tlegendDataItem.colorOrig = column.stroke;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new OHLC();\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"OHLCSeries\"] = OHLCSeries;\r\nregistry.registeredClasses[\"OHLCSeriesDataItem\"] = OHLCSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/OHLCSeries.ts","/**\r\n * Line series segment module.\r\n * @todo Add description about what this is\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ILineSeriesSegmentAdapters, ILineSeriesSegmentEvents, ILineSeriesSegmentProperties, LineSeriesSegment } from \"./LineSeriesSegment\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentProperties extends ILineSeriesSegmentProperties { }\r\n\r\n/**\r\n * Defines events for [[StepLineSeriesSegment]].\r\n */\r\nexport interface IStepLineSeriesSegmentEvents extends ILineSeriesSegmentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeriesSegment]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesSegmentAdapters extends ILineSeriesSegmentAdapters, IStepLineSeriesSegmentProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Represents a line series segment.\r\n *\r\n * A line segment can be used to apply different properties to a part of the\r\n * line series, between two data points.\r\n *\r\n * @see {@link IStepLineSeriesSegmentEvents} for a list of available events\r\n * @see {@link IStepLineSeriesSegmentAdapters} for a list of available Adapters\r\n * @todo Example\r\n */\r\nexport class StepLineSeriesSegment extends LineSeriesSegment {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesSegmentProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesSegmentAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesSegmentEvents;\r\n\r\n\t/**\r\n\t * Segment's line element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic strokeSprite: Sprite;\r\n\r\n\t/**\r\n\t * Segment's fill element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic fillSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesSegment\";\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the series segment.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param points       Points to connect\r\n\t * @param closePoints  ?\r\n\t * @param smoothnessX  Horizontal bezier setting (?)\r\n\t * @param smoothnessY  Vertical bezier setting (?)\r\n\t */\r\n\tpublic drawSegment(points: IPoint[], closePoints: IPoint[], smoothnessX: number, smoothnessY: number, noRisers?: boolean, vertical?: boolean): void {\r\n\t\tif (points.length > 0 && closePoints.length > 0) {\r\n\r\n\t\t\tif (noRisers) {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]);\r\n\t\t\t\tif (points.length > 0) {\r\n\t\t\t\t\tfor (let i = 1; i < points.length; i++) {\r\n\t\t\t\t\t\tlet point = points[i];\r\n\t\t\t\t\t\tif (i / 2 == Math.round(i / 2)) {\r\n\t\t\t\t\t\t\tpath += $path.moveTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tpath += $path.lineTo(point);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath = $path.moveTo(points[0]) + $path.polyline(points);\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet path: string = $path.moveTo(points[0]) + $path.polyline(points);\r\n\r\n\t\t\t\tthis.strokeSprite.path = path;\r\n\r\n\t\t\t\tif (this.fillOpacity > 0 || this.fillSprite.fillOpacity > 0) { // helps to avoid drawing fill object if fill is not visible\r\n\t\t\t\t\tpath += $path.lineTo(closePoints[0]) + $path.polyline(closePoints);\r\n\t\t\t\t\tpath += $path.lineTo(points[0]);\r\n\t\t\t\t\tpath += $path.closePath();\r\n\r\n\t\t\t\t\tthis.fillSprite.path = path;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeriesSegment\"] = StepLineSeriesSegment;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeriesSegment.ts","/**\r\n * Step line series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { LineSeries, LineSeriesDataItem, ILineSeriesDataFields, ILineSeriesProperties, ILineSeriesAdapters, ILineSeriesEvents } from \"./LineSeries\";\r\nimport { StepLineSeriesSegment } from \"./StepLineSeriesSegment\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[StepLineSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class StepLineSeriesDataItem extends LineSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: StepLineSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesDataFields extends ILineSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesProperties extends ILineSeriesProperties {\r\n\tnoRisers?: boolean;\r\n\r\n\tstartLocation?: number;\r\n\r\n\tendLocation?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[StepLineSeries]].\r\n */\r\nexport interface IStepLineSeriesEvents extends ILineSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[StepLineSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IStepLineSeriesAdapters extends ILineSeriesAdapters, IStepLineSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a step line graph.\r\n *\r\n * @see {@link IStepLineSeriesEvents} for a list of available Events\r\n * @see {@link IStepLineSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class StepLineSeries extends LineSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IStepLineSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IStepLineSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IStepLineSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IStepLineSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: StepLineSeriesDataItem;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _segment: StepLineSeriesSegment;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"StepLineSeries\";\r\n\t\tthis.applyTheme();\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new StepLineSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * [addPoints description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param points     [description]\r\n\t * @param dataItem   [description]\r\n\t * @param xField     [description]\r\n\t * @param yField     [description]\r\n\t * @param backwards  [description]\r\n\t */\r\n\tprotected addPoints(points: IPoint[], dataItem: this[\"_dataItem\"], xField: string, yField: string, backwards?: boolean): void {\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet x0: number = this.xAxis.getX(dataItem, xField, startLocation);\r\n\t\tlet y0: number = this.yAxis.getY(dataItem, yField, startLocation);\r\n\r\n\t\tlet x1: number = this.xAxis.getX(dataItem, xField, endLocation);\r\n\t\tlet y1: number = this.yAxis.getY(dataItem, yField, endLocation);\r\n\r\n\t\tx0 = $math.fitToRange(x0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty0 = $math.fitToRange(y0, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\tx1 = $math.fitToRange(x1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\t\ty1 = $math.fitToRange(y1, -100000, 100000); // from geometric point of view this is not right, but practically it's ok. this is done to avoid too big objects.\r\n\r\n\t\t// this might make an impression that points are duplicated, and they indeed are, but this is needed to handle gaps in data\r\n\t\tif (!this.noRisers) {\r\n\t\t\tif (points.length > 1) {\r\n\t\t\t\tlet prevPoint: IPoint = points[points.length - 1];\r\n\t\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y1 });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: x0, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\t\tif (backwards) {\r\n\t\t\t\t\t\tpoints.push({ x: x1, y: prevPoint.y });\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tpoints.push({ x: prevPoint.x, y: y0 });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet point0: IPoint = { x: x0, y: y0 };\r\n\t\tlet point1: IPoint = { x: x1, y: y1 };\r\n\r\n\t\tif (backwards) {\r\n\t\t\tpoints.push(point1, point0);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpoints.push(point0, point1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Draws the line segment.\r\n\t *\r\n\t * @param segment     Segment\r\n\t * @param points      Segment points\r\n\t * @param closePoints Segment close points\r\n\t */\r\n\tprotected drawSegment(segment: StepLineSeriesSegment, points: IPoint[], closePoints: IPoint[]): void {\r\n\t\tlet vertical = false;\r\n\t\tif (this.yAxis == this.baseAxis) {\r\n\t\t\tvertical = true;\r\n\t\t}\r\n\t\tsegment.drawSegment(points, closePoints, this.tensionX, this.tensionY, this.noRisers, vertical);\r\n\t}\r\n\r\n\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createSegment(): this[\"_segment\"] {\r\n\t\treturn new StepLineSeriesSegment();\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies if step line series should draw only horizontal (or only\r\n\t * vertical, depending on base axis) lines, instead of connecting them with\r\n\t * vertical (or horizontal) lines.\r\n\t *\r\n\t * @default false\r\n\t * @param value  No risers\r\n\t */\r\n\tpublic set noRisers(value: boolean) {\r\n\t\tthis.setPropertyValue(\"noRisers\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return No risers\r\n\t */\r\n\tpublic get noRisers(): boolean {\r\n\t\treturn this.getPropertyValue(\"noRisers\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * start location of the step\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * @default 0\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"startLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Step end location.\r\n\t *\r\n\t * @param value Location (0-1)\r\n\t * #default 1\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tthis.setPropertyValue(\"endLocation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"StepLineSeries\"] = StepLineSeries;\r\nregistry.registeredClasses[\"StepLineSeriesDataItem\"] = StepLineSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/StepLineSeries.ts","/**\r\n * Module that defines everything related to building RadarColumns.\r\n * It is a container which has radarColumn element which is a Slice.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Slice } from \"../../core/elements/Slice\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumn]].\r\n */\r\nexport interface IRadarColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnAdapters extends IColumnAdapters, IRadarColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates RadarColumns.\r\n *\r\n * @see {@link IRadarColumnEvents} for a list of available events\r\n * @see {@link IRadarColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class RadarColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Radar column element\r\n\t */\r\n\tpublic radarColumn: Slice;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected createAssets() {\r\n\t\tthis.radarColumn = this.createChild(Slice);\r\n\t\tthis.radarColumn.shouldClone = false;\r\n\t\tthis.radarColumn.strokeOpacity = undefined;\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.radarColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[RadarColumn]].\r\n\t *\r\n\t * @param source Source RadarColumn\r\n\t */\r\n\tpublic copyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.radarColumn) {\r\n\t\t\tthis.radarColumn.copyFrom(source.radarColumn);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * X coordinate for the slice tooltip.\r\n\t *\r\n\t * @return X\r\n\t */\r\n\tprotected getTooltipX(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipX;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n\t/**\r\n\t * Y coordinate for the slice tooltip.\r\n\t *\r\n\t * @return Y\r\n\t */\r\n\tprotected getTooltipY(): number {\r\n\t\tlet value = this.getPropertyValue(\"tooltipX\");\r\n\t\tif (!$type.isNumber(value)) {\r\n\t\t\tvalue = this.radarColumn.tooltipY;\r\n\t\t}\r\n\t\treturn value;\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumn\"] = RadarColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/RadarColumn.ts","/**\r\n * Radar column series module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesProperties, IColumnSeriesDataFields, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"../series/ColumnSeries\";\r\nimport { Sprite, visualProperties } from \"../../core/Sprite\";\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { AxisRendererRadial } from \"../axes/AxisRendererRadial\";\r\n//import { AxisRendererCircular } from \"../axes/AxisRendererCircular\";\r\nimport { RadarColumn } from \"../elements/RadarColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $object from \"../../core/utils/Object\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $array from \"../../core/utils/Array\";\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[RadarColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class RadarColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: RadarColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[RadarColumnSeries]].\r\n */\r\nexport interface IRadarColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarColumnSeriesAdapters extends IColumnSeriesAdapters, IRadarColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a 3D column graph.\r\n *\r\n * @see {@link IRadarColumnSeriesEvents} for a list of available Events\r\n * @see {@link IRadarColumnSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class RadarColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of data item.\r\n\t */\r\n\tpublic _dataItem: RadarColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: RadarColumn;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IRadarColumnSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IRadarColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IRadarColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * A chart series belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates and returns a RadarColumn element to use as column in radar chart.\r\n\t *\r\n\t * @return RadarColumn.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new RadarColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\r\n\t\t// so that radius would be updated\r\n\t\tif (this.chart.invalid) {\r\n\t\t\tthis.chart.validate();\r\n\t\t}\r\n\r\n\t\tsuper.validate();\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tlet startAngle = this.chart.startAngle;\r\n\t\tlet endAngle = this.chart.endAngle;\r\n\r\n\t\tlet yField: string = this.yField;\r\n\t\tlet yOpenField: string = this.yOpenField;\r\n\t\tlet xField: string = this.xField;\r\n\t\tlet xOpenField: string = this.xOpenField;\r\n\r\n\t\tlet lAngle: number;\r\n\t\tlet rAngle: number;\r\n\r\n\t\tlet tRadius: number;\r\n\t\tlet bRadius: number;\r\n\r\n\t\tlet startLocation = this.getStartLocation(dataItem);\r\n\t\tlet endLocation = this.getEndLocation(dataItem);\r\n\r\n\t\tlet cellAngle = (endAngle - startAngle) / (this.dataItems.length * (this.end - this.start));\r\n\r\n\t\tlet template: Sprite = this.columns.template;\r\n\r\n\t\tlet percentWidth: number = template.percentWidth;\r\n\r\n\t\tif ($type.isNaN(percentWidth)) {\r\n\t\t\tpercentWidth = 100;\r\n\t\t}\r\n\r\n\t\tlet offset: number = $math.round((endLocation - startLocation) * (1 - percentWidth / 100) / 2, 5);\r\n\t\tstartLocation += offset;\r\n\t\tendLocation -= offset;\r\n\r\n\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, dataItem.locations[yField], \"valueY\"), y: this.yAxis.getY(dataItem, yField, dataItem.locations[yField], \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, dataItem.locations[yOpenField], \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xOpenField, startLocation, \"valueX\");\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xField, endLocation, \"valueX\");\r\n\r\n\t\t\tstartAngle = startAngle + startLocation * cellAngle;\r\n\t\t\tendAngle = endAngle - (1 - endLocation) * cellAngle;\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yField, startLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yField, startLocation, \"valueY\") });\r\n\t\t\tbRadius = $math.getDistance({ x: this.yAxis.getX(dataItem, yOpenField, endLocation, \"valueY\"), y: this.yAxis.getY(dataItem, yOpenField, endLocation, \"valueY\") });\r\n\r\n\t\t\tlAngle = this.xAxis.getAngle(dataItem, xField, dataItem.locations[xField], \"valueX\");\r\n\r\n\t\t\trAngle = this.xAxis.getAngle(dataItem, xOpenField, dataItem.locations[xOpenField], \"valueX\");\r\n\t\t}\r\n\r\n\t\tif (rAngle < lAngle) {\r\n\t\t\tlet temp = rAngle;\r\n\t\t\trAngle = lAngle;\r\n\t\t\tlAngle = temp;\r\n\t\t}\r\n\r\n\t\tlAngle = $math.fitToRange(lAngle, startAngle, endAngle);\r\n\t\trAngle = $math.fitToRange(rAngle, startAngle, endAngle);\r\n\r\n\t\tlet radarColumn = dataItem.column;\r\n\t\tif (!radarColumn) {\r\n\t\t\tradarColumn = this.columns.create();\r\n\t\t\tdataItem.column = radarColumn;\r\n\t\t\t$object.forceCopyProperties(this.columns.template, radarColumn, visualProperties);\r\n\t\t\tdataItem.addSprite(radarColumn);\r\n\t\t\tradarColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\r\n\t\t\tthis.setColumnStates(radarColumn);\r\n\t\t}\r\n\r\n\t\tlet slice = radarColumn.radarColumn;\r\n\r\n\t\tslice.startAngle = lAngle;\r\n\r\n\t\tlet arc = rAngle - lAngle;\r\n\r\n\t\tif (arc > 0) {\r\n\t\t\tslice.arc = arc;\r\n\t\t\tslice.radius = tRadius;\r\n\t\t\tslice.innerRadius = bRadius;\r\n\t\t\tradarColumn.__disabled = false;\r\n\r\n\t\t\tradarColumn.parent = this.columnsContainer;\r\n\r\n\t\t\t$iter.each(this.axisRanges.iterator(), (axisRange) => {\r\n\t\t\t\tlet rangeColumn = dataItem.rangesColumns.getKey(axisRange.uid);\r\n\t\t\t\tif (!rangeColumn) {\r\n\t\t\t\t\trangeColumn = this.columns.create();\r\n\r\n\t\t\t\t\t$object.forceCopyProperties(this.columns.template, rangeColumn, visualProperties);\r\n\t\t\t\t\t$object.copyProperties(axisRange.contents, rangeColumn, visualProperties); // need this because 3d columns are not in the same container\r\n\r\n\t\t\t\t\tif (rangeColumn.dataItem) {\r\n\t\t\t\t\t\t$array.remove(rangeColumn.dataItem.sprites, rangeColumn);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tdataItem.addSprite(rangeColumn);\r\n\t\t\t\t\trangeColumn.paper = this.paper; // sometimes pattern is not drawn if is set with adapter without this.\t\t\t\t\t\r\n\t\t\t\t\tthis.setColumnStates(rangeColumn);\r\n\t\t\t\t\tdataItem.rangesColumns.setKey(axisRange.uid, rangeColumn);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet slice = rangeColumn.radarColumn;\r\n\t\t\t\tslice.startAngle = lAngle;\r\n\t\t\t\tslice.arc = arc;\r\n\t\t\t\tslice.radius = tRadius;\r\n\t\t\t\tslice.innerRadius = bRadius;\r\n\r\n\t\t\t\tif (slice.invalid) {\r\n\t\t\t\t\tslice.paper = this.paper;\r\n\t\t\t\t\tslice.validate(); // validate as if it was used previously, it will flicker with previous dimensions\r\n\t\t\t\t}\r\n\r\n\t\t\t\trangeColumn.__disabled = false;\r\n\t\t\t\trangeColumn.parent = axisRange.contents;\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.disableUnusedColumns(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an [[IPoint]] coordinates of the specific Serie's data point.\r\n\t *\r\n\t * @param    dataItem   Data item\r\n\t * @param    xKey       Name of X data field\r\n\t * @param    yKey       Name of Y data field\r\n\t * @param    locationX  X location\r\n\t * @param    locationY  Y location\r\n\t * @param    stackKeyX  ?\r\n\t * @param    stackKeyY  ?\r\n\t * @returns             Coordinates\r\n\t */\r\n\tpublic getPoint(dataItem: RadarColumnSeriesDataItem, xKey: string, yKey: string, locationX?: number, locationY?: number, stackKeyX?: string, stackKeyY?: string) {\r\n\r\n\t\tif (!stackKeyX) {\r\n\t\t\tstackKeyX = \"valueX\";\r\n\t\t}\r\n\t\tif (!stackKeyY) {\r\n\t\t\tstackKeyY = \"valueY\";\r\n\t\t}\r\n\r\n\t\tlet x: number = this.yAxis.getX(dataItem, yKey, locationY, stackKeyY);\r\n\t\tlet y: number = this.yAxis.getY(dataItem, yKey, locationY, stackKeyY);\r\n\r\n\t\tlet radius: number = $math.getDistance({ x: x, y: y });\r\n\t\t// hack to be able to determine angle later\r\n\t\tif (radius == 0) {\r\n\t\t\tradius = 0.00001;\r\n\t\t}\r\n\r\n\t\tlet angle: number = this.xAxis.getAngle(dataItem, xKey, locationX, stackKeyX);\r\n\r\n\t\treturn { x: radius * $math.cos(angle), y: radius * $math.sin(angle) };\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Returns an SVG path to be used as a mask for the series.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet renderer: AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\treturn $path.arc(renderer.startAngle, renderer.endAngle - renderer.startAngle, renderer.pixelRadius, renderer.pixelInnerRadius);\r\n\t}\r\n\r\n\t/*\r\n\t\tprotected positionBulletReal(bullet:Sprite, positionX:number, positionY:number){\r\n\t\t\t\r\n\t\t\tlet rendererX:AxisRendererCircular = <AxisRendererCircular>this.xAxis.renderer;\r\n\t\t\tlet rendererY:AxisRendererRadial = <AxisRendererRadial>this.yAxis.renderer;\r\n\t\t\t\r\n\t\t\tlet angle = rendererX.positionToAngle(positionX);\r\n\t\t\tlet radius = rendererY.positionToCoordinate(positionY);\r\n\t\r\n\t\t\tif(angle < this.chart.startAngle || angle > this.chart.endAngle){\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\r\n\t\t\tbullet.x = $math.cos(angle) * radius;\r\n\t\t\tbullet.y = $math.sin(angle) * radius;\r\n\t\t}*/\r\n\r\n\t/*\r\n\t\tpublic positionBullet(bullet: Bullet) {\r\n\t\t\tsuper.positionBullet(bullet);\r\n\t\r\n\t\t\tlet dataItem:RadarColumnSeriesDataItem = <RadarColumnSeriesDataItem>bullet.dataItem;\r\n\t\r\n\t\t\t// use series xField/yField if bullet doesn't have fields set\r\n\t\t\tlet xField: string = bullet.xField;\r\n\t\t\tif (!$type.hasValue(xField)) {\r\n\t\t\t\txField = this.xField;\r\n\t\t\t}\r\n\t\r\n\t\t\tlet yField: string = bullet.yField;\r\n\t\t\tif (!$type.hasValue(yField)) {\r\n\t\t\t\tyField = this.yField;\r\n\t\t\t}\r\n\t\r\n\t\t\tif ((this.xAxis instanceof ValueAxis && !dataItem.hasValue([xField])) || (this.yAxis instanceof ValueAxis && !dataItem.hasValue([yField]))) {\r\n\t\t\t\tbullet.visible = false;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet bulletLocationX: number = this.getBulletLocationX(bullet, xField);\r\n\t\t\t\tlet bulletLocationY: number = this.getBulletLocationY(bullet, yField);\r\n\t\r\n\t\t\t\tlet point = this.getPoint(dataItem, xField, yField, bulletLocationX, bulletLocationY);\r\n\t\t\t\tif (point) {\r\n\t\t\t\t\tlet xOpenField = this.xOpenField;\r\n\t\t\t\t\tlet yOpenField = this.yOpenField;\r\n\t\t\t\t\tlet angle:number;\r\n\t\t\t\t\tlet radius:number;\r\n\t\r\n\t\t\t\t\tlet xAxis = this.xAxis;\r\n\t\t\t\t\tlet yAxis = this.yAxis;\r\n\t\t\t\t\tlet position:number;\r\n\t\t\t\r\n\t\t\t\t\tif((xAxis instanceof DateAxis && (xOpenField && xOpenField != xField)) || xAxis instanceof ValueAxis){\r\n\t\r\n\t\t\t\t\t\tif(!$type.isNumber(bulletLocationX)){\r\n\t\t\t\t\t\t\tbulletLocationX = 0;\r\n\t\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(xField);\r\n\t\r\n\t\t\t\t\t\tif(!xOpenField){\r\n\t\t\t\t\t\t\topenValue = xAxis.min;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\topenValue = dataItem.getWorkingValue(xOpenField);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationX);\r\n\t\r\n\t\t\t\t\t\tposition = xAxis.valueToPosition(middleValue);\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if(xAxis instanceof CategoryAxis){\r\n\t\t\t\t\t\tposition = xAxis.categoryToPosition((<any>dataItem)[xField], bulletLocationX);\r\n\t\t\t\t\t}\t\r\n\t\r\n\t\t\t\t\tlet renderer:AxisRendererCircular = <AxisRendererCircular>xAxis.renderer;\r\n\t\r\n\t\t\t\t\tangle = renderer.positionToAngle(position);\r\n\t\r\n\t\t\t\t\tif(angle < this.chart.startAngle || angle > this.chart.endAngle){\r\n\t\t\t\t\t\tbullet.visible = false;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tif((yAxis instanceof DateAxis &&  (yOpenField && yOpenField != yField)) || yAxis instanceof ValueAxis){\r\n\t\r\n\t\t\t\t\t\tif(!$type.isNumber(bulletLocationY)){\r\n\t\t\t\t\t\t\tbulletLocationY = 0;\r\n\t\t\t\t\t\t}\t\t\t\t\t\r\n\t\r\n\t\t\t\t\t\tlet openValue:number;\r\n\t\t\t\t\t\tlet closeValue:number = dataItem.getWorkingValue(yField);\r\n\t\r\n\t\t\t\t\t\tif(!yOpenField){\r\n\t\t\t\t\t\t\topenValue = yAxis.min;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\topenValue = dataItem.getWorkingValue(yOpenField);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlet middleValue = openValue + (closeValue - openValue) * (1 - bulletLocationY);\r\n\t\r\n\t\t\t\t\t\tpoint = yAxis.valueToPoint(middleValue);\r\n\t\t\t\t\t}\t\t\t\t\r\n\t\t\t\t\telse if(yAxis instanceof CategoryAxis){\r\n\t\t\t\t\t\tpoint = yAxis.categoryToPoint((<any>dataItem)[yField], bulletLocationY);\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tradius = $math.getDistance(point);\r\n\t\t\t\t\t\r\n\t\t\t\t\tbullet.moveTo({x:radius * $math.cos(angle), y:radius * $math.sin(angle)});\r\n\t\r\n\t\t\t\t\tbullet.visible = true;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tbullet.visible = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}*/\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarColumnSeries\"] = RadarColumnSeries;\r\nregistry.registeredClasses[\"RadarColumnSeriesDataItem\"] = RadarColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/RadarColumnSeries.ts","/**\r\n * Module that defines everything related to building Funnel slices.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent, Percent } from \"../../core/utils/Percent\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceProperties extends IContainerProperties {\r\n\r\n\t/**\r\n\t * Width of the top edge of the slice.\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Width of the bottom edge of the slice.\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\texpandDistance?: number;\r\n\r\n\t/**\r\n\t * Orientation of the slice.\r\n\t */\r\n\torientation?: Orientation;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSlice]].\r\n */\r\nexport interface IFunnelSliceEvents extends IContainerEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSlice]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSliceAdapters extends IContainerAdapters, IFunnelSliceProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to create [[FunnelSlice]] elements.\r\n *\r\n * @see {@link IFunnelSliceEvents} for a list of available events\r\n * @see {@link IFunnelSliceAdapters} for a list of available adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSlice extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSliceProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSliceAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSliceEvents;\r\n\r\n\t/**\r\n\t * Main slice element.\r\n\t */\r\n\tpublic slice: Sprite;\r\n\r\n\t/**\r\n\t * Am anchor point the slice tick line is pointing to.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @readonly\r\n\t */\r\n\tpublic tickPoint: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.slice = this.createChild(Sprite);\r\n\t\tthis.slice.shouldClone = false;\r\n\t\tthis.slice.setElement(this.paper.add(\"path\"));\r\n\t\tthis.slice.isMeasured = false;\r\n\r\n\t\tthis.orientation = \"vertical\";\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\tthis.width = 10;\r\n\t\tthis.height = 10;\r\n\r\n\t\tthis.expandDistance = 0;\r\n\r\n\t\tthis.className = \"FunnelSlice\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t */\r\n\tprotected draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tlet ed = this.expandDistance;\r\n\r\n\t\tlet path = \"\";\r\n\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet cpr = { x: tr.x + (br.x - tr.x) / 2 + ed * h, y: tr.y + 0.5 * h };\r\n\t\t\tlet cpl = { x: tl.x + (bl.x - tl.x) / 2 - ed * h, y: tl.y + 0.5 * h };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(br);\r\n\t\t\tlet qp2 = \"\";\r\n\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(br, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tl, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tl) + $path.lineTo(tr) + qp1 + $path.lineTo(bl) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { x: tr.x + (br.x - tr.x) / 2, y: tr.y + (br.y - tr.y) / 2 };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet cpr = { y: tt.y + (bt.y - tt.y) / 2 - ed * w, x: tt.x + 0.5 * w };\r\n\t\t\tlet cpl = { y: tb.y + (bb.y - tb.y) / 2 + ed * w, x: tb.x + 0.5 * w };\r\n\r\n\t\t\tlet qp1 = $path.lineTo(bt);\r\n\t\t\tlet qp2 = \"\"\r\n\t\t\tif(ed != 0){\r\n\t\t\t\tqp1 = $path.quadraticCurveTo(bt, cpr);\r\n\t\t\t\tqp2 = $path.quadraticCurveTo(tb, cpl);\r\n\t\t\t}\r\n\r\n\t\t\tpath = $path.moveTo(tb) + $path.lineTo(tt) + qp1 + $path.lineTo(bb) + qp2;\r\n\r\n\t\t\tthis.tickPoint = { y: tb.y + (bb.y - tb.y) / 2, x: tb.x + (bb.x - tb.x) / 2 };\r\n\t\t}\r\n\r\n\t\tthis.slice.path = path;\r\n\t\tthis.invalidateLayout();\r\n\t}\r\n\r\n\r\n\tgetPoint(locationX:number, locationY:number):IPoint{\r\n\r\n\t\tlet pt = this.pixelPaddingTop;\r\n\t\tlet pb = this.pixelPaddingBottom;\r\n\t\tlet pr = this.pixelPaddingRight;\r\n\t\tlet pl = this.pixelPaddingLeft;\r\n\r\n\t\tlet w = this.pixelWidth - pr - pl;\r\n\t\tlet h = this.pixelHeight - pt - pb;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, w);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, w);\r\n\r\n\t\t\tlet tl = { x: (w - tw) / 2 + pl, y: pt };\r\n\t\t\tlet tr = { x: (w + tw) / 2 + pl, y: pt };\r\n\r\n\t\t\tlet br = { x: (w + bw) / 2 + pl, y: pt + h };\r\n\t\t\tlet bl = { x: (w - bw) / 2 + pl, y: pt + h };\r\n\r\n\t\t\tlet mlx = tl.x + (bl.x - tl.x) * locationY;\r\n\t\t\tlet mrx = tr.x + (br.x - tr.x) * locationY;\r\n\r\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: tr.y + (br.y - tr.y) * locationY };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet tw = $utils.relativeToValue(this.topWidth, h);\r\n\t\t\tlet bw = $utils.relativeToValue(this.bottomWidth, h);\r\n\r\n\t\t\tlet tt = { x: pl, y: (h - tw) / 2 + pt };\r\n\t\t\tlet tb = { x: pl, y: (h + tw) / 2 + pt };\r\n\r\n\t\t\tlet bt = { x: pl + w, y: (h - bw) / 2 + pt };\r\n\t\t\tlet bb = { x: pl + w, y: (h + bw) / 2 + pt };\r\n\r\n\t\t\tlet mty = tt.y + (bt.y - tt.y) * locationX;\r\n\t\t\tlet mby = tb.y + (bb.y - tb.y) * locationX;\r\n\r\n\t\t\treturn { y: mty + (mby - mty) * locationY, x: tt.x + (bt.x - tt.x) * locationX };\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Bottom width\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"bottomWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return bottom width\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Top width in pixels or percent.\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set dimensions if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Top width\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"topWidth\", value, true, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Top width\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slice: \"horizontal\" or \"vertical\".\r\n\t *\r\n\t * IMPORTANT: this setting might be used to set orintation if you use slice\r\n\t * as a standalone element. If it's a part of [[FunnelSeries]] this setting\r\n\t * becomes read-only as it will be automatically reset by series.\r\n\t *\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative distance slice's sides should be bent to. It's relative to the\r\n\t * height of the slice.\r\n\t *\r\n\t * Zero (default) will mean the sides will be perfectly straight.\r\n\t *\r\n\t * Positive value will make them bend outwards, resulting in \"puffed\" slices.\r\n\t *\r\n\t * Negative values will make them bend inwards.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set expandDistance(value: number) {\r\n\t\tthis.setPropertyValue(\"expandDistance\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return expandDistance\r\n\t */\r\n\tpublic get expandDistance(): number {\r\n\t\treturn this.getPropertyValue(\"expandDistance\");\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[Sprite]].\r\n\t *\r\n\t * @param source Source Sprite\r\n\t */\r\n\tpublic copyFrom(source :this) {\r\n\t\tsuper.copyFrom(source);\r\n\t\tif (this.slice) {\r\n\t\t\tthis.slice.copyFrom(source.slice);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSlice\"] = FunnelSlice;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FunnelSlice.ts","/**\r\n * Funnel tick module.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Tick, ITickProperties, ITickAdapters, ITickEvents } from \"../elements/Tick\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelSlice } from \"./FunnelSlice\";\r\nimport { MutableValueDisposer, MultiDisposer } from \"../../core/utils/Disposer\";\r\nimport { FunnelSeries } from \"../series/FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickProperties extends ITickProperties {\r\n\tlocationX?: number;\r\n\r\n\tlocationY?: number;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelTick]].\r\n */\r\nexport interface IFunnelTickEvents extends ITickEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelTick]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelTickAdapters extends ITickAdapters, IFunnelTickProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Draws an tick line for a funnel slice connecting it to a related label.\r\n *\r\n * @see {@link IFunnelTickEvents} for a list of available events\r\n * @see {@link IFunnelTickAdapters} for a list of available Adapters\r\n */\r\nexport class FunnelTick extends Tick {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelTickProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelTickAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelTickEvents;\r\n\r\n\t/**\r\n\t * A label element this tick is attached to.\r\n\t */\r\n\tprotected _label = new MutableValueDisposer<Label>();\r\n\r\n\t/**\r\n\t * A slice element this tick is attached to.\r\n\t */\r\n\tprotected _slice = new MutableValueDisposer<FunnelSlice>();\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelTick\";\r\n\t\tthis.element = this.paper.add(\"path\");\r\n\t\tthis._disposers.push(this._label);\r\n\t\tthis._disposers.push(this._slice);\r\n\r\n\t\tthis.setPropertyValue(\"locationX\", 0);\r\n\t\tthis.setPropertyValue(\"locationY\", 0);\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the tick element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\r\n\t\tlet slice: FunnelSlice = this.slice;\r\n\t\tlet point = slice.getPoint(this.locationX, this.locationY);\r\n\r\n\t\tif (point) {\r\n\t\t\tlet label = this.label;\r\n\r\n\t\t\tlet series = <FunnelSeries>slice.dataItem.component;\r\n\r\n\t\t\tif (series.orientation == \"vertical\") {\r\n\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\tx1 += label.maxRight;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tlet p1 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\r\n\t\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet x1 = label.pixelX;\r\n\t\t\t\tlet y1 = label.pixelY;\r\n\r\n\t\t\t\tif(!series.labelsOpposite){\r\n\t\t\t\t\ty1 += label.maxBottom;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet p0 = $utils.spritePointToSprite(point, slice, this.parent);\r\n\t\t\t\tlet p1 = $utils.spritePointToSprite({ x: x1, y: y1 }, label.parent, this.parent);\r\n\r\n\t\t\t\tthis.path = $path.moveTo(p0) + $path.lineTo(p1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [[FunnelSlice]] element tick is attached to.\r\n\t *\r\n\t * @param slice  Slice\r\n\t */\r\n\tpublic set slice(slice: FunnelSlice) {\r\n\t\tthis._slice.set(slice, new MultiDisposer([\r\n\t\t\tslice.events.on(\"transformed\", this.invalidate, this, false),\r\n\t\t\tslice.events.on(\"validated\", this.invalidate, this, false)\r\n\t\t]));\r\n\t}\r\n\r\n\t/**\r\n\t * @return FunnelSlice\r\n\t */\r\n\tpublic get slice(): FunnelSlice {\r\n\t\treturn this._slice.get();\r\n\t}\r\n\r\n\t/**\r\n\t * [[Label]] element tick is attached to.\r\n\t *\r\n\t * @param label  Label\r\n\t */\r\n\tpublic set label(label: Label) {\r\n\t\tthis._label.set(label, label.events.on(\"transformed\", this.invalidate, this, false));\r\n\t}\r\n\r\n\t/**\r\n\t * @return Label\r\n\t */\r\n\tpublic get label(): Label {\r\n\t\treturn this._label.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A relative horizontal position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means left edge, and 1 right edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationX(value: number) {\r\n\t\tthis.setPropertyValue(\"locationX\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationX(): number {\r\n\t\treturn this.getPropertyValue(\"locationX\");\r\n\t}\r\n\r\n\t/**\r\n\t * A relative vertical position within target element a tick is pointing\r\n\t * to.\r\n\t *\r\n\t * A scale is from 0 to 1, where 0 means top edge, and 1 bottom edge.\r\n\t *\r\n\t * You can also set any value in-between (e.g. 0.5 will point to the middle\r\n\t * of the slice), or outside 0-1 range, which will put tick anchor position\r\n\t * outside target element.\r\n\t *\r\n\t * @param value  Location (0-1)\r\n\t */\r\n\tpublic set locationY(value: number) {\r\n\t\tthis.setPropertyValue(\"locationY\", value, false, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Location (0-1)\r\n\t */\r\n\tpublic get locationY(): number {\r\n\t\treturn this.getPropertyValue(\"locationY\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelTick\"] = FunnelTick;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/FunnelTick.ts","/**\r\n * Defines Funnel Chart Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPercentSeriesAdapters, IPercentSeriesDataFields, IPercentSeriesEvents, IPercentSeriesProperties, PercentSeries, PercentSeriesDataItem } from \"./PercentSeries\";\r\nimport { FunnelSlice } from \"../elements/FunnelSlice\";\r\nimport { Label } from \"../../core/elements/Label\";\r\nimport { FunnelTick } from \"../elements/FunnelTick\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\nimport { Bullet } from \"../elements/Bullet\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { SlicedChart } from \"../types/SlicedChart\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { Disposer } from \"../../core/utils/Disposer\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { Align } from \"../../core/defs/Align\";\r\nimport { VerticalAlign } from \"../../core/defs/VerticalAlign\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[FunnelSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class FunnelSeriesDataItem extends PercentSeriesDataItem {\r\n\r\n\t/**\r\n\t * A type of slice used for this series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * A reference to a label element.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to a tick element.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: FunnelSeries;\r\n\r\n\t/**\r\n\t * Defines a type of elements linking slices.\r\n\t */\r\n\tpublic _sliceLink: FunnelSlice;\r\n\r\n\t/**\r\n\t * A [[FunnelSlice]] element, related to this data item ([[FunnelSlice]]).\r\n\t *\r\n\t * @readonly\r\n\t * @return Slice element\r\n\t */\r\n\tpublic get sliceLink(): this[\"_sliceLink\"] {\r\n\t\tif (!this._sliceLink) {\r\n\t\t\tlet sliceLink = this.component.sliceLinks.create();\r\n\t\t\tthis._sliceLink = sliceLink;\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\t\t\tsliceLink.parent = this.component.slicesContainer;\r\n\r\n\t\t\tthis._disposers.push(new Disposer(() => {\r\n\t\t\t\tif (this.component) {\r\n\t\t\t\t\tthis.component.sliceLinks.removeValue(sliceLink);\r\n\t\t\t\t}\r\n\t\t\t}));\r\n\r\n\t\t\tthis.addSprite(sliceLink);\r\n\t\t\tsliceLink.visible = this.visible;\r\n\t\t}\r\n\t\treturn this._sliceLink;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"FunnelSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesDataFields extends IPercentSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesProperties extends IPercentSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative width of the slice bottom. See description of `bottomRatio`\r\n\t * property for full description.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tbottomRatio?: number;\r\n\r\n\t/**\r\n\t * Orientation of series\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * @since 4.1.13\r\n\t */\r\n\tlabelsOpposite?: boolean;\r\n}\r\n\r\n/**\r\n * Defines events for [[FunnelSeries]].\r\n */\r\nexport interface IFunnelSeriesEvents extends IPercentSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[FunnelSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IFunnelSeriesAdapters extends IPercentSeriesAdapters, IFunnelSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IFunnelSeriesEvents} for a list of available Events\r\n * @see {@link IFunnelSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class FunnelSeries extends PercentSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _slice: FunnelSlice;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _tick: FunnelTick;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _label: Label;\r\n\r\n\t/**\r\n\t * A reference to chart this series is for.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic _chart: SlicedChart;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IFunnelSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IFunnelSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IFunnelSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IFunnelSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: FunnelSeriesDataItem;\r\n\r\n\r\n\tprotected _nextY: number = 0;\r\n\r\n\t/**\r\n\t * List of slice elements.\r\n\t */\r\n\tprotected _sliceLinks: ListTemplate<this[\"_slice\"]>;\r\n\r\n\t/**\r\n\t * Holds sum of values for all slices\r\n\t */\r\n\tprotected _total: number;\r\n\r\n\t/**\r\n\t * Holds number of slices.\r\n\t */\r\n\tprotected _count: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"FunnelSeries\";\r\n\t\tthis.orientation = \"vertical\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\r\n\t\tthis.slicesContainer.width = percent(100);\r\n\t\tthis.slicesContainer.height = percent(100);\r\n\r\n\t\tthis._disposers.push(this.slicesContainer.events.on(\"maxsizechanged\", this.invalidateDataItems, this, false));\r\n\r\n\t\tthis.labelsOpposite = true;\r\n\r\n\t\tthis.labelsContainer.layout = \"absolute\";\r\n\r\n\t\tthis.bottomRatio = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelSlice]] element.\r\n\t *\r\n\t * @return Slice\r\n\t */\r\n\tprotected createSlice(): this[\"_slice\"] {\r\n\t\treturn new FunnelSlice();\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a [[FunnelTick]] element.\r\n\t *\r\n\t * @return Tick\r\n\t */\r\n\tprotected createTick(): this[\"_tick\"] {\r\n\t\treturn new FunnelTick();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Funnel Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new FunnelSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tslice.isMeasured = false;\r\n\t\tslice.defaultState.properties.scale = 1;\r\n\t\tslice.observe(\"scale\", this.handleSliceScale, this);\r\n\t\tslice.observe([\"dx\", \"dy\", \"x\", \"y\"], this.handleSliceMove, this);\r\n\t\tslice.tooltipText = \"{category}: {value.percent.formatNumber('#.#')}% ({value.value})\";\r\n\r\n\t\tlet hoverState = slice.states.create(\"hover\");\r\n\t\thoverState.properties.expandDistance = 0.2;\r\n\t}\r\n\r\n\t/**\r\n\t * [initLabel description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param label [description]\r\n\t */\r\n\tprotected initLabel(label: this[\"_label\"]) {\r\n\t\tsuper.initLabel(label);\r\n\t\tlabel.verticalCenter = \"middle\";\r\n\t\tlabel.horizontalCenter = \"middle\";\r\n\t\tlabel.isMeasured = true;\r\n\t\tlabel.padding(5, 5, 5, 5);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextY = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\r\n\t\tlet slicesContainer = this.slicesContainer;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlabelTemplate.interactionsEnabled = true;\r\n\t\t\tslicesContainer.isMeasured = true;\r\n\t\t\tlabelsContainer.isMeasured = true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlabelTemplate.interactionsEnabled = false;\r\n\t\t\tslicesContainer.isMeasured = false;\r\n\t\t\tlabelsContainer.isMeasured = false;\r\n\t\t}\r\n\r\n\t\tlet total = 0;\r\n\t\tlet count = 0;\r\n\t\tthis.dataItems.each((dItem) => {\r\n\t\t\tif ($type.hasValue(dItem.value)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tif (dItem.value > 0) {\r\n\t\t\t\t\ttotal += dItem.getWorkingValue(\"value\") / dItem.value;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ttotal += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tthis._total = 1 / count * total;\r\n\t\tthis._count = count;\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tthis.arrangeLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem  [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\r\n\t\t\tif (!nextItem.visible || nextItem.isHiding) {\r\n\t\t\t\treturn this.getNextValue(nextItem);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [formDataElement description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected formDataElement(): void {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Validates data item's element, effectively redrawing it.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tif ($type.hasValue(dataItem.value)) {\r\n\t\t\t// FunnelSlice\r\n\t\t\tlet slice = dataItem.slice;\r\n\t\t\tslice.orientation = this.orientation;\r\n\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tsliceLink.orientation = this.orientation;\r\n\r\n\t\t\tlet tick = dataItem.tick;\r\n\t\t\tlet label = dataItem.label;\r\n\r\n\t\t\ttick.slice = slice;\r\n\t\t\ttick.label = label;\r\n\r\n\t\t\tthis.decorateSlice(dataItem);\r\n\r\n\t\t\tsliceLink.fill = slice.fill;\r\n\r\n\t\t\tif (dataItem.index == this.dataItems.length - 1) {\r\n\t\t\t\tsliceLink.disabled = true;\r\n\t\t\t}\r\n\r\n\t\t\t// do this at the end, otherwise bullets won't be positioned properly\r\n\t\t\tsuper.validateDataElement(dataItem);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]): void {\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet nextValue = this.getNextValue(dataItem);\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\t\tlet bottomRatio = this.bottomRatio;\r\n\r\n\t\tlet d = 1;\r\n\t\tif (dataItem.value > 0) {\r\n\t\t\td = workingValue / dataItem.value;\r\n\t\t}\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\r\n\t\t\tlet linkHeight = sliceLink.pixelHeight * d;\r\n\r\n\t\t\tmaxHeight = maxHeight + linkHeight; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxWidth;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\tslice.height = $math.max(0, maxHeight / this._count * d / this._total - linkHeight);\r\n\r\n\t\t\tslice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = slice.x;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = undefined;\r\n\t\t\t}\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = slice.x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet linkWidth = sliceLink.pixelWidth * d;\r\n\r\n\t\t\tmaxWidth = maxWidth + linkWidth; // to avoid one link gap in the bottom\r\n\r\n\t\t\tslice.topWidth = workingValue / this.dataItem.values.value.high * maxHeight;\r\n\t\t\tslice.bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = (workingValue - (workingValue - nextValue)) / this.dataItem.values.value.high * maxHeight;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\t\t\tslice.width = maxWidth / this._count * d * 1 / this._total - linkWidth;\r\n\t\t\tslice.y = maxHeight / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = slice.y;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\r\n\t\t\tsliceLink.y = slice.y;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [arrangeLabels description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected arrangeLabels(): void {\r\n\r\n\t\tif (this.alignLabels) {\r\n\t\t\tlet count = this.labels.length;\r\n\t\t\tif (count > 1) {\r\n\t\t\t\tlet lastLabel = this.labels.getIndex(count - 1);\r\n\r\n\t\t\t\tlet lastY = lastLabel.pixelY;\r\n\t\t\t\tlet lastX = lastLabel.pixelX;\r\n\r\n\t\t\t\tif (count > 1) {\r\n\t\t\t\t\tfor (let i = count - 2; i >= 0; i--) {\r\n\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\r\n\t\t\t\t\t\tif (label.visible) {\r\n\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\tif (label.pixelY + label.measuredHeight > lastY) {\r\n\t\t\t\t\t\t\t\t\tlabel.y = lastY - label.measuredHeight;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif (label.pixelX + label.measuredWidth > lastX) {\r\n\t\t\t\t\t\t\t\t\tlabel.x = lastX - label.measuredWidth;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlastY = label.pixelY;\r\n\t\t\t\t\t\t\tlastX = label.pixelX;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tlastY = 0;\r\n\t\t\t\t\tlastX = 0;\r\n\t\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\t\tlet label = this.labels.getIndex(i);\r\n\t\t\t\t\t\tif (label.visible) {\r\n\t\t\t\t\t\t\tif (label.invalid) {\r\n\t\t\t\t\t\t\t\tlabel.validate();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\t\t\t\tif (label.pixelY < lastY) {\r\n\t\t\t\t\t\t\t\t\tlabel.y = lastY;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// horizontal\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tif (label.pixelX < lastX) {\r\n\t\t\t\t\t\t\t\t\tlabel.x = lastX;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tlastY += label.measuredHeight;\r\n\t\t\t\t\t\t\tlastX += label.measuredWidth;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Positions series bullet.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param bullet  Bullet\r\n\t */\r\n\tpublic positionBullet(bullet: Bullet): void {\r\n\t\tsuper.positionBullet(bullet);\r\n\r\n\t\tlet dataItem: this[\"_dataItem\"] = <this[\"_dataItem\"]>bullet.dataItem;\r\n\t\tlet slice: FunnelSlice = dataItem.slice;\r\n\r\n\t\tlet locationX = bullet.locationX;\r\n\t\tif (!$type.isNumber(locationX)) {\r\n\t\t\tlocationX = 0.5;\r\n\t\t}\r\n\t\tlet locationY = bullet.locationY;\r\n\t\tif (!$type.isNumber(locationY)) {\r\n\t\t\tlocationY = 1;\r\n\t\t}\r\n\r\n\t\tbullet.x = slice.pixelX + slice.measuredWidth * locationX;\r\n\t\tbullet.y = slice.pixelY + slice.measuredHeight * locationY;\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the funnel slices: \"horizontal\" or \"vertical\" (default).\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tif (this.setPropertyValue(\"orientation\", value)) {\r\n\t\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t\t\tthis.invalidate();\r\n\t\t\tif (value == \"vertical\") {\r\n\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\tthis.ticks.template.locationY = 0.5;\r\n\t\t\t\tthis.labels.template.rotation = 0;\r\n\t\t\t\tthis.layout = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.ticks.template.locationX = 0.5;\r\n\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\tthis.labels.template.rotation = -90;\r\n\t\t\t\tthis.layout = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's bottom will change in relation to slices top AND\r\n\t * next slices top.\r\n\t *\r\n\t * Basically it's a relative value (0-1) that indicates bottom width\r\n\t * position between current slice's top width and the top withd of the next\r\n\t * one.\r\n\t *\r\n\t * The scale goes from 0 (closer to current slice width) to 1 (closer to next\r\n\t * slice with).\r\n\t *\r\n\t * `0` (default) will mean that bottom will be the same as top, resulting in\r\n\t * a prefectly square slice.\r\n\t *\r\n\t * From the data-viz standpoint `0` is a correct setting, since area of the\r\n\t * slices will depict their value correctly.\r\n\t *\r\n\t * `1` will mean that slice will become trapezoid with its bottom matching\r\n\t * width of the next slice.\r\n\t *\r\n\t * `0.5` will make bottom width be in the middle of width of current slice\r\n\t * and the next slice.\r\n\t *\r\n\t * @default 0\r\n\t * @param {number}\r\n\t */\r\n\tpublic set bottomRatio(value: number) {\r\n\t\tif (this.setPropertyValue(\"bottomRatio\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number}\r\n\t */\r\n\tpublic get bottomRatio(): number {\r\n\t\treturn this.getPropertyValue(\"bottomRatio\");\r\n\t}\r\n\r\n\t/**\r\n\t * A list of elements linking each actual slice.\r\n\t *\r\n\t * Please note that links are [[FunnelSlice]] objects, just like real links,\r\n\t * so they have all the same configuration options.\r\n\t *\r\n\t * You can use `template` of this link, to specify how links will look.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.sliceLinks.template.fillOpacity = 0.5;\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"FunnelSeries\",\r\n\t *      // ...\r\n\t *      \"sliceLinks\": {\r\n\t *        \"fillOpacity\": 0.5\r\n\t *      }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Funnel links\r\n\t */\r\n\tpublic get sliceLinks(): ListTemplate<this[\"_slice\"]> {\r\n\t\tif (!this._sliceLinks) {\r\n\t\t\tlet sliceLink = new FunnelSlice();\r\n\t\t\tsliceLink.applyOnClones = true;\r\n\t\t\tsliceLink.fillOpacity = 0.5;\r\n\t\t\tsliceLink.expandDistance = - 0.3;\r\n\t\t\tsliceLink.hiddenState.properties.opacity = 0;\r\n\r\n\t\t\tthis._disposers.push(sliceLink);\r\n\r\n\t\t\tthis._sliceLinks = new ListTemplate(sliceLink);\r\n\t\t\tthis._disposers.push(new ListDisposer(this._sliceLinks));\r\n\t\t}\r\n\t\treturn this._sliceLinks;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows hidden series.\r\n\t *\r\n\t * @param duration  Duration of reveal animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic show(duration?: number): Animation {\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet interpolationDuration = this.defaultState.transitionDuration;\r\n\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\tlet delay: number = 0;\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.show(interpolationDuration, delay, [\"value\"]);\r\n\t\t});\r\n\r\n\t\tlet animation = super.show(duration);\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides series.\r\n\t *\r\n\t * @param duration  Duration of hiding animation (ms)\r\n\t * @return Animation\r\n\t */\r\n\tpublic hide(duration?: number): Animation {\r\n\t\tlet fields: string[] = [\"value\"];\r\n\t\tlet value: number = 0;\r\n\r\n\t\tlet startIndex: number = this.startIndex;\r\n\t\tlet endIndex: number = this.endIndex;\r\n\r\n\t\tlet delay: number = 0;\r\n\t\tlet interpolationDuration = this.hiddenState.transitionDuration;\r\n\t\tif ($type.isNumber(duration)) {\r\n\t\t\tinterpolationDuration = duration;\r\n\t\t}\r\n\r\n\t\t$iter.each($iter.indexed(this.dataItems.iterator()), (a) => {\r\n\t\t\tlet i = a[0];\r\n\t\t\tlet dataItem = a[1];\r\n\r\n\t\t\tif (this.sequencedInterpolation) {\r\n\t\t\t\tdelay = this.sequencedInterpolationDelay * i + interpolationDuration * (i - startIndex) / (endIndex - startIndex);\r\n\t\t\t}\r\n\t\t\tdataItem.hide(interpolationDuration, delay, value, fields);\r\n\t\t});\r\n\r\n\t\tlet animation: Animation = super.hide(duration);\r\n\t\tif (animation && !animation.isFinished()) {\r\n\t\t\tanimation.delay(delay);\r\n\t\t}\r\n\r\n\t\treturn animation;\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tprotected setAlignLabels(value: boolean) {\r\n\t\tsuper.setAlignLabels(value);\r\n\t\tthis.ticks.template.disabled = !value;\r\n\t\tlet labelsContainer = this.labelsContainer;\r\n\t\tif (labelsContainer) {\r\n\t\t\t// do not align\r\n\t\t\tif (!value) {\r\n\t\t\t\tlabelsContainer.width = percent(100);\r\n\t\t\t\tlabelsContainer.height = percent(100);\r\n\t\t\t}\r\n\t\t\t//align\r\n\t\t\telse {\r\n\t\t\t\tlabelsContainer.height = undefined;\r\n\t\t\t\tlabelsContainer.width = undefined;\r\n\t\t\t\tlabelsContainer.margin(10, 10, 10, 10);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.labelsOpposite = this.labelsOpposite;\r\n\t}\r\n\r\n\t/**\r\n\t * Put labels on the oppsite side of the series?\r\n\t *\r\n\t * This setting is only used if `alignLabels = true`.\r\n\t *\r\n\t * If set to `true` (default) labels will be drawn to the right (on vertical\r\n\t * series), or to the bottom (on horizontal series).\r\n\t *\r\n\t * If set to `false`, labels will be positioned to the left or top\r\n\t * respectively.\r\n\t *\r\n\t * @default true\r\n\t * @since 4.1.13\r\n\t * @param  value  Labels on opposite side?\r\n\t */\r\n\tpublic set labelsOpposite(value: boolean) {\r\n\t\tthis.setPropertyValue(\"labelsOpposite\", value)\r\n\t\tlet labelTemplate = this.labels.template;\r\n\r\n\t\tlet labelAlign: Align = \"none\";\r\n\t\tlet labelValign: VerticalAlign = \"none\";\r\n\r\n\t\tif (!this.alignLabels) {\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tlabelAlign = \"center\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabelValign = \"middle\";\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// opposite (left/bottom)\r\n\t\t\tif (value) {\r\n\t\t\t\tthis.labelsContainer.toFront();\r\n\t\t\t\t// left\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"left\";\r\n\t\t\t\t\tlabelAlign = \"right\";\r\n\t\t\t\t}\r\n\t\t\t\t// bottom\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.ticks.template.locationY = 1;\r\n\t\t\t\t\tlabelTemplate.horizontalCenter = \"right\";\r\n\t\t\t\t\tlabelValign = \"bottom\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// non oposite (right/top)\r\n\t\t\telse {\r\n\t\t\t\tthis.labelsContainer.toBack();\r\n\t\t\t\t// right\r\n\t\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\t\tthis.ticks.template.locationX = 0;\r\n\t\t\t\t\tlabelAlign = \"left\";\r\n\t\t\t\t}\r\n\t\t\t\t// top\r\n\t\t\t\telse {\r\n\t\t\t\t\tlabelValign = \"top\";\r\n\t\t\t\t\tthis.ticks.template.locationY = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlabelTemplate.align = labelAlign;\r\n\t\tlabelTemplate.valign = labelValign;\r\n\r\n\t\tthis.validateLayout();\r\n\t\tthis.ticks.each((tick) => {\r\n\t\t\ttick.invalidate();\r\n\t\t})\r\n\t\tthis.invalidateDataItems();\r\n\t}\r\n\r\n\t/**\r\n\t * @return Labels on opposite side?\r\n\t */\r\n\tpublic get labelsOpposite(): boolean {\r\n\t\treturn this.getPropertyValue(\"labelsOpposite\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"FunnelSeries\"] = FunnelSeries;\r\nregistry.registeredClasses[\"FunnelSeriesDataItem\"] = FunnelSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/FunnelSeries.ts","/**\r\n * Defines Pyramid Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IFunnelSeriesAdapters, IFunnelSeriesDataFields, IFunnelSeriesEvents, IFunnelSeriesProperties, FunnelSeries, FunnelSeriesDataItem } from \"./FunnelSeries\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PyramidSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PyramidSeriesDataItem extends FunnelSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PyramidSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PyramidSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesDataFields extends IFunnelSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesProperties extends IFunnelSeriesProperties {\r\n\r\n\t/**\r\n\t * Bottom width in pixels or percent\r\n\t */\r\n\tbottomWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Top width in pixels or percent\r\n\t */\r\n\ttopWidth?: number | Percent;\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t */\r\n\tpyramidHeight?: number | Percent;\r\n\r\n\t/**\r\n\t * Indicates whether slice value should sould influence its height or area\r\n\t * size.\r\n\t *\r\n\t * @default \"area\"\r\n\t */\r\n\tvalueIs?: \"height\" | \"area\";\r\n}\r\n\r\n/**\r\n * Defines events for [[PyramidSeries]].\r\n */\r\nexport interface IPyramidSeriesEvents extends IFunnelSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PyramidSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPyramidSeriesAdapters extends IFunnelSeriesAdapters, IPyramidSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a FunnelSlice series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPyramidSeriesEvents} for a list of available Events\r\n * @see {@link IPyramidSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PyramidSeries extends FunnelSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPyramidSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPyramidSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPyramidSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPyramidSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PyramidSeriesDataItem;\r\n\r\n\t/**\r\n\t * [_nextWidth description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _nextWidth: number;\r\n\r\n\tprotected _pyramidHeight: number;\r\n\r\n\tprotected _pyramidWidth: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PyramidSeries\";\r\n\t\tthis.topWidth = percent(0);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.pyramidHeight = percent(100);\r\n\t\tthis.valueIs = \"area\";\r\n\r\n\t\tthis.sliceLinks.template.width = 0;\r\n\t\tthis.sliceLinks.template.height = 0;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PyramidSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)validates the whole series, effectively causing it to redraw.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validate(): void {\r\n\t\tsuper.validate();\r\n\t\tthis._nextWidth = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * [getNextValue description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t * @return [description]\r\n\t */\r\n\tprotected getNextValue(dataItem: FunnelSeriesDataItem): number {\r\n\t\tlet index = dataItem.index;\r\n\t\tlet nextValue: number = dataItem.getWorkingValue(\"value\");\r\n\t\tif (index < this.dataItems.length - 1) {\r\n\t\t\tlet nextItem = this.dataItems.getIndex(index + 1);\r\n\t\t\tnextValue = nextItem.getWorkingValue(\"value\");\r\n\t\t}\r\n\t\tif (nextValue == 0) {\r\n\t\t\tnextValue = 0.000001;\r\n\t\t}\r\n\t\treturn nextValue;\r\n\t}\r\n\r\n\t/**\r\n\t * [validateDataElements description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements() {\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tthis.dataItems.each((dataItem) => {\r\n\t\t\tlet relValue = dataItem.getWorkingValue(\"value\") / dataItem.value;\r\n\t\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\t\tif (this.orientation == \"vertical\") {\r\n\t\t\t\tmaxHeight -= (sliceLink.pixelHeight * relValue);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tmaxWidth -= (sliceLink.pixelWidth * relValue);\r\n\t\t\t}\r\n\r\n\t\t})\r\n\r\n\t\tthis._pyramidHeight = $utils.relativeToValue(this.pyramidHeight, maxHeight);\r\n\t\tthis._pyramidWidth = $utils.relativeToValue(this.pyramidHeight, maxWidth);\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - this._pyramidHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - this._pyramidWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t}\r\n\r\n\t\tsuper.validateDataElements();\r\n\t}\r\n\r\n\t/**\r\n\t * [decorateSlice description]\r\n\t *\r\n\t * @todo Description\r\n\t * @param dataItem [description]\r\n\t */\r\n\tprotected decorateSlice(dataItem: this[\"_dataItem\"]) {\r\n\r\n\t\tlet sum = this.dataItem.values.value.sum;\r\n\r\n\t\tif (sum == 0) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet slice = dataItem.slice;\r\n\t\tlet sliceLink = dataItem.sliceLink;\r\n\t\tlet label = dataItem.label;\r\n\t\tlet tick = dataItem.tick;\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\tthis.getNextValue(dataItem);\r\n\r\n\t\tlet workingValue = dataItem.getWorkingValue(\"value\");\r\n\r\n\t\tif (workingValue == 0) {\r\n\t\t\tworkingValue = 0.000001;\r\n\t\t}\r\n\r\n\t\tlet pyramidWidth = this._pyramidWidth;\r\n\t\tlet pyramidHeight = this._pyramidHeight;\r\n\r\n\t\tlet maxWidth = this.slicesContainer.innerWidth;\r\n\t\tlet maxHeight = this.slicesContainer.innerHeight;\r\n\r\n\t\tlet linkWidth = sliceLink.pixelWidth;\r\n\t\tlet linkHeight = sliceLink.pixelHeight;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxWidth);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxWidth);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceHeight: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n\t\t\t\tlet square = totalSquare * workingValue / sum;\r\n\r\n\t\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n\r\n\t\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlet sum = this.dataItem.values.value.sum;\r\n\t\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tslice.height = sliceHeight;\r\n\t\t\tslice.width = maxWidth;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.y = this._nextY;\r\n\t\t\t//slice.x = maxWidth / 2;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.x = maxWidth / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.x = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.y = slice.pixelY + slice.pixelHeight * tick.locationY + slice.dy;\r\n\r\n\t\t\tthis._nextY += slice.pixelHeight + linkHeight * workingValue / dataItem.value;\r\n\t\t\tsliceLink.y = this._nextY - linkHeight;\r\n\t\t\tsliceLink.x = maxWidth / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet topWidth = $utils.relativeToValue(this.topWidth, maxHeight);\r\n\r\n\t\t\tif (!$type.isNumber(this._nextWidth)) {\r\n\t\t\t\tthis._nextWidth = topWidth;\r\n\t\t\t}\r\n\r\n\t\t\tlet bottomWidth = $utils.relativeToValue(this.bottomWidth, maxHeight);\r\n\t\t\tlet sliceTopWidth = this._nextWidth;\r\n\r\n\t\t\tlet angle = Math.atan2(pyramidWidth, topWidth - bottomWidth);\r\n\t\t\tlet c = Math.tan(Math.PI / 2 - angle);\r\n\t\t\tif (c == 0) {\r\n\t\t\t\tc = 0.00000001;\r\n\t\t\t}\r\n\r\n\t\t\tlet sliceWidth: number;\r\n\t\t\tlet sliceBottomWidth: number;\r\n\r\n\t\t\tif (this.valueIs == \"area\") {\r\n\t\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidWidth;\r\n\t\t\t\tlet square = totalSquare * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceWidth = (sliceTopWidth - Math.sqrt(sliceTopWidth * sliceTopWidth - 2 * square * c)) / c;\r\n\t\t\t\tsliceBottomWidth = (2 * square - sliceWidth * sliceTopWidth) / sliceWidth;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tsliceWidth = pyramidWidth * workingValue / this.dataItem.values.value.sum;\r\n\t\t\t\tsliceBottomWidth = sliceTopWidth - sliceWidth * c;\r\n\t\t\t}\r\n\r\n\t\t\tslice.width = sliceWidth;\r\n\t\t\tslice.height = maxHeight;\r\n\t\t\tslice.bottomWidth = sliceBottomWidth;\r\n\t\t\tslice.topWidth = sliceTopWidth;\r\n\r\n\t\t\tsliceLink.topWidth = slice.bottomWidth;\r\n\t\t\tsliceLink.bottomWidth = slice.bottomWidth;\r\n\r\n\t\t\tslice.x = this._nextY;\r\n\r\n\t\t\tif (!this.alignLabels) {\r\n\t\t\t\tlabel.y = maxHeight / 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlabel.y = this.labelsContainer.measuredHeight;\r\n\t\t\t}\r\n\r\n\t\t\tlabel.x = slice.pixelX + slice.pixelWidth * tick.locationX + slice.dx;\r\n\r\n\t\t\tthis._nextY += slice.pixelWidth + linkWidth * workingValue / dataItem.value;\r\n\t\t\tsliceLink.x = this._nextY - linkWidth;\r\n\t\t\tsliceLink.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tthis._nextWidth = slice.bottomWidth;\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's tip in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` (default) means the pyramid will be perfectly pointy.\r\n\t * `50%` will have a cut off / blunt top that is half the width of the chart.\r\n\t * `100%` will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @default 0%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set topWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"topWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get topWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"topWidth\");\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Height of pyramid\r\n\t *\r\n\t *\r\n\t * @default 100%\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set pyramidHeight(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"pyramidHeight\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get pyramidHeight(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"pyramidHeight\");\r\n\t}\r\n\r\n\t/**\r\n\t * Width of the pyramid's bottom (bsae) in pixels or relative (`Percent`).\r\n\t *\r\n\t * `0%` means the pyramid's botto will be pointy.\r\n\t * `50%` will have a cut off / blunt bottom that is half the width of the chart.\r\n\t * `100%` (default) will take the whole width of the chart.\r\n\t *\r\n\t * If you need the downward-pointing pyramid, you might want to `topWidth` to\r\n\t * `100%` and `bottomWidth` to `0%`.\r\n\t *\r\n\t * @param {number | Percent}\r\n\t */\r\n\tpublic set bottomWidth(value: number | Percent) {\r\n\t\tif (this.setPercentProperty(\"bottomWidth\", value, false, false, 10, false)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {number | Percent}\r\n\t */\r\n\tpublic get bottomWidth(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"bottomWidth\");\r\n\t}\r\n\r\n\t/**\r\n\t * Indicates how slice's value will influence its size.\r\n\t *\r\n\t * `\"area\"` (default) means that the whole area of the pyramid (counting in\r\n\t * modifications by `topWidth` and `bottomWidth`) will be divvied up between\r\n\t * slices based on their value.\r\n\t *\r\n\t * With this setting at `\"area\"` the area of the trapezoids of each slice\r\n\t * will represent their value relatively to values of the other slices.\r\n\t *\r\n\t * This is a correct way to depict \"weight\" of each slice based on their\r\n\t * values.\r\n\t *\r\n\t * `\"height\"` means whole height (as opposed to area) of the pyramid will be\r\n\t * divvied up between slices. Actual slice width or area is not counted in.\r\n\t *\r\n\t * From the data-viz standpoint this does not make a lot of sense, since\r\n\t * slices with lesser values might appear more prominent if they are placed\r\n\t * towards thick end of the pyramid since their areas will be bigger.\r\n\t *\r\n\t * @default \"area\"\r\n\t * @param {\"area\" | \"height\"}\r\n\t */\r\n\tpublic set valueIs(value: \"area\" | \"height\") {\r\n\t\tif (this.setPropertyValue(\"valueIs\", value)) {\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {\"area\" | \"height\"}\r\n\t */\r\n\tpublic get valueIs(): \"area\" | \"height\" {\r\n\t\treturn this.getPropertyValue(\"valueIs\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PyramidSeries\"] = PyramidSeries;\r\nregistry.registeredClasses[\"PyramidSeriesDataItem\"] = PyramidSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PyramidSeries.ts","/**\r\n * Defines Pictorial Stacked Series.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { IPyramidSeriesAdapters, IPyramidSeriesDataFields, IPyramidSeriesEvents, IPyramidSeriesProperties, PyramidSeries, PyramidSeriesDataItem } from \"./PyramidSeries\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n//@todo: sequenced?\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class PictorialStackedSeriesDataItem extends PyramidSeriesDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: PictorialStackedSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"PictorialStackedSeriesDataItem\";\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesDataFields extends IPyramidSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesProperties extends IPyramidSeriesProperties {\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * @default 0\r\n\t */\r\n\tstartLocation?: number;\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\tendLocation?: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[PictorialStackedSeries]].\r\n */\r\nexport interface IPictorialStackedSeriesEvents extends IPyramidSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[PictorialStackedSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IPictorialStackedSeriesAdapters extends IPyramidSeriesAdapters, IPictorialStackedSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a PictorialStacked series on a [[SlicedChart]].\r\n *\r\n * @see {@link IPictorialStackedSeriesEvents} for a list of available Events\r\n * @see {@link IPictorialStackedSeriesAdapters} for a list of available Adapters\r\n * @see {@link https://www.amcharts.com/docs/v4/chart-types/sliced-chart/} for documentation\r\n * @important\r\n */\r\nexport class PictorialStackedSeries extends PyramidSeries {\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IPictorialStackedSeriesDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IPictorialStackedSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IPictorialStackedSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IPictorialStackedSeriesEvents;\r\n\r\n\t/**\r\n\t * Defines the type of data item.\r\n\t */\r\n\tpublic _dataItem: PictorialStackedSeriesDataItem;\r\n\r\n\t/**\r\n\t * Holds a Sprite that acts as an intelligent mask for the serries.\r\n\t */\r\n\tprotected _maskSprite: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"PictorialStackedSeries\";\r\n\t\tthis.topWidth = percent(100);\r\n\t\tthis.bottomWidth = percent(100);\r\n\t\tthis.valueIs = \"height\";\r\n\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.startLocation = 0;\r\n\t\tthis.endLocation = 1;\r\n\r\n\t\tthis._maskSprite = this.slicesContainer.createChild(Sprite);\r\n\t\tthis._maskSprite.visible = false;\r\n\t\tthis._maskSprite.zIndex = 100;\r\n\t\tthis._maskSprite.shouldClone = false;\r\n\t}\r\n\r\n\t/**\r\n\t * Sizes the mask to fit the series.\r\n\t *\r\n\t * @ignore\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\r\n\t\tlet maxWidth = this.slicesContainer.maxWidth;\r\n\t\tlet maxHeight = this.slicesContainer.maxHeight;\r\n\r\n\t\tlet maskSprite = this._maskSprite;\r\n\t\t//maskSprite.validatePosition(); // for some reason size of the maskSprite is 0x0 after we removed validatePosition in afterdraw\r\n\r\n\t\tlet pictureWidth = maskSprite.measuredWidth / maskSprite.scale;\r\n\t\tlet pictureHeight = maskSprite.measuredHeight / maskSprite.scale;\r\n\r\n\t\tlet scale = $math.min(maxHeight / pictureHeight, maxWidth / pictureWidth);\r\n\r\n\t\tif (scale == Infinity) {\r\n\t\t\tscale = 1; // can't return here, won't draw legend properly\r\n\t\t}\r\n\r\n\t\tscale = $math.max(0.001, scale);\r\n\r\n\t\tlet startLocation = this.startLocation;\r\n\t\tlet endLocation = this.endLocation;\r\n\r\n\t\tlet newWidth = $math.min(maxWidth, pictureWidth * scale);\r\n\t\tlet newHeight = $math.min(maxHeight, pictureHeight * scale);\r\n\r\n\t\tmaskSprite.scale = scale;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tthis.topWidth = newWidth + 4;\r\n\t\t\tthis.bottomWidth = newWidth + 4;\r\n\t\t\tthis.pyramidHeight = newHeight * (endLocation - startLocation);\r\n\t\t\tmaskSprite.x = maxWidth / 2;\r\n\t\t\tmaskSprite.y = newHeight / 2;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.topWidth = newHeight + 4;\r\n\t\t\tthis.bottomWidth = newHeight + 4;\r\n\t\t\tthis.pyramidHeight = newWidth * (endLocation - startLocation);\r\n\t\t\tmaskSprite.valign = \"middle\";\r\n\t\t\tmaskSprite.x = newWidth / 2;\r\n\t\t\tmaskSprite.y = maxHeight / 2;\r\n\t\t}\r\n\r\n\t\tmaskSprite.verticalCenter = \"middle\";\r\n\t\tmaskSprite.horizontalCenter = \"middle\";\r\n\r\n\t\tsuper.validateDataElements();\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\tlet y = (maxHeight - newHeight) / 2;\r\n\t\t\tthis.slicesContainer.y = y;\r\n\t\t\tthis.labelsContainer.y = y;\r\n\t\t\tthis.ticksContainer.y = y;\r\n\t\t\tthis.slices.template.dy = startLocation * newHeight;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tlet x = (maxWidth - newWidth) / 2;\r\n\t\t\tthis.slicesContainer.x = x;\r\n\t\t\tthis.labelsContainer.x = x;\r\n\t\t\tthis.ticksContainer.x = x;\r\n\t\t\tthis.slices.template.dx = startLocation * newWidth;\r\n\t\t}\r\n\r\n\t\tif(newWidth > 0 && newHeight > 0){\r\n\t\t\tthis.slicesContainer.mask = this._maskSprite;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets defaults that instantiate some objects that rely on parent, so they\r\n\t * cannot be set in constructor.\r\n\t */\r\n\tprotected applyInternalDefaults(): void {\r\n\t\tsuper.applyInternalDefaults();\r\n\t\tif (!$type.hasValue(this.readerTitle)) {\r\n\t\t\tthis.readerTitle = this.language.translate(\"Pyramid Series\");\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new/empty DataItem of the type appropriate for this object.\r\n\t *\r\n\t * @see {@link DataItem}\r\n\t * @return Data Item\r\n\t */\r\n\tprotected createDataItem(): this[\"_dataItem\"] {\r\n\t\treturn new PictorialStackedSeriesDataItem();\r\n\t}\r\n\r\n\t/**\r\n\t * A [[Sprite]] element that is used as a series mask.\r\n\t *\r\n\t * If set, this element's shape will be used to apply shape to the whole\r\n\t * stacked pictorial series.\r\n\t *\r\n\t * You can use this element's `path` property to set an SVG path for the\r\n\t * shape:\r\n\t *\r\n\t * ```TypeScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * series.maskSprite.path = iconPath;\r\n\t * ```\r\n\t * ```JSON\r\n\t * let iconPath = \"M511.82,329.991c-0.256-1.212-1.064-2.244-2.192-2.784l-24.396-11.684c17.688-29.776,11.804-68.912-15.58-91.88 c-53.756-45.084-131.696-70.936-213.828-70.936c-82.128,0-160.068,25.856-213.82,70.936c-27.416,22.992-33.28,62.18-15.524,91.972 L2.276,327.203c-1.128,0.54-1.936,1.572-2.192,2.792c-0.256,1.22,0.08,2.496,0.896,3.436l21.204,24.388 c0.764,0.88,1.868,1.376,3.02,1.376c0.084,0,0.172,0,0.26-0.008c1.244-0.084,2.384-0.74,3.072-1.776l14.852-22.376 c12.648,10.112,28.392,15.776,44.916,15.776c16.872,0,33.284-5.98,46.232-16.836c27.828-23.34,73.172-37.272,121.288-37.272 c48.12,0,93.464,13.932,121.296,37.272c12.944,10.856,29.36,16.836,46.228,16.836c16.596,0,32.4-5.724,45.08-15.916l14.94,22.512 c0.692,1.04,1.824,1.696,3.076,1.776c0.084,0.008,0.172,0.008,0.256,0.008c1.156,0,2.256-0.496,3.02-1.376l21.2-24.388C511.74,332.487,512.068,331.211,511.82,329.991z\";\r\n\t * // ...\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     \"type\": \"PictorialStackedSeries\",\r\n\t *     // ...\r\n\t *     \"maskSprite\": {\r\n\t *       \"path\": iconPath\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @return Mask sprite\r\n\t */\r\n\tpublic get maskSprite(): Sprite {\r\n\t\treturn this._maskSprite;\r\n\t}\r\n\r\n\t/**\r\n\t * Inits FunnelSlice.\r\n\t *\r\n\t * @param slice to init\r\n\t */\r\n\tprotected initSlice(slice: this[\"_slice\"]) {\r\n\t\tsuper.initSlice(slice);\r\n\r\n\t\tlet hs = slice.states.getKey(\"hover\");\r\n\t\tif (hs) {\r\n\t\t\ths.properties.expandDistance = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to start series from.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will start relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to start at 30% from the top/left of the\r\n\t * series, we can set `startLocation = 0.3`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 0\r\n\t * @since 4.1.13\r\n\t * @param  value  Start location\r\n\t */\r\n\tpublic set startLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"startLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return  Start location\r\n\t */\r\n\tpublic get startLocation(): number {\r\n\t\treturn this.getPropertyValue(\"startLocation\");\r\n\t}\r\n\r\n\t/**\r\n\t * Relative location to end series at.\r\n\t *\r\n\t * Range of values: 0 to 1.\r\n\t *\r\n\t * This setting indicates where actual slices will end relatively to the\r\n\t * whole height/width of the series.\r\n\t *\r\n\t * For example, if we want slices to end at 70% from the top/left of the\r\n\t * series, we can set `endLocation = 0.7`.\r\n\t *\r\n\t * To fill shape outside of the location range, use background of the\r\n\t * property `slicesContainer`.\r\n\t *\r\n\t * ```TypeScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JavaScript\r\n\t * series.startLocation = 0.2;\r\n\t * series.endLocation = 0.8;\r\n\t * series.slicesContainer.background.fill = am4core.color(\"#eee\");\r\n\t * ```\r\n\t * ```JSON\r\n\t * {\r\n\t *   // ...\r\n\t *   \"series\": [{\r\n\t *     // ...\r\n\t *     \"startLocation\": 0.2,\r\n\t *     \"endLocation\": 0.8,\r\n\t *     \"slicesContainer\": {\r\n\t *       \"background\": {\r\n\t *         \"fill\": \"#eee\"\r\n\t *       }\r\n\t *     }\r\n\t *   }]\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @default 1\r\n\t * @since 4.1.13\r\n\t * @param  value  End location\r\n\t */\r\n\tpublic set endLocation(value: number) {\r\n\t\tif (this.setPropertyValue(\"endLocation\", value)) {\r\n\t\t\tthis.invalidateDataItems();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return End location\r\n\t */\r\n\tpublic get endLocation(): number {\r\n\t\treturn this.getPropertyValue(\"endLocation\");\r\n\t}\r\n}\r\n\r\n/**\r\n * bboxter class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"PictorialStackedSeries\"] = PictorialStackedSeries;\r\nregistry.registeredClasses[\"PictorialStackedSeriesDataItem\"] = PictorialStackedSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/PictorialStackedSeries.ts","/**\r\n * Module that defines everything related to building Cone Columns.\r\n * It is a container which has coneColumn element which is a Cone.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Cone } from \"../../core/elements/3d/Cone\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnProperties extends IColumnProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeColumn]].\r\n */\r\nexport interface IConeColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeColumnAdapters extends IColumnAdapters, IConeColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates ConeColumns.\r\n *\r\n * @see {@link IConeColumnEvents} for a list of available events\r\n * @see {@link IConeColumnAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ConeColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeColumnEvents;\r\n\r\n\r\n\t/**\r\n\t * Cone column element\r\n\t */\r\n\tpublic coneColumn: Cone;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * @ignore\r\n\t */\r\n\tcreateAssets() {\r\n\t\tthis.coneColumn = this.createChild(Cone);\r\n\t\tthis.coneColumn.shouldClone = false;\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.coneColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[ConeColumn]].\r\n\t *\r\n\t * @param source Source ConeColumn\r\n\t */\r\n\tcopyFrom(source: this) {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.coneColumn) {\r\n\t\t\tthis.coneColumn.copyFrom(source.coneColumn);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeColumn\"] = ConeColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ConeColumn.ts","/**\r\n * ConeSeries module\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { ConeColumn } from \"../elements/ConeColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[ConeSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class ConeSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: ConeSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"ConeSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[ConeSeries]].\r\n */\r\nexport interface IConeSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[ConeSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IConeSeriesAdapters extends IColumnSeriesAdapters, IConeSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a cone graph.\r\n *\r\n * @see {@link IConeSeriesEvents} for a list of available Events\r\n * @see {@link IConeSeriesAdapters} for a list of available Adapters\r\n * @todo Example\r\n * @important\r\n */\r\nexport class ConeSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Type of column.\r\n\t */\r\n\tpublic _column: ConeColumn;\r\n\r\n\t/**\r\n\t */\r\n\tpublic _dataItem: ConeSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: IConeSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IConeSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IConeSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IConeSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ConeSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for Candlestick\r\n\t * @ignore\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new ConeColumn();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an SVG path to use as series mask.\r\n\t *\r\n\t * @return SVG path\r\n\t */\r\n\tprotected getMaskPath(): string {\r\n\t\tlet dx = 0;\r\n\t\tlet dy = 0;\r\n\t\tlet column = this.columns.getIndex(0);\r\n\t\tif(column){\r\n\t\t\tif (this.baseAxis == this.xAxis) {\r\n\t\t\t\tdy = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdx = column.coneColumn.bottom.radiusY + 1;\r\n\t\t\t}\r\n\r\n\t\t\treturn $path.rectToPath({\r\n\t\t\t\tx: -dx,\r\n\t\t\t\ty: 0,\r\n\t\t\t\twidth: this.xAxis.axisLength + dx,\r\n\t\t\t\theight: this.yAxis.axisLength + dy\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\t\tlet column = dataItem.column;\r\n\t\tif(column){\r\n\t\t\tlet coneColumn = dataItem.column.coneColumn;\r\n\r\n\t\t\tconeColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tconeColumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconeColumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ConeSeries\"] = ConeSeries;\r\nregistry.registeredClasses[\"ConeSeriesDataItem\"] = ConeSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/ConeSeries.ts","/**\r\n * Module that defines everything related to building Curved Columns.\r\n * It is a container which has CurvedColumn element which is a Sprite.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Column, IColumnProperties, IColumnAdapters, IColumnEvents } from \"./Column\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $smoothing from \"../../core/rendering/Smoothing\";\r\nimport { Orientation } from \"../../core/defs/Orientation\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnProperties extends IColumnProperties {\r\n\r\n\t/**\r\n\t * Horizontal tension setting of the line (0-1).\r\n\t *\r\n\t * Used for smoothed lines.\r\n\t *\r\n\t * @default 1\r\n\t */\r\n\ttensionX?: number;\r\n\r\n\t/**\r\n\t * Tension\r\n\t */\r\n\ttension?: number;\r\n\r\n\t/**\r\n\t * Orientation of the column\r\n\t *\r\n\t * @default \"vertical\"\r\n\t */\r\n\torientation?: Orientation;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[CurvedColumn]].\r\n */\r\nexport interface ICurvedColumnEvents extends IColumnEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumn]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnAdapters extends IColumnAdapters, ICurvedColumnProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Class used to creates CurvedColumns.\r\n *\r\n * @see {@link ICurvedColumnEvents} for a list of available events\r\n * @see {@link ICurvedColumnAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumn extends Column {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnEvents;\r\n\r\n\t/**\r\n\t * The element that holds curved column shape.\r\n\t */\r\n\tpublic curvedColumn: Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumn\";\r\n\t}\r\n\r\n\t/**\r\n\t * [createAssets description]\r\n\t *\r\n\t * @todo Description\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected createAssets(): void {\r\n\t\tthis.curvedColumn = this.createChild(Sprite);\r\n\t\tthis.curvedColumn.shouldClone = false;\r\n\r\n\t\tthis.setPropertyValue(\"tension\", 0.7);\r\n\r\n\t\tthis.width = percent(120);\r\n\t\tthis.height = percent(120);\r\n\r\n\t\t// some dirty hack so that if user access column, it won't get error\r\n\t\tthis.column = <any>this.curvedColumn;\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the element.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic draw(): void {\r\n\t\tsuper.draw();\r\n\t\tlet w = this.realWidth;\r\n\t\tlet h = this.realHeight;\r\n\t\tlet x = this.realX - this.pixelX;\r\n\t\tlet y = this.realY - this.pixelY;\r\n\r\n\t\tlet points: IPoint[];\r\n\r\n\t\t// TODO can this be removed ?\r\n\t\t$utils.used(this.width);\r\n\r\n\t\tlet tensionX = 1;\r\n\t\tlet tensionY = 1;\r\n\r\n\t\tif (this.orientation == \"vertical\") {\r\n\t\t\ttensionX = this.tension;\r\n\t\t\tpoints = [{ x: 0, y: h + y }, { x: w / 2, y: y }, { x: w, y: h + y }];\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttensionY = this.tension;\r\n\t\t\tpoints = [{ x: x, y: 0 }, { x: x + w, y: h / 2 }, { x: x, y: h }];\r\n\t\t}\r\n\r\n\t\tlet path = $path.moveTo(points[0]) + new $smoothing.Tension(tensionX, tensionY).smooth(points);\r\n\t\tthis.column.path = path;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all parameters from another [[CurvedColumn]].\r\n\t *\r\n\t * @param source  Source CurvedColumn\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source)\r\n\t\tif (this.curvedColumn) {\r\n\t\t\tthis.curvedColumn.copyFrom(source.curvedColumn);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Horizontal tension of the curve.\r\n\t *\r\n\t * Tension defines how \"lose\" the line will be.\r\n\t *\r\n\t * 1 is the maximum tension which would result in pointy columns with\r\n\t * straight edges.\r\n\t *\r\n\t * The smaller the tension th wider the column will be.\r\n\t *\r\n\t * @default 0.7\r\n\t * @param value tension (0-1)\r\n\t */\r\n\tpublic set tension(value: number) {\r\n\t\tthis.setPropertyValue(\"tension\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Tension (0-1)\r\n\t */\r\n\tpublic get tension(): number {\r\n\t\treturn this.getPropertyValue(\"tension\");\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation of the column.\r\n\t *\r\n\t * Available options: \"vertical\" (default) and \"horizontal\".\r\n\t *\r\n\t * @default \"vertical\"\r\n\t * @param value  Orientation\r\n\t */\r\n\tpublic set orientation(value: Orientation) {\r\n\t\tthis.setPropertyValue(\"orientation\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * Orientation\r\n\t */\r\n\tpublic get orientation(): Orientation {\r\n\t\treturn this.getPropertyValue(\"orientation\");\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumn\"] = CurvedColumn;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CurvedColumn.ts","/**\r\n * CurvedColumnSeries module.\r\n *\r\n * Not recommended using if you use scrollbars or your chart is zoomable in some other way.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ColumnSeries, IColumnSeriesDataFields, IColumnSeriesProperties, IColumnSeriesAdapters, IColumnSeriesEvents, ColumnSeriesDataItem } from \"./ColumnSeries\";\r\nimport { CurvedColumn } from \"../elements/CurvedColumn\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class CurvedColumnSeriesDataItem extends ColumnSeriesDataItem {\r\n\r\n\t/**\r\n\t * A sprite used to draw the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: CurvedColumnSeries;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"CurvedColumnSeriesDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesDataFields extends IColumnSeriesDataFields { }\r\n\r\n/**\r\n * Defines properties for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesProperties extends IColumnSeriesProperties { }\r\n\r\n/**\r\n * Defines events for [[CurvedColumnSeries]].\r\n */\r\nexport interface ICurvedColumnSeriesEvents extends IColumnSeriesEvents { }\r\n\r\n/**\r\n * Defines adapters for [[CurvedColumnSeries]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICurvedColumnSeriesAdapters extends IColumnSeriesAdapters, ICurvedColumnSeriesProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines [[Series]] for a curved columns graph.\r\n *\r\n * @see {@link ICurvedColumnSeriesEvents} for a list of available Events\r\n * @see {@link ICurvedColumnSeriesAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class CurvedColumnSeries extends ColumnSeries {\r\n\r\n\t/**\r\n\t * Defines type of the column.\r\n\t */\r\n\tpublic _column: CurvedColumn;\r\n\r\n\t/**\r\n\t * Defines type of the data item.\r\n\t */\r\n\tpublic _dataItem: CurvedColumnSeriesDataItem;\r\n\r\n\t/**\r\n\t * Defines the type of data fields used for the series.\r\n\t */\r\n\tpublic _dataFields: ICurvedColumnSeriesDataFields\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICurvedColumnSeriesProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICurvedColumnSeriesAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICurvedColumnSeriesEvents;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CurvedColumnSeries\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an element to use for the curved column.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @return Element.\r\n\t */\r\n\tprotected createColumnTemplate(): this[\"_column\"] {\r\n\t\treturn new CurvedColumn();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Validates data item's elements.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElementReal(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElementReal(dataItem);\r\n\r\n\t\tlet column = dataItem.column;\r\n\t\tcolumn = dataItem.column;\r\n\r\n\t\tif (column) {\r\n\t\t\tlet curvedColumn = dataItem.column.curvedColumn;\r\n\r\n\t\t\tcurvedColumn.fill = dataItem.column.fill;\r\n\r\n\t\t\tif (this.baseAxis == this.yAxis) {\r\n\t\t\t\tcolumn.orientation = \"horizontal\";\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcolumn.orientation = \"vertical\";\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CurvedColumnSeries\"] = CurvedColumnSeries;\r\nregistry.registeredClasses[\"CurvedColumnSeriesDataItem\"] = CurvedColumnSeriesDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/series/CurvedColumnSeries.ts","/**\r\n * DurationAxis module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { ValueAxis, ValueAxisDataItem, IValueAxisProperties, IValueAxisDataFields, IValueAxisAdapters, IValueAxisEvents } from \"./ValueAxis\";\r\nimport { AxisRenderer } from \"./AxisRenderer\";\r\nimport { TimeUnit } from \"../../core/defs/TimeUnit\";\r\nimport { IMinMaxStep } from \"./ValueAxis\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $math from \"../../core/utils/Math\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data item for [[DurationAxis]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class DurationAxisDataItem extends ValueAxisDataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: DurationAxis;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxisDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisDataFields extends IValueAxisDataFields { }\r\n\r\n/**\r\n * Defines properties for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisProperties extends IValueAxisProperties { }\r\n\r\n/**\r\n * Defines events for [[DurationAxis]].\r\n */\r\nexport interface IDurationAxisEvents extends IValueAxisEvents { }\r\n\r\n/**\r\n * Defines adapters for [[DurationAxis]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IDurationAxisAdapters extends IValueAxisAdapters, IDurationAxisProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Used to create an axis that shows time durations.\r\n *\r\n * ```TypeScript\r\n * // Create the axis\r\n * let xAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * xAxis.title.text = \"Time\";\r\n * ```\r\n * ```JavaScript\r\n * // Create the axis\r\n * var valueAxis = chart.xAxes.push(new am4charts.DurationAxis());\r\n *\r\n * // Set settings\r\n * valueAxis.title.text = \"Time\";\r\n * ```\r\n * ```JSON\r\n * \"xAxes\": [{\r\n *   \"type\": \"DurationAxis\",\r\n *   \"title\": {\r\n *     \"text\": \"Time\"\r\n *   }\r\n * }]\r\n * ```\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information about duration formatters.\r\n * @see {@link IDurationAxisEvents} for a list of available Events\r\n * @see {@link IDurationAxisAdapters} for a list of available Adapters\r\n * @important\r\n */\r\nexport class DurationAxis<T extends AxisRenderer = AxisRenderer> extends ValueAxis<T> {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: IDurationAxisDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IDurationAxisProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IDurationAxisAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IDurationAxisEvents;\r\n\r\n\t/**\r\n\t * Defines the type of the Date Items.\r\n\t */\r\n\tpublic _dataItem: DurationAxisDataItem;\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t */\r\n\tprotected _baseUnit: TimeUnit = \"second\";\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t */\r\n\tprotected _tooltipDurationFormat: string;\r\n\r\n\t/**\r\n\t * Axis date format chosen dynamically based on min/max and baseUnit.\r\n\t *\r\n\t * @readonly\r\n\t */\r\n\tpublic axisDurationFormat: string;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"DurationAxis\";\r\n\r\n\t\tthis.setPropertyValue(\"maxZoomFactor\", 1000000);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Formats the value according to axis' own [[DurationFormatter]].\r\n\t *\r\n\t * @param value  Source value\r\n\t * @return Formatted value\r\n\t */\r\n\tpublic formatLabel(value: number, format?: string): string {\r\n\t\treturn this.durationFormatter.format(value, format || this.axisDurationFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts actual min and max scale values so that the axis starts and ends\r\n\t * at \"nice\" values, unless `strictMinMax` is set.\r\n\t *\r\n\t * The `difference` can be something else than `max - min`, because of the\r\n\t * axis breaks.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @todo Description\r\n\t * @param min        [description]\r\n\t * @param max        [description]\r\n\t * @param difference [description]\r\n\t * @param gridCount  [description]\r\n\t * @param strictMode [description]\r\n\t * @return [description]\r\n\t */\r\n\tpublic adjustMinMax(min: number, max: number, difference: number, gridCount: number, strictMode?: boolean): IMinMaxStep {\r\n\r\n\t\tlet minMaxStep: IMinMaxStep;\r\n\r\n\t\tlet timeUnit = this.baseUnit;\r\n\t\t// we don't allow to go to smaller units, setting so to avoid invalidation\r\n\t\tthis.setPropertyValue(\"maxPrecision\", 0);\r\n\r\n\t\tif (timeUnit == \"millisecond\" || timeUnit == \"second\" || timeUnit == \"minute\" || timeUnit == \"hour\") {\r\n\t\t\t// will fail if 0\r\n\t\t\tif (gridCount <= 1) {\r\n\t\t\t\tgridCount = 1;\r\n\t\t\t}\r\n\r\n\t\t\tgridCount = Math.round(gridCount);\r\n\r\n\t\t\tlet initialMin: number = min;\r\n\t\t\tlet initialMax: number = max;\r\n\r\n\t\t\t// in case min and max is the same, use max\r\n\t\t\tif (difference === 0) {\r\n\t\t\t\tdifference = Math.abs(max);\r\n\t\t\t}\r\n\r\n\t\t\tlet step = difference / gridCount;\r\n\r\n\t\t\tlet divisors = [60, 30, 20, 15, 10, 2, 1];\r\n\t\t\tlet realDivisor = 1;\r\n\r\n\t\t\tif (timeUnit == \"hour\") {\r\n\t\t\t\tdivisors = [24, 12, 6, 4, 2, 1];\r\n\t\t\t}\r\n\r\n\t\t\tfor (let divisor of divisors) {\r\n\t\t\t\tif (difference / divisor > gridCount) {\r\n\t\t\t\t\trealDivisor = divisor;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tlet count = Math.ceil(((max - min) / realDivisor) / gridCount);\r\n\r\n\t\t\tlet exponent: number = Math.log(Math.abs(count)) * Math.LOG10E;\r\n\t\t\tlet power = Math.pow(10, Math.floor(exponent)) / 10;\r\n\t\t\tlet reducedCount = count / power;\r\n\r\n\t\t\t// find closest to divisor\r\n\t\t\tlet closest = $math.closest(divisors, reducedCount);\r\n\t\t\tcount = closest * power;\r\n\r\n\t\t\tstep = realDivisor * count;\r\n\r\n\t\t\t// TODO can this be removed ?\r\n\t\t\tthis.durationFormatter.getValueUnit(step, this.baseUnit);\r\n\r\n\t\t\tmin = Math.floor(min / step) * step;\r\n\t\t\tmax = Math.ceil(max / step) * step;\r\n\r\n\t\t\tif (strictMode) {\r\n\t\t\t\tmin -= step;\r\n\t\t\t\tif (min < 0 && initialMin >= 0) {\r\n\t\t\t\t\tmin = 0;\r\n\t\t\t\t}\r\n\t\t\t\tmax += step;\r\n\r\n\t\t\t\tif (max > 0 && initialMax <= 0) {\r\n\t\t\t\t\tmax = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminMaxStep = { min: min, max: max, step: step };\r\n\t\t}\r\n\t\telse {\r\n\t\t\tminMaxStep = super.adjustMinMax(min, max, difference, gridCount, strictMode);\r\n\t\t}\r\n\r\n\t\t// choose duration formatter based on step\r\n\t\tthis.axisDurationFormat = this.durationFormatter.getFormat(minMaxStep.step, minMaxStep.max, this.baseUnit);\r\n\r\n\t\treturn minMaxStep;\r\n\t}\r\n\r\n\t/**\r\n\t * A special duration format to apply axis tooltips.\r\n\t *\r\n\t * Will use same format as for labels, if not set.\r\n\t *\r\n\t * @see {@link https://www.amcharts.com/docs/v4/concepts/formatters/formatting-duration/} for mor information.\r\n\t * @param value  Duration format for axis labels\r\n\t */\r\n\tpublic set tooltipDurationFormat(value: string) {\r\n\t\tthis._tooltipDurationFormat = value;\r\n\t}\r\n\r\n\t/**\r\n\t * @return Duration format for axis labels\r\n\t */\r\n\tpublic get tooltipDurationFormat(): string {\r\n\t\treturn this._tooltipDurationFormat;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns text to show in a axis tooltip, based on specific position within\r\n\t * axis.\r\n\t *\r\n\t * The label will be formatted as per [[NumberFormatter]] set for the whole\r\n\t * chart, or explicitly for this Axis.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param position  Position (px)\r\n\t * @return Label (numeric value)\r\n\t */\r\n\tpublic getTooltipText(position: number): string {\r\n\t\tlet value: number = $math.round(this.positionToValue(position), this._stepDecimalPlaces);\r\n\t\treturn this.adapter.apply(\"getTooltipText\", this.formatLabel(value, this.tooltipDurationFormat));\r\n\t}\r\n\r\n\t/**\r\n\t * A base unit (granularity) of data.\r\n\t *\r\n\t * Used to indicate what are the base units of your data.\r\n\t *\r\n\t * Available options: \"millisecond\", \"second\" (default), \"minute\", \"hour\",\r\n\t * \"day\", \"week\", \"month\", \"year\".\r\n\t *\r\n\t * @default \"second\"\r\n\t * @param timeUnit\r\n\t */\r\n\tpublic set baseUnit(timeUnit: TimeUnit) {\r\n\t\tif (this._baseUnit != timeUnit) {\r\n\t\t\tthis._baseUnit = timeUnit;\r\n\t\t\tthis.durationFormatter.baseUnit = timeUnit;\r\n\t\t\tthis.invalidate();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Base unit\r\n\t */\r\n\tpublic get baseUnit(): TimeUnit {\r\n\t\treturn this._baseUnit;\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all properties and related data from a different instance of Axis.\r\n\t *\r\n\t * @param source Source Axis\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.baseUnit = source.baseUnit;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"DurationAxis\"] = DurationAxis;\r\nregistry.registeredClasses[\"DurationAxisDataItem\"] = DurationAxisDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/axes/DurationAxis.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Circle } from \"../../core/elements/Circle\";\r\nimport { registry } from \"../../core/Registry\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface ICircleBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface ICircleBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICircleBulletAdapters extends IBulletAdapters, ICircleBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class CircleBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICircleBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICircleBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICircleBulletEvents;\r\n\r\n\t/**\r\n\t * A label (textual) element for the bullet.\r\n\t */\r\n\tpublic circle: Circle;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"CircleBullet\";\r\n\r\n\t\tlet circle = this.createChild(Circle);\r\n\t\tcircle.shouldClone = false;\r\n\t\tcircle.radius = 5;\r\n\t\tcircle.isMeasured = false;\r\n\t\tthis.circle = circle;\r\n\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[CircleBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.circle.copyFrom(source.circle);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"CircleBullet\"] = CircleBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/CircleBullet.ts","/**\r\n * Bullet module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Bullet, IBulletProperties, IBulletAdapters, IBulletEvents } from \"./Bullet\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Bullet]]\r\n */\r\nexport interface IErrorBulletProperties extends IBulletProperties { }\r\n\r\n/**\r\n * Defines events for [[Bullet]]\r\n */\r\nexport interface IErrorBulletEvents extends IBulletEvents { }\r\n\r\n/**\r\n * Defines adapters\r\n * Includes both the [[Adapter]] definitions and properties\r\n * @see {@link Adapter}\r\n */\r\nexport interface IErrorBulletAdapters extends IBulletAdapters, IErrorBulletProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Creates a bullet with a textual label.\r\n *\r\n * Uses [[Label]] instance to draw the label, so the label itself is\r\n * configurable.\r\n *\r\n * @see {@link IBulletEvents} for a list of available events\r\n * @see {@link IBulletAdapters} for a list of available Adapters\r\n * @todo Usage example\r\n * @important\r\n */\r\nexport class ErrorBullet extends Bullet {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IErrorBulletProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: IErrorBulletAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IErrorBulletEvents;\r\n\r\n\tpublic errorLine:Sprite;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\r\n\t\tthis.className = \"ErrorBullet\";\r\n\t\tthis.errorLine = this.createChild(Sprite);\r\n\t\tthis.errorLine.shouldClone = false;\r\n\t\tthis.width = 20;\r\n\t\tthis.height = 20;\r\n\t\tthis.strokeOpacity = 1;\r\n\t\tthis.isDynamic = true;\r\n\t}\r\n\r\n\r\n\tvalidatePosition(){\r\n\t\tsuper.validatePosition();\r\n\t\tlet w = this.pixelWidth / 2;\r\n\t\tlet h = this.pixelHeight / 2;\r\n\r\n\t\tthis.errorLine.path = $path.moveTo({x:-w, y:-h}) + $path.lineTo({x:w, y:-h}) + $path.moveTo({x:0, y:-h}) + $path.lineTo({x:0, y:h}) + $path.moveTo({x:-w, y:h}) + $path.lineTo({x:w, y:h});\r\n\t}\r\n\r\n\t/**\r\n\t * Copies all proprities and related stuff from another instance of\r\n\t * [[ErrorBullet]].\r\n\t *\r\n\t * @param source  Source element\r\n\t */\r\n\tpublic copyFrom(source: this): void {\r\n\t\tsuper.copyFrom(source);\r\n\t\tthis.errorLine.copyFrom(source.errorLine);\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"ErrorBullet\"] = ErrorBullet;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/ErrorBullet.ts","/**\r\n * Functionality for drawing simple NavigationBar.\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Component, IComponentProperties, IComponentAdapters, IComponentEvents, IComponentDataFields } from \"../../core/Component\";\r\nimport { Sprite } from \"../../core/Sprite\";\r\nimport { DataItem } from \"../../core/DataItem\";\r\nimport { ListTemplate, ListDisposer } from \"../../core/utils/List\";\r\nimport { TextLink } from \"../../core/elements/TextLink\";\r\nimport { Triangle } from \"../../core/elements/Triangle\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport * as $iter from \"../../core/utils/Iterator\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * DATA ITEM\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines a [[DataItem]] for [[NavigationBar]].\r\n *\r\n * @see {@link DataItem}\r\n */\r\nexport class NavigationBarDataItem extends DataItem {\r\n\r\n\t/**\r\n\t * Defines a type of [[Component]] this data item is used for.\r\n\t */\r\n\tpublic _component!: NavigationBar;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBarDataItem\";\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Name of the navigation bar item.\r\n\t *\r\n\t * @param value  Name\r\n\t */\r\n\tpublic set name(value: string) {\r\n\t\tthis.setProperty(\"name\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Name\r\n\t */\r\n\tpublic get name(): string {\r\n\t\treturn this.properties[\"name\"];\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines data fields for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarDataFields extends IComponentDataFields {\r\n\r\n\t/**\r\n\t * Name of nav var item.\r\n\t */\r\n\tname?: string;\r\n\r\n}\r\n\r\n/**\r\n * Defines properties for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarProperties extends IComponentProperties {\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[NavigationBar]].\r\n */\r\nexport interface INavigationBarEvents extends IComponentEvents { }\r\n\r\n/**\r\n * Defines adapters for [[NavigationBar]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface INavigationBarAdapters extends IComponentAdapters, INavigationBarProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * NavigationBar class can be used to create a multi-level breadcrumb-style\r\n * navigation control.\r\n *\r\n * @see {@link INavigationBarEvents} for a list of available events\r\n * @see {@link INavigationBarAdapters} for a list of available Adapters\r\n * @todo Implement better\r\n * @important\r\n */\r\nexport class NavigationBar extends Component {\r\n\r\n\t/**\r\n\t * Defines data fields.\r\n\t */\r\n\tpublic _dataFields: INavigationBarDataFields;\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: INavigationBarProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: INavigationBarAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: INavigationBarEvents;\r\n\r\n\t/**\r\n\t * A list of breadcrumbs (links) in the nav bar.\r\n\t */\r\n\tpublic links: ListTemplate<TextLink>;\r\n\r\n\t/**\r\n\t * [_linksIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _linksIterator: $iter.ListIterator<TextLink>;\r\n\r\n\t/**\r\n\t * [_separatorsIterator description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _separatorsIterator: $iter.ListIterator<Sprite>;\r\n\r\n\t/**\r\n\t * A reference to the link which is currently active.\r\n\t */\r\n\tpublic activeLink: TextLink;\r\n\r\n\t/**\r\n\t * A list of elements used as nav bar item separators.\r\n\t */\r\n\tpublic separators: ListTemplate<Triangle>;\r\n\r\n\t/**\r\n\t * Identifies the type of the [[DataItem]] used in this element.\r\n\t */\r\n\tpublic _dataItem!: NavigationBarDataItem;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"NavigationBar\";\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\tlet textLink = new TextLink();\r\n\t\ttextLink.valign = \"middle\";\r\n\t\ttextLink.paddingTop = 8;\r\n\t\ttextLink.paddingBottom = 8;\r\n\r\n\t\tthis.paddingBottom = 2;\r\n\r\n\t\tthis.links = new ListTemplate<TextLink>(textLink);\r\n\t\tthis._disposers.push(new ListDisposer(this.links));\r\n\t\tthis._disposers.push(textLink);\r\n\r\n\t\tthis._linksIterator = new $iter.ListIterator<TextLink>(this.links, () => this.links.create());\r\n\t\tthis._linksIterator.createNewItems = true;\r\n\r\n\t\tlet triangle = new Triangle();\r\n\t\ttriangle.direction = \"right\";\r\n\t\ttriangle.width = 8;\r\n\t\ttriangle.height = 12;\r\n\t\ttriangle.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\ttriangle.fillOpacity = 0.5;\r\n\t\ttriangle.valign = \"middle\";\r\n\t\ttriangle.marginLeft = 10;\r\n\t\ttriangle.marginRight = 10;\r\n\r\n\t\tthis.separators = new ListTemplate<Triangle>(triangle);\r\n\t\tthis._disposers.push(new ListDisposer(this.separators));\r\n\t\tthis._disposers.push(triangle);\r\n\r\n\t\tlet activeLink = new TextLink();\r\n\t\tthis.activeLink = activeLink;\r\n\t\tactiveLink.copyFrom(textLink);\r\n\t\tactiveLink.valign = \"middle\";\r\n\t\tactiveLink.fontWeight = \"bold\";\r\n\r\n\t\tthis.width = percent(100);\r\n\t\tthis.layout = \"grid\";\r\n\t\tthis.dataFields.name = \"name\";\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\t}\r\n\r\n\t/**\r\n\t * Completely redraws the navigation bar.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic validateDataElements(): void {\r\n\t\tthis.removeChildren();\r\n\t\tthis._linksIterator.reset();\r\n\t\tsuper.validateDataElements();\r\n\t\t//@todo: dispose\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a visual element for a data item (nav item).\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param dataItem  Data item\r\n\t */\r\n\tpublic validateDataElement(dataItem: this[\"_dataItem\"]): void {\r\n\t\tsuper.validateDataElement(dataItem);\r\n\r\n\t\tlet textLink: TextLink;\r\n\t\tif (dataItem.index < this.dataItems.length - 1) {\r\n\t\t\ttextLink = this._linksIterator.getLast();\r\n\t\t\ttextLink.parent = this;\r\n\t\t\tlet separator = this.separators.create();\r\n\t\t\tseparator.parent = this;\r\n\t\t\tseparator.valign = \"middle\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\ttextLink = this.activeLink;\r\n\t\t\ttextLink.events.copyFrom(this.links.template.events);\r\n\t\t\ttextLink.hide(0);\r\n\t\t\ttextLink.show();\r\n\t\t\ttextLink.parent = this;\r\n\t\t}\r\n\t\ttextLink.dataItem = dataItem;\r\n\t\ttextLink.text = dataItem.name;\r\n\t\ttextLink.validate();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"NavigationBar\"] = NavigationBar;\r\nregistry.registeredClasses[\"NavigationBarDataItem\"] = NavigationBarDataItem;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/elements/NavigationBar.ts","/**\r\n * Cursor module\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Container, IContainerProperties, IContainerAdapters, IContainerEvents } from \"../../core/Container\";\r\nimport { getInteraction, IInteractionEvents } from \"../../core/interaction/Interaction\";\r\nimport { IInteractionObjectEvents } from \"../../core/interaction/InteractionObjectEvents\";\r\nimport { IPoint, } from \"../../core/defs/IPoint\";\r\nimport { Chart } from \"../Chart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { percent } from \"../../core/utils/Percent\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport { Animation } from \"../../core/utils/Animation\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[Cursor]].\r\n */\r\nexport interface ICursorProperties extends IContainerProperties { }\r\n\r\n/**\r\n * Defines events for [[Cursor]].\r\n */\r\nexport interface ICursorEvents extends IContainerEvents {\r\n\r\n\t/**\r\n\t * Invoked when position of cursor changes.\r\n\t */\r\n\tcursorpositionchanged: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts selecting a range with a cursor, e.g. presses\r\n\t * down mouse button and drags the cursor.\r\n\t */\r\n\tselectstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when selection has ended, e.g. user releases mouse button.\r\n\t */\r\n\tselectended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts zooming using cursor.\r\n\t */\r\n\tzoomstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user clicked to start zooming/panning/selecting but haven't\r\n\t * finished the operation.\r\n\t */\r\n\tbehaviorcanceled: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done zooming using cursor.\r\n\t */\r\n\tzoomended: {};\r\n\r\n\t/**\r\n\t * Invoked when user starts panning using cursor.\r\n\t */\r\n\tpanstarted: {};\r\n\r\n\t/**\r\n\t * Invoked when user is done panning using cursor.\r\n\t */\r\n\tpanended: {};\r\n\r\n\t/**\r\n\t * Invoked when user is panning using cursor.\r\n\t */\r\n\tpanning: {};\r\n}\r\n\r\n/**\r\n * Defines adapters for [[Cursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface ICursorAdapters extends IContainerAdapters, ICursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Main Cursor class with common cursor functionality.\r\n *\r\n * Chart-specific cursors must extend this class.\r\n *\r\n * @see {@link ICursorEvents} for a list of available events\r\n * @see {@link ICursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n * @todo Should we allow changing `_generalBehavior`?\r\n */\r\nexport class Cursor extends Container {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: ICursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters.\r\n\t */\r\n\tpublic _adapter!: ICursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: ICursorEvents;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection started.\r\n\t */\r\n\tpublic downPoint: IPoint;\r\n\r\n\t/**\r\n\t * Point coordinates of where selection ended.\r\n\t */\r\n\tpublic upPoint: IPoint;\r\n\r\n\t/**\r\n\t * Current cursor position during selection.\r\n\t *\r\n\t * @todo Better description\r\n\t */\r\n\tpublic point: IPoint = { x: 0, y: 0 };\r\n\r\n\t/**\r\n\t * Relative horizontal position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic xPosition: number;\r\n\r\n\t/**\r\n\t * Relative vertical position.\r\n\t *\r\n\t * @todo: maybe we should make getter only? it is used from outside by axes or series to show tooltips at some position\r\n\t */\r\n\tpublic yPosition: number;\r\n\r\n\t/**\r\n\t * [_usesSelection description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected _usesSelection: boolean;\r\n\r\n\t/**\r\n\t * What to do when user pressed down and drags cursor: zoom or select.\r\n\t */\r\n\tprotected _generalBehavior: \"zoom\" | \"select\" | \"pan\"; // todo: draw\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: Chart;\r\n\r\n\t/**\r\n\t * Specifies the rules when cursor needs to be moved or hidden.\r\n\t */\r\n\tprotected _stick: \"hard\" | \"soft\" | \"none\" = \"none\";\r\n\r\n\t/**\r\n\t * A screen point that cursor is \"stuck\" to.\r\n\t */\r\n\tprotected _stickPoint: IPoint;\r\n\r\n\t/**\r\n\t * non-modified down point\r\n\t * @ignore\r\n\t */\r\n\tprotected _downPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * non-modified up point\r\n\t * @ignore\r\n\t */\r\n\tprotected _upPointOrig: IPoint;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"Cursor\";\r\n\r\n\t\t// Set defaults\r\n\t\tthis.width = percent(100);\r\n\t\tthis.height = percent(100);\r\n\t\tthis.shouldClone = false;\r\n\r\n\t\tthis.hide(0);\r\n\r\n\t\tthis.trackable = true;\r\n\t\tthis.clickable = true;\r\n\r\n\t\tthis.isMeasured = false;\r\n\r\n\t\t// Add events on body to trigger down and up events (to start zooming or\r\n\t\t// selection)\r\n\t\tconst interaction = getInteraction();\r\n\t\tthis._disposers.push(interaction.body.events.on(\"down\", this.handleCursorDown, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"up\", this.handleCursorUp, this));\r\n\t\tthis._disposers.push(interaction.body.events.on(\"track\", this.handleCursorMove, this));\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Handle pointer movement in document and update cursor position as needed.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Event\r\n\t */\r\n\tpublic handleCursorMove(event: IInteractionObjectEvents[\"track\"]): IPoint {\r\n\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\t// We want to let zoom/pan continue even if cursor is outside chart area\r\n\t\t\tif (!this.isHidden || !this.isHiding) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tif (this._stick == \"hard\" && this._stickPoint) {\r\n\t\t\tlocal = this._stickPoint;\r\n\t\t}\r\n\r\n\t\tif (this._stick == \"soft\" && this._stickPoint) {\r\n\t\t\tif (!this.fitsToBounds(local)) {\r\n\t\t\t\tlocal = this._stickPoint;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\treturn local;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides actual SVG elements and handles hiding animations.\r\n\t *\r\n\t * @param duration  Fade out duration (ms)\r\n\t * @return Fade out duration (ms)\r\n\t * @ignore\r\n\t */\r\n\tprotected hideReal(duration?: number): $type.Optional<Animation> {\r\n\t\tif ((this._stick == \"hard\" || this._stick == \"soft\") && this._stickPoint) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\treturn super.hideReal(duration);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * The second parameter has following options:\r\n\t *\r\n\t * `\"none\"` - placed cursor will only be there until mouse/touch moves, then\r\n\t * it either moves to a new place (if pointer over plot area) or is hidden.\r\n\t *\r\n\t * `\"soft\"` - cursor will stay in the place if mouse/touch is happening\r\n\t * outside chart, but will move to a new place whe plot area is hovered or\r\n\t * touched.\r\n\t *\r\n\t * `\"hard\"` - cursor will stay in place no matter what, until it is moved by\r\n\t * another `triggerMove()` call.\r\n\t *\r\n\t * @param point  Point to place cursor at\r\n\t * @param stick  Level of cursor stickiness to the place\r\n\t */\r\n\tpublic triggerMove(point: IPoint, stick?: \"hard\" | \"soft\" | \"none\"): void {\r\n\r\n\t\tpoint.x = $math.round(point.x, 1);\r\n\t\tpoint.y = $math.round(point.y, 1);\r\n\r\n\t\tif (stick) {\r\n\t\t\tthis._stick = stick;\r\n\t\t}\r\n\r\n\t\tif (stick == \"hard\" || stick == \"soft\") {\r\n\t\t\tthis._stickPoint = point;\r\n\t\t}\r\n\r\n\t\tthis.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\t\tif (this.point.x != point.x || this.point.y != point.y) {\r\n\t\t\tthis.point = point;\r\n\t\t\tthis.invalidatePosition();\r\n\t\t\t// hide cursor if it's out of bounds\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// unless we are selecting (mouse is down)\r\n\t\t\t\tif (!this.downPoint) {\r\n\t\t\t\t\tthis.hide(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.visible) {\r\n\t\t\t\tthis.getPositions();\r\n\r\n\t\t\t\tthis.dispatch(\"cursorpositionchanged\"); // not good to dispatch later (check step count example)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerDown(point: IPoint) {\r\n\t\tthis.triggerDownReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates pressing down (click/touch) action by a cursor.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\t\tswitch (this._generalBehavior) {\r\n\t\t\tcase \"zoom\":\r\n\t\t\t\tthis.dispatchImmediately(\"zoomstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"select\":\r\n\t\t\t\tthis.dispatchImmediately(\"selectstarted\");\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pan\":\r\n\t\t\t\tthis.dispatchImmediately(\"panstarted\");\r\n\t\t\t\tgetInteraction().setGlobalStyle(MouseCursorStyle.grabbing);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tpublic triggerUp(point: IPoint) {\r\n\t\tthis.triggerUpReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * Simulates the action of release of the mouse down / touch.\r\n\t *\r\n\t * @param point               Point of action\r\n\t */\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\r\n\t\tthis.updatePoint(this.upPoint);\r\n\t\tlet interaction = getInteraction();\r\n\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > interaction.getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tswitch (this._generalBehavior) {\r\n\t\t\t\tcase \"zoom\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"zoomended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"select\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase \"pan\":\r\n\t\t\t\t\tthis.dispatchImmediately(\"panended\");\r\n\t\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t\tthis.updateSelection();\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif(this._generalBehavior == \"select\"){\r\n\t\t\t\tthis.dispatchImmediately(\"selectended\");\r\n\t\t\t}\r\n\t\t\tthis.dispatchImmediately(\"behaviorcanceled\");\r\n\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions(): void {\r\n\t\t// positions are used by axes or series\r\n\t\tthis.xPosition = this.point.x / this.innerWidth;\r\n\t\tthis.yPosition = 1 - this.point.y / this.innerHeight;\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer down event so we can start zoom or selection.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorDown(event: IInteractionEvents[\"down\"]): void {\r\n\r\n\t\tif (!this.interactionsEnabled || (this.interactions.isTouchProtected && event.touch) || !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Get local point\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\r\n\t\tthis._downPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\t// We need to cancel the event to prevent gestures on touch devices\r\n\t\tif (event.event.cancelable && this.shouldPreventGestures(event.touch) && this.fitsToBounds(local)) {\r\n\t\t\tevent.event.preventDefault();\r\n\t\t}\r\n\r\n\t\t// Make this happen\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerDown(local);\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * Child classes should override this as necessary.\r\n\t * \r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t}\r\n\r\n\t/**\r\n\t * Handles pointer up event - finishes zoom or selection action.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original event\r\n\t */\r\n\tpublic handleCursorUp(event: IInteractionEvents[\"up\"]): void {\r\n\t\tif (!this.interactionsEnabled) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (((this._generalBehavior != \"zoom\" && this._generalBehavior != \"pan\") || !this.downPoint) && !getInteraction().isLocalElement(event.pointer, this.paper.svg, this.uid)) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet local: IPoint = $utils.documentPointToSprite(event.pointer.point, this);\r\n\t\tthis._upPointOrig = { x: local.x, y: local.y };\r\n\r\n\t\tthis.triggerMove(local);\r\n\t\tthis.triggerUp(local);\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to a [[Chart]] the cursor belongs to.\r\n\t *\r\n\t * @param value  Chart\r\n\t */\r\n\tpublic set chart(value: this[\"_chart\"]) {\r\n\t\tthis._chart = value;\r\n\t\tif ($type.hasValue((<any>this._chart).plotContainer)) {\r\n\t\t\tgetInteraction().lockElement((<any>this._chart).plotContainer.interactions);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Chart\r\n\t */\r\n\tpublic get chart(): this[\"_chart\"] {\r\n\t\treturn this._chart;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"Cursor\"] = Cursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/Cursor.ts","/**\r\n * Cursor for XY chart\r\n */\r\n\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { Cursor, ICursorProperties, ICursorAdapters, ICursorEvents } from \"./Cursor\";\r\nimport { Sprite, ISpriteEvents } from \"../../core/Sprite\";\r\nimport { MutableValueDisposer, MultiDisposer, IDisposer } from \"../../core/utils/Disposer\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { IRange } from \"../../core/defs/IRange\";\r\nimport { Axis } from \"../axes/Axis\";\r\nimport { XYSeries } from \"../series/XYSeries\";\r\nimport { AxisRenderer } from \"../axes/AxisRenderer\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { XYChart } from \"../types/XYChart\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport { color } from \"../../core/utils/Color\";\r\nimport { InterfaceColorSet } from \"../../core/utils/InterfaceColorSet\";\r\nimport { getInteraction } from \"../../core/interaction/Interaction\";\r\nimport { MouseCursorStyle } from \"../../core/interaction/Mouse\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[XYCursor]].\r\n */\r\nexport interface IXYCursorProperties extends ICursorProperties {\r\n\r\n\t/**\r\n\t * Cursor's behavior when moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally; (default)\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * @default \"zoomX\"\r\n\t */\r\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\";\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineX?: boolean;\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t */\r\n\tfullWidthLineY?: boolean;\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t */\r\n\tmaxPanOut?: number;\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t */\r\n\tsnapToSeries: XYSeries;\r\n}\r\n\r\n/**\r\n * Defines events for [[XYCursor]].\r\n */\r\nexport interface IXYCursorEvents extends ICursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[XYCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IXYCursorAdapters extends ICursorAdapters, IXYCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * A cursor used on [[XYChart]].\r\n *\r\n * @see {@link IXYCursorEvents} for a list of available events\r\n * @see {@link IXYCursorAdapters} for a list of available Adapters\r\n * @todo Add description, examples\r\n */\r\nexport class XYCursor extends Cursor {\r\n\r\n\t/**\r\n\t * Defines available properties.\r\n\t */\r\n\tpublic _properties!: IXYCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IXYCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IXYCursorEvents;\r\n\r\n\t/**\r\n\t * Vertical cursor line element.\r\n\t */\r\n\tprotected _lineX = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Horizontal cursor line element.\r\n\t */\r\n\tprotected _lineY = new MutableValueDisposer<Sprite>();\r\n\r\n\t/**\r\n\t * Element which highlights selected area.\r\n\t */\r\n\tprotected _selection: Sprite;\r\n\r\n\t/**\r\n\t * A range of current horizontal selection.\r\n\t */\r\n\tpublic xRange: IRange;\r\n\r\n\t/**\r\n\t * A range of current vertical selection.\r\n\t */\r\n\tpublic yRange: IRange;\r\n\r\n\t/**\r\n\t * Horizontal [[Axis]].\r\n\t */\r\n\tprotected _xAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * Vertical [[Axis]].\r\n\t */\r\n\tprotected _yAxis = new MutableValueDisposer<Axis<AxisRenderer>>();\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: XYChart;\r\n\r\n\tprotected _snapToDisposer: IDisposer;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"XYCursor\";\r\n\r\n\t\t// Defaults\r\n\t\tthis.behavior = \"zoomX\";\r\n\r\n\t\tthis.maxPanOut = 0.1;\r\n\r\n\t\tlet interfaceColors = new InterfaceColorSet();\r\n\r\n\t\t// Create selection element\r\n\t\tlet selection: Sprite = this.createChild(Sprite);\r\n\t\tselection.shouldClone = false;\r\n\t\tselection.fillOpacity = 0.2;\r\n\t\tselection.fill = interfaceColors.getFor(\"alternativeBackground\");\r\n\t\tselection.isMeasured = false;\r\n\t\tselection.interactionsEnabled = false;\r\n\t\tthis.selection = selection;\r\n\t\tthis._disposers.push(this.selection);\r\n\r\n\t\t// Create cursor's vertical line\r\n\t\tlet lineX: Sprite = this.createChild(Sprite);\r\n\t\tlineX.shouldClone = false;\r\n\t\tlineX.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineX.fill = color();\r\n\t\tlineX.strokeDasharray = \"3,3\";\r\n\t\tlineX.isMeasured = false;\r\n\t\tlineX.strokeOpacity = 0.4;\r\n\t\tlineX.interactionsEnabled = false;\r\n\t\tlineX.y = 0;// important\r\n\t\tthis.lineX = lineX;\r\n\t\tthis._disposers.push(this.lineX);\r\n\r\n\t\t// Create cursor's horizontal line\r\n\t\tlet lineY: Sprite = this.createChild(Sprite);\r\n\t\tlineY.shouldClone = false;\r\n\t\tlineY.stroke = interfaceColors.getFor(\"grid\");\r\n\t\tlineY.fill = color();\r\n\t\tlineY.strokeDasharray = \"3,3\";\r\n\t\tlineY.isMeasured = false;\r\n\t\tlineY.strokeOpacity = 0.4;\r\n\t\tlineY.interactionsEnabled = false;\r\n\t\tlineY.x = 0; // important\r\n\t\tthis.lineY = lineY;\r\n\t\tthis._disposers.push(this.lineY);\r\n\r\n\t\t// Add handler for size changes\r\n\t\tthis.events.on(\"sizechanged\", this.updateSize, this, false);\r\n\r\n\t\tthis._disposers.push(this._lineX);\r\n\t\tthis._disposers.push(this._lineY);\r\n\t\tthis._disposers.push(this._xAxis);\r\n\t\tthis._disposers.push(this._yAxis);\r\n\r\n\t\tthis.mask = this;\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursor element dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: 0, y: this.innerHeight });\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.path = $path.moveTo({ x: 0, y: 0 }) + $path.lineTo({ x: this.innerWidth, y: 0 });\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\t\t\tlet behavior = this.behavior;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tif (this.lineX) {\r\n\t\t\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.lineY) {\r\n\t\t\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\r\n\t\t\t\tlet x: number = Math.min(point.x, downPoint.x);\r\n\t\t\t\tlet y: number = Math.min(point.y, downPoint.y);\r\n\r\n\t\t\t\tlet w: number = $math.round(Math.abs(downPoint.x - point.x), this._positionPrecision);\r\n\t\t\t\tlet h: number = $math.round(Math.abs(downPoint.y - point.y), this._positionPrecision);\r\n\r\n\t\t\t\tswitch (behavior) {\r\n\t\t\t\t\tcase \"zoomX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"zoomY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectX\":\r\n\t\t\t\t\t\ty = 0;\r\n\t\t\t\t\t\th = this.pixelHeight;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"selectY\":\r\n\t\t\t\t\t\tx = 0;\r\n\t\t\t\t\t\tw = this.pixelWidth;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselection.x = x;\r\n\t\t\t\tselection.y = y;\r\n\r\n\t\t\t\tselection.path = $path.rectangle(w, h);\r\n\r\n\t\t\t\tselection.validatePosition(); // otherwise Edge shoes some incorrect size rectangle\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\tpoint.x = Math.max(0, point.x);\r\n\t\tpoint.y = Math.max(0, point.y);\r\n\t\tpoint.x = Math.min(this.pixelWidth, point.x);\r\n\t\tpoint.y = Math.min(this.pixelHeight, point.y);\r\n\r\n\t\treturn point;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Places the cursor at specific point.\r\n\t *\r\n\t * @param point Point to place cursor at\r\n\t */\r\n\tprotected triggerMoveReal(point: IPoint): void {\r\n\r\n\t\tsuper.triggerMoveReal(point);\r\n\r\n\t\tif ((this.snapToSeries && !this.snapToSeries.isHidden)) {\r\n\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.updateLinePositions(point);\r\n\t\t}\r\n\r\n\t\tif (this.downPoint && $math.getDistance(this.downPoint, point) > 3) {\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tthis.getPanningRanges();\r\n\t\t\t\tthis.dispatch(\"panning\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\t\tpoint = this.fixPoint(this.point);\r\n\r\n\t\tif (this.lineX && this.lineX.visible && !this.xAxis) {\r\n\t\t\tthis.lineX.x = point.x;\r\n\t\t}\r\n\t\tif (this.lineY && this.lineY.visible && !this.yAxis) {\r\n\t\t\tthis.lineY.y = point.y;\r\n\t\t}\r\n\t\tthis.updateSelection();\r\n\t}\r\n\r\n\r\n\tprotected triggerDownReal(point: IPoint) {\r\n\r\n\t\tif (this.visible && !this.isHiding) {\r\n\r\n\t\t\tif (this._generalBehavior == \"select\") {\r\n\t\t\t\tthis.selection.parent = this.parent;\r\n\t\t\t}\r\n\r\n\t\t\tif (this.fitsToBounds(point)) {\r\n\t\t\t\tthis.downPoint = { x: point.x, y: point.y };\r\n\r\n\t\t\t\tthis.updatePoint(point);\r\n\r\n\t\t\t\t//this.updateLinePositions(point); // otherwise lines won't be in correct position and touch won't work fine\r\n\r\n\t\t\t\tthis.point.x = this.downPoint.x;\r\n\t\t\t\tthis.point.y = this.downPoint.y;\r\n\r\n\t\t\t\tlet selection: Sprite = this.selection;\r\n\t\t\t\tlet selectionX: number = this.downPoint.x;\r\n\t\t\t\tlet selectionY: number = this.downPoint.y;\r\n\r\n\t\t\t\tif (this._usesSelection) {\r\n\t\t\t\t\tselection.x = selectionX;\r\n\t\t\t\t\tselection.y = selectionY;\r\n\t\t\t\t\tselection.path = \"\";\r\n\t\t\t\t\tselection.show();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerDownReal(point);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.downPoint = undefined;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis.downPoint = undefined;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the coordinates of where pointer down event occurred\r\n\t * (was pressed).\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\t\tif (this.lineX) {\r\n\t\t\tpoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tpoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tprotected triggerUpReal(point: IPoint) {\r\n\t\tif ($math.getDistance(this._upPointOrig, this._downPointOrig) > getInteraction().getHitOption(this.interactions, \"hitTolerance\")) {\r\n\t\t\tif (this.downPoint) {\r\n\t\t\t\tthis.upPoint = point;\r\n\r\n\t\t\t\tthis.updatePoint(this.upPoint);\r\n\r\n\t\t\t\tthis.getRanges();\r\n\r\n\t\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t\tsuper.triggerUpReal(point);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (this._generalBehavior != \"select\") {\r\n\t\t\t\tthis.selection.hide(0);\r\n\t\t\t}\r\n\r\n\t\t\t// reset cursor style, just in case\r\n\t\t\tif (this._generalBehavior == \"pan\") {\r\n\t\t\t\tlet interaction = getInteraction();\r\n\t\t\t\tinteraction.setGlobalStyle(MouseCursorStyle.default);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.downPoint = undefined;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getPanningRanges() {\r\n\r\n\t\tlet startX = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet startY = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\r\n\t\tlet currentX = $math.round(this.point.x / this.innerWidth, 5);\r\n\t\tlet currentY = $math.round(this.point.y / this.innerHeight, 5);\r\n\r\n\t\tlet deltaX = startX - currentX;\r\n\t\tlet deltaY = -startY + currentY;\r\n\r\n\t\tthis.xRange = { start: deltaX, end: 1 + deltaX };\r\n\t\tthis.yRange = { start: deltaY, end: 1 + deltaY };\r\n\r\n\t\tif (this.behavior == \"panX\") {\r\n\t\t\tthis.yRange.start = 0;\r\n\t\t\tthis.yRange.end = 1;\r\n\t\t}\r\n\t\tif (this.behavior == \"panY\") {\r\n\t\t\tthis.xRange.start = 0;\r\n\t\t\tthis.xRange.end = 1;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges() {\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.upPoint.x = this.lineX.pixelX;\r\n\t\t}\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.upPoint.y = this.lineY.pixelY;\r\n\t\t}\r\n\r\n\t\t// @todo Is this needed?\r\n\t\t$utils.used(this.selection);\r\n\r\n\t\tlet startX: number = $math.round(this.downPoint.x / this.innerWidth, 5);\r\n\t\tlet endX: number = $math.round((this.upPoint.x) / this.innerWidth, 5);\r\n\r\n\t\tlet startY: number = $math.round(this.downPoint.y / this.innerHeight, 5);\r\n\t\tlet endY: number = $math.round((this.upPoint.y) / this.innerHeight, 5);\r\n\r\n\t\tthis.xRange = { start: $math.min(startX, endX), end: $math.max(startX, endX) };\r\n\t\tthis.yRange = { start: $math.min(startY, endY), end: $math.max(startY, endY) };\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's behavior when it's moved with pointer down:\r\n\t *\r\n\t * * \"zoomX\" - zooms horizontally;\r\n\t * * \"zoomY\" - zooms vertically;\r\n\t * * \"zoomXY\" - zooms both horizontally and vertically;\r\n\t * * \"selectX\" - selects a range horizontally;\r\n\t * * \"selectY\" - selects a range vertically;\r\n\t * * \"selectXY\" - selects a range both horizontally and vertically;\r\n\t * * \"panX\" - moves (pans) current selection horizontally;\r\n\t * * \"panY\" - moves (pans) current selection vertically;\r\n\t * * \"panXY\" - moves (pans) current selection both horizontally and vertically;\r\n\t * * \"none\" - does nothing with pointer down.\r\n\t *\r\n\t * E.g. \"zoomXY\" will mean that pressing a mouse (or touching) over plot area\r\n\t * and dragging it will start zooming the chart.\r\n\t *\r\n\t * @param value Bheavior\r\n\t */\r\n\tpublic set behavior(value: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\") {\r\n\t\tthis.setPropertyValue(\"behavior\", value, true);\r\n\r\n\t\tthis._usesSelection = false;\r\n\r\n\t\tif (value.indexOf(\"zoom\") != -1) {\r\n\t\t\tthis._generalBehavior = \"zoom\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"select\") != -1) {\r\n\t\t\tthis._generalBehavior = \"select\";\r\n\t\t\tthis._usesSelection = true;\r\n\t\t}\r\n\t\tif (value.indexOf(\"pan\") != -1) {\r\n\t\t\tthis._generalBehavior = \"pan\";\r\n\t\t\tthis._usesSelection = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Behavior\r\n\t */\r\n\tpublic get behavior(): \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"panX\" | \"panY\" | \"panXY\" | \"none\" {\r\n\t\treturn this.getPropertyValue(\"behavior\");\r\n\t}\r\n\r\n\t/**\r\n\t * Determines whether Cursor should prevent default action on move.\r\n\t *\r\n\t * If cursor's behavior is \"none\", it should not obstruct the page scrolling.\r\n\t *\r\n\t * @return Prevent default?\r\n\t */\r\n\tprotected shouldPreventGestures(touch: boolean): boolean {\r\n\t\treturn (!this.interactions.isTouchProtected || !touch) && this.behavior != \"none\";\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's horizontal line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `xAxis` is set and only in case\r\n\t * `xAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineX(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineX\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineX(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineX\");\r\n\t}\r\n\r\n\t/**\r\n\t * Cursor's vertical line is expanded to take full width of the related\r\n\t * Axis' cell/category.\r\n\t *\r\n\t * NOTE: this setting will work properly if `yAxis` is set and only in case\r\n\t * `yAxis` is [[CategoryAxis]] or [[DateAxis]].\r\n\t *\r\n\t * @param value Full width?\r\n\t */\r\n\tpublic set fullWidthLineY(value: boolean) {\r\n\t\tthis.setPropertyValue(\"fullWidthLineY\", value);\r\n\t\tif (!value) {\r\n\t\t\tthis.updateSize();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get fullWidthLineY(): boolean {\r\n\t\treturn this.getPropertyValue(\"fullWidthLineY\");\r\n\t}\r\n\r\n\t/**\r\n\t * If cursor behavior is panX or panY, we allow to pan plot out of it's max bounds for a better user experience.\r\n\t * This setting specifies relative value by how much we can pan out the plot\r\n\t *\r\n\t * @param value\r\n\t */\r\n\tpublic set maxPanOut(value: number) {\r\n\t\tthis.setPropertyValue(\"maxPanOut\", value);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Full width?\r\n\t */\r\n\tpublic get maxPanOut(): number {\r\n\t\treturn this.getPropertyValue(\"maxPanOut\");\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to X [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `xAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis X axis\r\n\t */\r\n\tpublic set xAxis(axis: Axis) {\r\n\t\tif (this._xAxis.get() != axis) {\r\n\t\t\tthis._xAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleXTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return X axis\r\n\t */\r\n\tpublic get xAxis(): Axis {\r\n\t\treturn this._xAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to Y [[Axis]].\r\n\t *\r\n\t * An XY cursor can live without `yAxis` set. You set xAxis for cursor when\r\n\t * you have axis tooltip enabled and you want cursor line to be at the same\r\n\t * position as tooltip.\r\n\t *\r\n\t * This works with [[CategoryAxis]] and [[DateAxis]] but not with\r\n\t * [[ValueAxis]].\r\n\t *\r\n\t * @todo Description (review)\r\n\t * @param axis Y axis\r\n\t */\r\n\tpublic set yAxis(axis: Axis) {\r\n\t\tif (this._yAxis.get() != axis) {\r\n\t\t\tthis._yAxis.set(axis, new MultiDisposer([\r\n\t\t\t\taxis.tooltip.events.on(\"positionchanged\", this.handleYTooltipPosition, this, false),\r\n\t\t\t\t//axis.events.on(\"validated\", chart.handleCursorPositionChange, chart, false)\r\n\t\t\t]));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Y Axis\r\n\t */\r\n\tpublic get yAxis(): Axis {\r\n\t\treturn this._yAxis.get();\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes position.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet x: number = point.x;\r\n\r\n\t\tif (this.lineX) {\r\n\t\t\tthis.lineX.x = x;\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineX.x = x;\r\n\t\t\t\tlet width: number = endPoint.x - startPoint.x;\r\n\t\t\t\tthis.lineX.path = $path.rectangle(width, this.innerHeight, -width / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when Y axis changes position or scale.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param event Original Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\tlet point: IPoint = $utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this);\r\n\t\tlet y: number = point.y;\r\n\r\n\t\tif (this.lineY) {\r\n\t\t\tthis.lineY.y = y;\r\n\r\n\t\t\tif (!this.fitsToBounds(point)) {\r\n\t\t\t\tthis.hide();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\tthis.lineY.y = y;\r\n\t\t\t\tlet height: number = endPoint.y - startPoint.y;\r\n\t\t\t\tthis.lineY.path = $path.rectangle(this.innerWidth, height, 0, -height / 2);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use for X axis.\r\n\t *\r\n\t * @param lineX Line\r\n\t */\r\n\tpublic set lineX(lineX: Sprite) {\r\n\t\tif (lineX) {\r\n\t\t\tlineX.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineX.set(lineX, lineX.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineX.interactionsEnabled = false;\r\n\t\t\tlineX.parent = this;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineX.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineX(): Sprite {\r\n\t\treturn this._lineX.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A Line element to use Y axis.\r\n\t *\r\n\t * @param lineY Line\r\n\t */\r\n\tpublic set lineY(lineY: Sprite) {\r\n\t\tif (lineY) {\r\n\t\t\tlineY.setElement(this.paper.add(\"path\"));\r\n\t\t\tthis._lineY.set(lineY, lineY.events.on(\"positionchanged\", this.updateSelection, this, false));\r\n\t\t\tlineY.parent = this;\r\n\t\t\tlineY.interactionsEnabled = false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthis._lineY.reset();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Line element\r\n\t */\r\n\tpublic get lineY(): Sprite {\r\n\t\treturn this._lineY.get();\r\n\t}\r\n\r\n\t/**\r\n\t * A selection element ([[Sprite]]).\r\n\t *\r\n\t * @param selection Selection rectangle\r\n\t */\r\n\tpublic set selection(selection: Sprite) {\r\n\t\tthis._selection = selection;\r\n\t\tif (selection) {\r\n\t\t\tselection.element = this.paper.add(\"path\");\r\n\t\t\tselection.parent = this;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return Selection rectangle\r\n\t */\r\n\tpublic get selection(): Sprite {\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * Processes JSON-based config before it is applied to the object.\r\n\t *\r\n\t * Looks if `xAxis` and `yAxis` is set via ID in JSON config, and replaces\r\n\t * with real references.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param config  Config\r\n\t */\r\n\tpublic processConfig(config?: { [index: string]: any }): void {\r\n\r\n\t\tif (config) {\r\n\r\n\t\t\t// Set up axes\r\n\t\t\tif ($type.hasValue(config.xAxis) && $type.isString(config.xAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.xAxis)) {\r\n\t\t\t\t\tconfig.xAxis = this.map.getKey(config.xAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.xAxis + \"\\\" found for `xAxis`\");\r\n\t\t\t\t\tdelete config.xAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif ($type.hasValue(config.yAxis) && $type.isString(config.yAxis)) {\r\n\t\t\t\tif (this.map.hasKey(config.yAxis)) {\r\n\t\t\t\t\tconfig.yAxis = this.map.getKey(config.yAxis);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No axis with id \\\"\" + config.yAxis + \"\\\" found for `yAxis`\");\r\n\t\t\t\t\tdelete config.yAxis;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif ($type.hasValue(config.snapToSeries) && $type.isString(config.snapToSeries)) {\r\n\t\t\t\tif (this.map.hasKey(config.snapToSeries)) {\r\n\t\t\t\t\tconfig.snapToSeries = this.map.getKey(config.snapToSeries);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.processingErrors.push(\"[XYCursor] No series with id \\\"\" + config.snapToSeries + \"\\\" found for `series`\");\r\n\t\t\t\t\tdelete config.snapToSeries;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsuper.processConfig(config);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Specifies to which series cursor lines should be snapped. Works when one\r\n\t * of the axis is `DateAxis` or `CategoryAxis`. Won't work if both axes are\r\n\t * `ValueAxis`.\r\n\t *\r\n\t * @param {XYSeries}\r\n\t */\r\n\tpublic set snapToSeries(series: XYSeries) {\r\n\t\tif (this.setPropertyValue(\"snapToSeries\", series)) {\r\n\t\t\tif (this._snapToDisposer) {\r\n\t\t\t\tthis._snapToDisposer.dispose();\r\n\t\t\t}\r\n\r\n\t\t\tif (series) {\r\n\t\t\t\tthis._snapToDisposer = series.events.on(\"tooltipshownat\", this.handleSnap, this, false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return {XYSeries}\r\n\t */\r\n\tpublic get snapToSeries(): XYSeries {\r\n\t\treturn this.getPropertyValue(\"snapToSeries\");\r\n\t}\r\n\r\n\t/**\r\n\t * [handleSnap description]\r\n\t *\r\n\t * @ignore\r\n\t * @todo Description\r\n\t */\r\n\tpublic handleSnap() {\r\n\r\n\t\tlet series = this.snapToSeries;\r\n\t\tlet y = series.tooltipY;\r\n\t\tlet x = series.tooltipX;\r\n\r\n\t\tif (this.xAxis) {\r\n\t\t\tif (this.xAxis.renderer.opposite) {\r\n\t\t\t\ty -= this.pixelHeight;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.point = { x: x, y: y };\r\n\t\tthis.getPositions();\r\n\r\n\t\tlet xx = x;\r\n\t\tlet yy = y;\r\n\r\n\t\tx -= this.pixelWidth;\r\n\r\n\t\tif (this.yAxis) {\r\n\t\t\tif (this.yAxis.renderer.opposite) {\r\n\t\t\t\tx += this.pixelWidth;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet tooltip = series.tooltip;\r\n\t\tlet duration = tooltip.animationDuration;\r\n\t\tlet easing = tooltip.animationEasing;\r\n\r\n\t\tif (series.baseAxis == series.xAxis) {\r\n\t\t\tseries.yAxis.showTooltipAtPosition(this.yPosition);\r\n\t\t}\r\n\r\n\t\tif (series.baseAxis == series.yAxis) {\r\n\t\t\tseries.xAxis.showTooltipAtPosition(this.xPosition);\r\n\t\t}\r\n\r\n\t\tthis.lineX.animate([{ property: \"y\", to: y }], duration, easing);\r\n\t\tthis.lineY.animate([{ property: \"x\", to: x }], duration, easing);\r\n\r\n\t\tif (!this.xAxis) {\r\n\t\t\tthis.lineX.animate([{ property: \"x\", to: xx }], duration, easing);\r\n\t\t}\r\n\t\tif (!this.yAxis) {\r\n\t\t\tthis.lineY.animate([{ property: \"y\", to: yy }], duration, easing);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Destroys this object and all related data.\r\n\t */\r\n\tpublic dispose() {\r\n\t\tthis.hide(0);\r\n\t\tsuper.dispose();\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"XYCursor\"] = XYCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/XYCursor.ts","/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { RadarChart } from \"../types/RadarChart\";\r\nimport { XYCursor, IXYCursorAdapters, IXYCursorEvents, IXYCursorProperties } from \"./XYCursor\";\r\nimport { IPoint } from \"../../core/defs/IPoint\";\r\nimport { ISpriteEvents } from \"../../core/Sprite\";\r\nimport { Tooltip } from \"../../core/elements/Tooltip\";\r\nimport { Percent, percent } from \"../../core/utils/Percent\";\r\nimport { registry } from \"../../core/Registry\";\r\nimport * as $path from \"../../core/rendering/Path\";\r\nimport * as $math from \"../../core/utils/Math\";\r\nimport * as $utils from \"../../core/utils/Utils\";\r\nimport * as $type from \"../../core/utils/Type\";\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * REQUISITES\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Defines properties for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorProperties extends IXYCursorProperties {\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tinnerRadius: number | Percent;\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t */\r\n\tradius: number | Percent;\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t */\r\n\tstartAngle: number;\r\n\r\n\t/**\r\n\t * Ending angle of the cursor's radial line.\r\n\t */\r\n\tendAngle: number;\r\n\r\n}\r\n\r\n/**\r\n * Defines events for [[RadarCursor]].\r\n */\r\nexport interface IRadarCursorEvents extends IXYCursorEvents { }\r\n\r\n/**\r\n * Defines adapters for [[RadarCursor]].\r\n *\r\n * @see {@link Adapter}\r\n */\r\nexport interface IRadarCursorAdapters extends IXYCursorAdapters, IRadarCursorProperties { }\r\n\r\n\r\n/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n\r\n/**\r\n * Cursor for [[RadarChart]].\r\n *\r\n * @see {@link IRadarCursorEvents} for a list of available events\r\n * @see {@link IRadarCursorAdapters} for a list of available Adapters\r\n */\r\nexport class RadarCursor extends XYCursor {\r\n\r\n\t/**\r\n\t * Defines available properties\r\n\t */\r\n\tpublic _properties!: IRadarCursorProperties;\r\n\r\n\t/**\r\n\t * Defines available adapters\r\n\t */\r\n\tpublic _adapter!: IRadarCursorAdapters;\r\n\r\n\t/**\r\n\t * Defines available events.\r\n\t */\r\n\tpublic _events!: IRadarCursorEvents;\r\n\r\n\t/**\r\n\t * A reference to chart cursor belongs to.\r\n\t */\r\n\tpublic _chart: RadarChart;\r\n\r\n\r\n\tprotected _prevAngle: number;\r\n\r\n\t/**\r\n\t * Constructor\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t// Init\r\n\t\tsuper();\r\n\t\tthis.className = \"RadarCursor\";\r\n\t\tthis.radius = percent(100);\r\n\t\tthis.innerRadius = percent(0);\r\n\r\n\t\t// Apply theme\r\n\t\tthis.applyTheme();\r\n\r\n\t\tthis.mask = undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if point is within bounds of a container.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t * @param point  Point to check\r\n\t * @return Fits within container?\r\n\t */\r\n\tpublic fitsToBounds(point: IPoint): boolean {\r\n\t\tlet radius = $math.getDistance(point);\r\n\r\n\t\t//if(!$math.isAngleInRange(angle, this.startAngle, this.endAngle)){\r\n\t\t\t//return false;\r\n\t\t//}\r\n\t\tif (radius < this.truePixelRadius + 1 && radius > this.pixelInnerRadius - 1) { // ok to add/remove some\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Starting angle of the cursor's radial line.\r\n\t *\r\n\t * @param value Start angle\r\n\t */\r\n\tpublic set startAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"startAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Start angle\r\n\t */\r\n\tpublic get startAngle(): number {\r\n\t\treturn this.getPropertyValue(\"startAngle\");\r\n\t}\r\n\r\n\t/**\r\n\t * End angle of the cursor's radial line.\r\n\t *\r\n\t * @param value End angle\r\n\t */\r\n\tpublic set endAngle(value: number) {\r\n\t\tthis.setPropertyValue(\"endAngle\", value, true);\r\n\t}\r\n\r\n\t/**\r\n\t * @return End angle\r\n\t */\r\n\tpublic get endAngle(): number {\r\n\t\treturn this.getPropertyValue(\"endAngle\");\r\n\t}\r\n\r\n\r\n\tprotected triggerMoveReal(point:IPoint) {\r\n\r\n\t\tif (!this.xAxis || (this.xAxis && (!this.xAxis.cursorTooltipEnabled || this.xAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineX(this.point);\r\n\t\t}\r\n\t\tif (!this.yAxis || (this.yAxis && (!this.yAxis.cursorTooltipEnabled || this.yAxis.tooltip.disabled))) {\r\n\t\t\tthis.updateLineY(this.point);\r\n\t\t}\r\n\r\n\t\tthis.updateSelection();\r\n\t\tsuper.triggerMoveReal(point);\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the horizontal (circular) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineX(point: IPoint) {\r\n\r\n\t\tlet radius: number = this.pixelRadius;\r\n\t\tlet startAngle: number = this.startAngle;\r\n\t\tlet endAngle: number = this.endAngle;\r\n\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\tif (radius > 0 && $type.isNumber(startAngle) && $type.isNumber(endAngle) && $type.isNumber(innerRadius)) {\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\t\t\tlet path: string;\r\n\r\n\t\t\tif (this.lineX && this.lineX.visible) {\r\n\r\n\t\t\t\tthis.lineX.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t// fill\r\n\t\t\t\tif (this.xAxis && this.fullWidthLineX) {\r\n\r\n\t\t\t\t\tlet startPoint: IPoint = this.xAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.xAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet fillStartAngle: number = $math.fitAngleToRange($math.getAngle(startPoint), startAngle, endAngle);\r\n\t\t\t\t\t\tlet fillEndAngle: number = $math.fitAngleToRange($math.getAngle(endPoint), startAngle, endAngle);\r\n\r\n\t\t\t\t\t\tlet arc: number = fillEndAngle - fillStartAngle;\r\n\r\n\t\t\t\t\t\t// clockwise\r\n\t\t\t\t\t\t// this is needed, normalizeAngle doesn't solve it\r\n\t\t\t\t\t\tif (startAngle < endAngle) {\r\n\t\t\t\t\t\t\tif (arc < 0) {\r\n\t\t\t\t\t\t\t\tarc += 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ccw\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif (arc > 0) {\r\n\t\t\t\t\t\t\t\tarc -= 360;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tangle -= arc / 2;\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle, arc, radius)\r\n\t\t\t\t\t\t\t+ $path.lineTo({ x: innerRadius * $math.cos(angle + arc), y: innerRadius * $math.sin(angle + arc) })\r\n\t\t\t\t\t\t\t+ $path.arcTo(angle + arc, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// line\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: innerRadius * $math.cos(angle), y: innerRadius * $math.sin(angle) }) + $path.lineTo({ x: radius * $math.cos(angle), y: radius * $math.sin(angle) });\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineX.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * (Re)draws the vertical (radial) cursor's line.\r\n\t *\r\n\t * @param point New target point\r\n\t */\r\n\tprotected updateLineY(point: IPoint) {\r\n\t\tif (this.lineY && this.lineY.visible) {\r\n\t\t\tlet startAngle = this.startAngle;\r\n\t\t\tlet endAngle = this.endAngle;\r\n\t\t\tlet truePixelRadius = this.truePixelRadius;\r\n\t\t\tlet radius = $math.fitToRange($math.getDistance(point), 0, this.truePixelRadius);\r\n\t\t\tif ($type.isNumber(radius) && $type.isNumber(startAngle)) {\r\n\t\t\t\tthis.lineY.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\tlet path: string;\r\n\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\r\n\t\t\t\tif (this.yAxis && this.fullWidthLineY) {\r\n\t\t\t\t\t// fill\r\n\t\t\t\t\tlet startPoint: IPoint = this.yAxis.currentItemStartPoint;\r\n\t\t\t\t\tlet endPoint: IPoint = this.yAxis.currentItemEndPoint;\r\n\r\n\t\t\t\t\tif (startPoint && endPoint) {\r\n\t\t\t\t\t\tlet innerRadius: number = $math.fitToRange($math.getDistance(startPoint), 0, truePixelRadius);\r\n\t\t\t\t\t\tradius = $math.fitToRange($math.getDistance(endPoint), 0, truePixelRadius);\r\n\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, arc, radius);\r\n\t\t\t\t\t\tpath += $path.moveTo({ x: innerRadius * $math.cos(endAngle), y: innerRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, -arc, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (!path) {\r\n\t\t\t\t\tpath = $path.moveTo({ x: radius * $math.cos(startAngle), y: radius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, radius);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.lineY.path = path;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates selection dimensions on size change.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSelection(): void {\r\n\t\tif (this._usesSelection) {\r\n\t\t\tlet downPoint: IPoint = this.downPoint;\r\n\r\n\t\t\tif (downPoint) {\r\n\r\n\t\t\t\tlet point: IPoint = this.point;\r\n\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet truePixelRadius: number = this.truePixelRadius;\r\n\t\t\t\tlet innerRadius: number = this.pixelInnerRadius;\r\n\r\n\t\t\t\tlet startAngle: number = Math.min(this.startAngle, this.endAngle);\r\n\t\t\t\tlet endAngle: number = Math.max(this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), startAngle, endAngle);\r\n\t\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(point), startAngle, endAngle);\r\n\r\n\t\t\t\tlet downRadius: number = $math.getDistance(downPoint);\r\n\t\t\t\tif (downRadius < truePixelRadius) {\r\n\r\n\t\t\t\t\tlet currentRadius = $math.fitToRange($math.getDistance(point), 0, truePixelRadius);\r\n\r\n\t\t\t\t\tthis._prevAngle = angle;\r\n\r\n\t\t\t\t\tlet path: string = $path.moveTo({ x: 0, y: 0 });\r\n\r\n\t\t\t\t\tlet downSin: number = $math.sin(downAngle);\r\n\t\t\t\t\tlet downCos: number = $math.cos(downAngle);\r\n\r\n\t\t\t\t\tlet sin: number = $math.sin(angle);\r\n\t\t\t\t\tlet cos: number = $math.cos(angle);\r\n\r\n\t\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\") {\r\n\t\t\t\t\t\tpath += $path.lineTo({ x: radius * downCos, y: radius * downSin }) + $path.arcTo(downAngle, angle - downAngle, radius) + $path.lineTo({ x: innerRadius * cos, y: innerRadius * sin }) + $path.arcTo(angle, downAngle - angle, innerRadius);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomY\" || behavior == \"selectY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(startAngle), y: currentRadius * $math.sin(startAngle) }) + $path.arcTo(startAngle, endAngle - startAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(endAngle), y: downRadius * $math.sin(endAngle) }) + $path.arcTo(endAngle, startAngle - endAngle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (behavior == \"zoomXY\") {\r\n\t\t\t\t\t\tpath = $path.moveTo({ x: currentRadius * $math.cos(downAngle), y: currentRadius * $math.sin(downAngle) }) + $path.arcTo(downAngle, angle - downAngle, currentRadius) + $path.lineTo({ x: downRadius * $math.cos(angle), y: downRadius * $math.sin(angle) }) + $path.arcTo(angle, downAngle - angle, downRadius) + $path.closePath();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.selection.path = path;\r\n\t\t\t\t}\r\n\t\t\t\tthis.selection.moveTo({ x: 0, y: 0 });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates cursors current positions.\r\n\t */\r\n\tprotected getPositions() {\r\n\t\t// positions are used by axes or series\r\n\t\tlet chart: RadarChart = this.chart;\r\n\t\tif (chart) {\r\n\t\t\tlet innerRadius = this.pixelInnerRadius;\r\n\t\t\tlet radius: number = this.truePixelRadius - innerRadius;\r\n\r\n\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\tlet angle: number = $math.fitAngleToRange($math.getAngle(this.point), startAngle, endAngle);\r\n\t\t\tlet xPosition = ((angle - startAngle) / (endAngle - startAngle));\r\n\t\t\tthis.xPosition = xPosition;\r\n\r\n\t\t\tthis.yPosition = $math.fitToRange(($math.getDistance(this.point) - innerRadius) / radius, 0, 1);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when it's triggered.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tprotected updatePoint(point: IPoint) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes horizontal position.\r\n\t *\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleXTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.xAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.xAxis.tooltip;\r\n\t\t\tthis.updateLineX($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Updates Cursor's position when axis tooltip changes vertical position.\r\n\t *\r\n\t * @todo Description\r\n\t * @param event Axis event\r\n\t */\r\n\tprotected handleYTooltipPosition(event: ISpriteEvents[\"positionchanged\"]): void {\r\n\t\tif (this.yAxis.cursorTooltipEnabled) {\r\n\t\t\tlet tooltip: Tooltip = this.yAxis.tooltip;\r\n\t\t\tthis.updateLineY($utils.svgPointToSprite({ x: tooltip.pixelX, y: tooltip.pixelY }, this));\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * needs to be overriden\r\n\t * @ignore\r\n\t */\r\n\tprotected updateLinePositions(point: IPoint) {\r\n\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * [getRanges description]\r\n\t *\r\n\t * @todo Description\r\n\t */\r\n\tprotected getRanges(): void {\r\n\t\tlet downPoint = this.downPoint;\r\n\t\tif (downPoint) {\r\n\t\t\tlet upPoint: IPoint = this.upPoint;\r\n\r\n\t\t\tlet chart: RadarChart = this.chart;\r\n\t\t\tif (chart) {\r\n\t\t\t\tlet radius: number = this.pixelRadius;\r\n\t\t\t\tlet startAngle: number = this.startAngle;\r\n\t\t\t\tlet endAngle: number = this.endAngle;\r\n\r\n\t\t\t\tlet downAngle: number = $math.fitAngleToRange($math.getAngle(downPoint), this.startAngle, this.endAngle);\r\n\t\t\t\tlet upAngle: number = $math.fitAngleToRange($math.getAngle(upPoint), this.startAngle, this.endAngle);\r\n\r\n\t\t\t\tlet downRadius = $math.fitToRange($math.getDistance(downPoint), 0, radius);\r\n\t\t\t\tlet upRadius = $math.fitToRange($math.getDistance(upPoint), 0, radius);\r\n\r\n\t\t\t\tlet startX: number = 0;\r\n\t\t\t\tlet endX: number = 1;\r\n\r\n\t\t\t\tlet startY: number = 0;\r\n\t\t\t\tlet endY: number = 1;\r\n\r\n\t\t\t\tlet behavior = this.behavior;\r\n\t\t\t\tif (behavior == \"zoomX\" || behavior == \"selectX\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tlet arc: number = endAngle - startAngle;\r\n\t\t\t\t\tstartX = $math.round((downAngle - startAngle) / arc, 5);\r\n\t\t\t\t\tendX = $math.round((upAngle - startAngle) / arc, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (behavior == \"zoomY\" || behavior == \"selectY\" || behavior == \"zoomXY\" || behavior == \"selectXY\") {\r\n\t\t\t\t\tstartY = $math.round(downRadius / radius, 5);\r\n\t\t\t\t\tendY = $math.round(upRadius / radius, 5);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.xRange = { start: Math.min(startX, endX), end: Math.max(startX, endX) };\r\n\t\t\t\tthis.yRange = { start: Math.min(startY, endY), end: Math.max(startY, endY) };\r\n\r\n\t\t\t\tif (this.behavior == \"selectX\" || this.behavior == \"selectY\" || this.behavior == \"selectXY\") {\r\n\t\t\t\t\t// void\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.selection.hide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Overriding inherited method, so that nothing happens when `updateSize`\r\n\t * is triggered.\r\n\t *\r\n\t * RadarCursor is quite complicated and needs own sizing logic.\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\tpublic updateSize(): void { }\r\n\r\n\t/**\r\n\t * Outer radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Outer radius\r\n\t */\r\n\tpublic set radius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"radius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Outer radius\r\n\t */\r\n\tpublic get radius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"radius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Outer radius of the circular line in pixels.\r\n\t *\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelRadius(): number {\r\n\t\treturn $utils.relativeRadiusToValue(this.radius, this.truePixelRadius);\r\n\t}\r\n\r\n\t/**\r\n\t * [truePixelRadius description]\r\n\t *\r\n\t * @todo Description\r\n\t * @return Outer radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get truePixelRadius(): number {\r\n\t\treturn $utils.relativeToValue(percent(100), $math.min(this.innerWidth / 2, this.innerHeight / 2));\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the cursor's circular line.\r\n\t * Absolute (px) or relative ([[Percent]]).\r\n\t *\r\n\t * @param value  Inner radius\r\n\t */\r\n\tpublic set innerRadius(value: number | Percent) {\r\n\t\tthis.setPercentProperty(\"innerRadius\", value, false, false, 10, false);\r\n\t}\r\n\r\n\t/**\r\n\t * @return Inner radius\r\n\t */\r\n\tpublic get innerRadius(): number | Percent {\r\n\t\treturn this.getPropertyValue(\"innerRadius\");\r\n\t}\r\n\r\n\t/**\r\n\t * Inner radius of the circular line in pixels.\r\n\t *\r\n\t * @return Inner radius (px)\r\n\t * @readonly\r\n\t */\r\n\tpublic get pixelInnerRadius(): number {\r\n\r\n\t\tlet innerRadius = this.innerRadius;\r\n\r\n\t\tif (innerRadius instanceof Percent) {\r\n\t\t\tinnerRadius = percent(100 * innerRadius.value * this.chart.innerRadiusModifyer);\r\n\t\t}\r\n\r\n\t\treturn $utils.relativeRadiusToValue(innerRadius, this.truePixelRadius) || 0;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t *\r\n\t * @ignore Exclude from docs\r\n\t */\r\n\r\n\tprotected fixPoint(point: IPoint): IPoint {\r\n\t\t// overriding xy method\r\n\t\treturn point;\r\n\t}\r\n}\r\n\r\n/**\r\n * Register class in system, so that it can be instantiated using its name from\r\n * anywhere.\r\n *\r\n * @ignore\r\n */\r\nregistry.registeredClasses[\"RadarCursor\"] = RadarCursor;\r\n\n\n\n// WEBPACK FOOTER //\n// ../../../../../src/.internal/charts/cursors/RadarCursor.ts","import * as m from \"../es2015/charts\";\nwindow.am4charts = m;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./charts.js\n// module id = null\n// module chunks = "],"sourceRoot":""}